// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.13.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == "function")
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    mixinProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          H.throwLateInitializationError(name);
        holder[name] = value;
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == "string")
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable: function(source, $S, $T) {
      if ($S._eval$1("EfficientLengthIterable<0>")._is(source))
        return new H._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new H.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldNI: function(fieldName) {
      return new H.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$localNI: function(localName) {
      return new H.LateError("Local '" + localName + "' has not been initialized.");
    },
    checkNotNullable: function(value, $name, $T) {
      return value;
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      P.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        P.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new H.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new H.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new H.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
      P.RangeError_checkNotNegative(takeCount, "takeCount");
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new H.EfficientLengthTakeIterable(iterable, takeCount, $E._eval$1("EfficientLengthTakeIterable<0>"));
      return new H.TakeIterable(iterable, takeCount, $E._eval$1("TakeIterable<0>"));
    },
    SkipIterable_SkipIterable: function(iterable, count, $E) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        P.RangeError_checkNotNegative(count, "count");
        return new H.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      P.RangeError_checkNotNegative(count, "count");
      return new H.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort_sort: function(a, compare, $E) {
      H.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var t0, less, great, k, ak, comp, great0, less0, pivots_are_equal,
        sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = C.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap_ConstantMap$from: function(other, $K, $V) {
      var allStrings, object, containsProto, protoValue, $length, k, v,
        keys = P.List_List$from(other.get$keys(), true, $K),
        t1 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t1)) {
          allStrings = true;
          break;
        }
        if (typeof keys[_i] != "string") {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (containsProto = false, protoValue = null, $length = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
          k = keys[_i];
          v = $V._as(other.$index(0, k));
          if (!J.$eq$(k, "__proto__")) {
            H._asString(k);
            if (!object.hasOwnProperty(k))
              ++$length;
            object[k] = v;
          } else {
            protoValue = v;
            containsProto = true;
          }
        }
        if (containsProto)
          return new H.ConstantProtoMap($V._as(protoValue), $length + 1, object, $K._eval$1("List<0>")._as(keys), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantProtoMap<1,2>"));
        return new H.ConstantStringMap($length, object, keys, $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantStringMap<1,2>"));
      }
      return new H.ConstantMapView(P.LinkedHashMap_LinkedHashMap$from(other, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantMapView<1,2>"));
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S: function(value) {
      var res;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var decimalMatch,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return null;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = match[3];
      if (decimalMatch != null)
        return parseInt(source, 10);
      if (match[2] != null)
        return parseInt(source, 16);
      return null;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti: function(object) {
      var dispatchName, t1, $constructor, constructorName;
      if (object instanceof P.Object)
        return H._rtiToString(H.instanceType(object), null);
      if (J.getInterceptor$(object) === C.Interceptor_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = C.C_JS_CONST(object);
        t1 = dispatchName !== "Object" && dispatchName !== "";
        if (t1)
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string")
            t1 = constructorName !== "Object" && constructorName !== "";
          else
            t1 = false;
          if (t1)
            return constructorName;
        }
      }
      return H._rtiToString(H.instanceType(object), null);
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((C.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_valueFromDecomposedDate: function(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
      var value,
        jsMonth = month - 1;
      if (0 <= years && years < 100) {
        years += 400;
        jsMonth -= 4800;
      }
      value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
      if (isNaN(value) || value < -864e13 || value > 864e13)
        return null;
      return value;
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, _s5_ = "index";
      if (!H._isInt(index))
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError: function(start, end, $length) {
      if (start > $length)
        return P.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return P.RangeError$range(end, start, $length, "end", null);
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    wrapException: function(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = H.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      if (ex == null)
        return new H.NullThrownFromJavaScriptException(ex);
      if (ex instanceof H.ExceptionAndStackTrace)
        return H.saveStackTrace(ex, type$.Object._as(ex.dartException));
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return H.saveStackTrace(ex, ex.dartException);
      return H._unwrapNonDartException(ex);
    },
    saveStackTrace: function(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException: function(ex) {
      var message, number, ieErrorCode, t1, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              t1 = H.S(message) + " (Error " + ieErrorCode + ")";
              return H.saveStackTrace(ex, new H.NullError(t1, _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asString(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              H._asString(message);
              return H.saveStackTrace(ex, new H.NullError(message, match == null ? _null : match.method));
            }
          }
        }
        return H.saveStackTrace(ex, new H.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return H.saveStackTrace(ex, new P.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (H._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, applyTrampoline, i, stub, stubCallName,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, "").constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      type$.Object._as(reflectionInfo);
      $prototype.$signature = H.Closure__computeSignatureFunctionNewRti(reflectionInfo, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti: function(functionType, isStatic, isIntercepted) {
      var typeEvalMethod;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getTypeFromTypesTable, functionType);
      if (typeof functionType == "string") {
        if (isStatic)
          throw H.wrapException("Cannot compute signature for static tearoff.");
        typeEvalMethod = isIntercepted ? H.BoundClosure_evalRecipeIntercepted : H.BoundClosure_evalRecipe;
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, typeEvalMethod);
      }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        return new Function(t1 + (t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      return new Function(t1 + (t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var receiverField, stubName, arity, lookedUpFunction, t1, t2, $arguments,
        selfField = $.BoundClosure_selfFieldNameCache;
      if (selfField == null)
        selfField = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      receiverField = $.BoundClosure_receiverFieldNameCache;
      if (receiverField == null)
        receiverField = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 28;
      if (t2)
        return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + selfField + "." + H.S(stubName) + "(this." + receiverField + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + selfField + "." + H.S(stubName) + "(this." + receiverField + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_evalRecipe: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._self), recipe);
    },
    BoundClosure_evalRecipeIntercepted: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._receiver), recipe);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw H.wrapException(P.ArgumentError$("Field name " + fieldName + " not found."));
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    throwLateInitializationError: function($name) {
      return H.throwExpression(new H.LateError($name));
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = H._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = H._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    escapeReplacement: function(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var t1 = H.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString: function(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(H.quoteStringForRegExp(pattern), 'g'), H.escapeReplacement(replacement));
    },
    _stringIdentity: function(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked: function(receiver, pattern, onMatch, onNonMatch) {
      var match, t4, t5,
        t1 = new H._AllMatchesIterator(pattern, receiver, 0),
        t2 = type$.RegExpMatch,
        startIndex = 0, t3 = "";
      for (; t1.moveNext$0();) {
        match = t2._as(t1.__js_helper$_current);
        t4 = match._match;
        t5 = t4.index;
        t3 = t3 + H.S(H._stringIdentity(C.JSString_methods.substring$2(receiver, startIndex, t5))) + H.S(onMatch.call$1(match));
        startIndex = t5 + t4[0].length;
      }
      t1 = t3 + H.S(H._stringIdentity(C.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2) {
      this.$this = t0;
      this.transform = t1;
      this.result = t2;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _._keys = t2;
      _.$ti = t3;
    },
    ConstantProtoMap: function ConstantProtoMap(t0, t1, t2, t3, t4) {
      var _ = this;
      _._protoValue = t0;
      _.__js_helper$_length = t1;
      _._jsObject = t2;
      _._keys = t3;
      _.$ti = t4;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    _checkViewArguments: function(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList: function(list) {
      var t1, result, i;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      result = P.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
      for (i = 0; i < t1.get$length(list); ++i)
        C.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
      return result;
    },
    NativeByteData_NativeByteData$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new DataView(buffer, offsetInBytes) : new DataView(buffer, offsetInBytes, $length);
    },
    NativeUint8List_NativeUint8List: function($length) {
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar: function(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = H._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr: function(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = H._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType: function(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return H.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe: function(rti) {
      return rti._canonicalRecipe;
    },
    findType: function(recipe) {
      return H._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute: function(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = H._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return H._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = H._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return H._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = H._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = H._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return H._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw H.wrapException(P.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray: function(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(substitutedRti);
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed: function(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(t1);
        result.push(t2);
        result.push(substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters: function(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = H._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = H._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = H._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new H._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _isClosure: function(object) {
      return object instanceof H.Closure;
    },
    setRuntimeTypeInfo: function(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType: function(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return H.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType: function(object, testRti) {
      var rti;
      if (H.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof H.Closure) {
          rti = H.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return H.instanceType(object);
    },
    instanceType: function(object) {
      var rti;
      if (object instanceof P.Object) {
        rti = object.$ti;
        return rti != null ? rti : H._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return H._arrayInstanceType(object);
      return H._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType: function(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType: function(object) {
      var rti = object.$ti;
      return rti != null ? rti : H._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor: function(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return H._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss: function(instance, $constructor) {
      var effectiveConstructor = instance instanceof H.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = H._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable: function(index) {
      var table, type, rti;
      H._asInt(index);
      table = init.types;
      type = table[index];
      if (typeof type == "string") {
        rti = H._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    createRuntimeType: function(rti) {
      var recipe, starErasedRecipe, starErasedRti,
        type = rti._cachedRuntimeType;
      if (type != null)
        return type;
      recipe = rti._canonicalRecipe;
      starErasedRecipe = recipe.replace(/\*/g, "");
      if (starErasedRecipe === recipe)
        return rti._cachedRuntimeType = new H._Type(rti);
      starErasedRti = H._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      type = starErasedRti._cachedRuntimeType;
      return rti._cachedRuntimeType = type == null ? starErasedRti._cachedRuntimeType = new H._Type(starErasedRti) : type;
    },
    typeLiteral: function(recipe) {
      return H.createRuntimeType(H._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest: function(object) {
      var t1, unstarred, isFn, testRti = this;
      if (testRti === type$.Object)
        return H._finishIsFn(testRti, object, H._isObject);
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return H._finishIsFn(testRti, object, H._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = H._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = H._isNum;
      else if (unstarred === type$.String)
        isFn = H._isString;
      else
        isFn = unstarred === type$.bool ? H._isBool : null;
      if (isFn != null)
        return H._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        t1 = unstarred._primary;
        if (unstarred._rest.every(H.isTopType)) {
          testRti._specializedTestResource = "$is" + t1;
          return H._finishIsFn(testRti, object, H._isTestViaProperty);
        }
      } else if (t1 === 7)
        return H._finishIsFn(testRti, object, H._generalNullableIsTestImplementation);
      return H._finishIsFn(testRti, object, H._generalIsTestImplementation);
    },
    _finishIsFn: function(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck: function(object) {
      var t1, testRti = this,
        asFn = H._generalAsCheckImplementation;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = H._asTop;
      else if (testRti === type$.Object)
        asFn = H._asObject;
      else {
        t1 = H.isNullable(testRti);
        if (t1)
          asFn = H._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs: function(testRti) {
      var t1,
        kind = testRti._kind;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              t1 = kind === 8 && H._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      return H._isSubtype(init.typeUniverse, H.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation: function(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty: function(object) {
      var tag, testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof P.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation: function(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = H.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _failedAsCheck: function(object, testRti) {
      throw H.wrapException(H._TypeError$fromMessage(H._Error_compose(object, H.instanceOrFunctionType(object, testRti), H._rtiToString(testRti, null))));
    },
    checkTypeBound: function(type, bound, variable, methodName) {
      var _null = null;
      if (H._isSubtype(init.typeUniverse, type, _null, bound, _null))
        return type;
      throw H.wrapException(H._TypeError$fromMessage("The type argument '" + H._rtiToString(type, _null) + "' is not a subtype of the type variable bound '" + H._rtiToString(bound, _null) + "' of type variable '" + variable + "' in '" + methodName + "'."));
    },
    _Error_compose: function(object, objectRti, checkedTypeDescription) {
      var objectDescription = P.Error_safeToString(object),
        objectTypeDescription = H._rtiToString(objectRti == null ? H.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + objectTypeDescription + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage: function(message) {
      return new H._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType: function(object, type) {
      return new H._TypeError("TypeError: " + H._Error_compose(object, null, type));
    },
    _isObject: function(object) {
      return object != null;
    },
    _asObject: function(object) {
      if (object != null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop: function(object) {
      return true;
    },
    _asTop: function(object) {
      return object;
    },
    _isBool: function(object) {
      return true === object || false === object;
    },
    _asBool: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt: function(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum: function(object) {
      return typeof object == "number";
    },
    _asNum: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num?"));
    },
    _isString: function(object) {
      return typeof object == "string";
    },
    _asString: function(object) {
      if (typeof object == "string")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString: function(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + H._rtiToString(array[i], genericContext);
      return s;
    },
    _functionRtiToString: function(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText += typeSep;
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (t4 < 0)
            return H.ioore(genericContext, t4);
          typeParametersText = C.JSString_methods.$add(typeParametersText, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + H._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = H._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + H._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + H._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += H._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString: function(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = H._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = H._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + H._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = H._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length !== 0 ? $name + ("<" + H._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return H._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return H._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule: function(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType: function(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return H._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = H._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = [];
        for (i = 0; i < $length; ++i)
          $arguments.push(erased);
        $interface = H._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules: function(universe, rules) {
      return H._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes: function(universe, types) {
      return H._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval: function(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment: function(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind: function(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = H._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests: function(universe, rti) {
      rti._as = H._installSpecializedAsCheck;
      rti._is = H._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti: function(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new H.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && H.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && H.isNullable(starArgument._primary))
            return starArgument;
          else
            return H.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti: function(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return H._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new H.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti: function(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin: function($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed: function($arguments) {
      var s, sep, i, t1, nameSep, s0,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s0 = $arguments[i + 2]._canonicalRecipe;
        s += sep + t1 + nameSep + s0;
      }
      return s;
    },
    _Universe__lookupInterfaceRti: function(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length !== 0)
        s += "<" + H._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti: function(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + H._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti: function(universe, returnType, parameters) {
      var sep, t1, key, probe, rti,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + H._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoin(optionalPositional);
        recipe += sep + "[" + t1 + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoinNamed(named);
        recipe += sep + "{" + t1 + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti: function(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + H._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti: function(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = new Array($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = H._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, 0);
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Parser_create: function(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse: function(parser) {
      var t2, i, ch, t3, array, head, base, parameters, optionalPositional, named, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = H._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = H._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = H._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(H._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(H._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(H._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(H._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(H._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              t3 = parser.u;
              array = t1.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              head = t1.pop();
              if (typeof head == "string")
                t1.push(H._Universe__lookupInterfaceRti(t3, head, array));
              else {
                base = H._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                  case 11:
                    t1.push(H._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                  default:
                    t1.push(H._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
              }
              break;
            case 38:
              H._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(H._Universe__lookupStarRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(H._Universe__lookupQuestionRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(H._Universe__lookupFutureOrRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              t3 = parser.u;
              parameters = new H._FunctionParameters();
              optionalPositional = t3.sEA;
              named = t3.sEA;
              head = t1.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = t1.pop();
                    break;
                  case -2:
                    named = t1.pop();
                    break;
                  default:
                    t1.push(head);
                    break;
                }
              else
                t1.push(head);
              array = t1.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              t1.push(H._Universe__lookupFunctionRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parameters));
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              H._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return H._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit: function(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier: function(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = H._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          H.throwExpression('No "' + string + '" in "' + H.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(H._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations: function(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw H.wrapException(P.AssertionError$("Unexpected extended operation " + H.S($top)));
    },
    _Parser_toType: function(universe, environment, item) {
      if (typeof item == "string")
        return H._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return H._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType: function(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw H.wrapException(P.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw H.wrapException(P.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype: function(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (H.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (H._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return H._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = H.Rti__getQuestionFromStar(universe, t);
        return H._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!H._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return H._isSubtype(universe, H.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = H._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && H._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (H._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return H._isSubtype(universe, s, sEnv, H.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = H._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || H._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!H._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !H._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return H._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return H._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return H._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype: function(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!H._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!H._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!H._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype: function(universe, s, sEnv, t, tEnv) {
      var sArgs, tArgs, $length, i, t1, t2, rule, supertypeArgs,
        sName = s._primary,
        tName = t._primary;
      if (sName === tName) {
        sArgs = s._rest;
        tArgs = t._rest;
        $length = sArgs.length;
        for (i = 0; i < $length; ++i) {
          t1 = sArgs[i];
          t2 = tArgs[i];
          if (!H._isSubtype(universe, t1, sEnv, t2, tEnv))
            return false;
        }
        return true;
      }
      if (t === type$.Object)
        return true;
      rule = H._Universe_findRule(universe, sName);
      if (rule == null)
        return false;
      supertypeArgs = rule[tName];
      if (supertypeArgs == null)
        return false;
      $length = supertypeArgs.length;
      tArgs = t._rest;
      for (i = 0; i < $length; ++i)
        if (!H._isSubtype(universe, H._Universe_evalInEnvironment(universe, s, supertypeArgs[i]), sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    isNullable: function(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!H.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && H.isNullable(t._primary)))
              t1 = kind === 8 && H.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType: function(t) {
      var t1;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType: function(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign: function(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return init.mangledGlobalNames[$name];
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed: function($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList: function(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSArray__compareAny: function(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$bn: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z: function(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$length$asx: function(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$error$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$error(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    $add$ansx: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $and$bn: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return (receiver & a0) >>> 0;
      return J.getInterceptor$bn(receiver).$and(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    _getUint16$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver)._getUint16$2(receiver, a0, a1);
    },
    _getUint32$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver)._getUint32$2(receiver, a0, a1);
    },
    add$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    compareTo$1$ns: function(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    fold$1$2$ax: function(receiver, a0, a1, $T1) {
      return J.getInterceptor$ax(receiver).fold$1$2(receiver, a0, a1, $T1);
    },
    forEach$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    map$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).map$1(receiver, a0);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    padLeft$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).padLeft$2(receiver, a0, a1);
    },
    setRange$4$ax: function(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    setUint8$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).setUint8$2(receiver, a0, a1);
    },
    skip$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    take$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      P.Timer__createTimer(C.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return P._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter: function($T) {
      return new P._AsyncAwaitCompleter(new P._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync: function(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn: function(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow: function(object, completer) {
      completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var t1, future,
        thenCallback = new P._awaitOnObject_closure(bodyFunction),
        errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      if (object instanceof P._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new P._Future($.Zone__current, type$._Future_dynamic);
          future._state = 4;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _asyncStarHelper: function(object, bodyFunctionOrErrorCode, controller) {
      var t1, t2;
      if (bodyFunctionOrErrorCode === 0) {
        t1 = controller.cancelationFuture;
        if (t1 != null)
          t1._completeWithValue$1(null);
        else
          controller.get$controller().close$0(0);
        return;
      } else if (bodyFunctionOrErrorCode === 1) {
        t1 = controller.cancelationFuture;
        if (t1 != null)
          t1._completeError$2(H.unwrapException(object), H.getTraceFromException(object));
        else {
          t1 = H.unwrapException(object);
          t2 = H.getTraceFromException(object);
          controller.get$controller().addError$2(t1, t2);
          controller.get$controller().close$0(0);
        }
        return;
      }
      type$.void_Function_int_dynamic._as(bodyFunctionOrErrorCode);
      if (object instanceof P._IterationMarker) {
        if (controller.cancelationFuture != null) {
          bodyFunctionOrErrorCode.call$2(2, null);
          return;
        }
        t1 = object.state;
        if (t1 === 0) {
          t1 = object.value;
          controller.get$controller().add$1(0, controller.$ti._precomputed1._as(t1));
          P.scheduleMicrotask(new P._asyncStarHelper_closure(controller, bodyFunctionOrErrorCode));
          return;
        } else if (t1 === 1) {
          t1 = controller.$ti._eval$1("Stream<1>")._as(type$.Stream_dynamic._as(object.value));
          controller.get$controller().addStream$2$cancelOnError(t1, false).then$1(new P._asyncStarHelper_closure0(controller, bodyFunctionOrErrorCode));
          return;
        }
      }
      P._awaitOnObject(object, bodyFunctionOrErrorCode);
    },
    _streamOfController: function(controller) {
      var t1 = controller.get$controller();
      return new P._ControllerStream(t1, H._instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    _AsyncStarStreamController$: function(body, $T) {
      var t1 = new P._AsyncStarStreamController($T._eval$1("_AsyncStarStreamController<0>"));
      t1._AsyncStarStreamController$1(body, $T);
      return t1;
    },
    _makeAsyncStarStreamController: function(body, $T) {
      return P._AsyncStarStreamController$(body, $T);
    },
    _IterationMarker_yieldStar: function(values) {
      return new P._IterationMarker(values, 1);
    },
    _IterationMarker_endOfIteration: function() {
      return C._IterationMarker_null_2;
    },
    _IterationMarker_yieldSingle: function(value) {
      return new P._IterationMarker(value, 0);
    },
    _IterationMarker_uncaughtError: function(error) {
      return new P._IterationMarker(error, 3);
    },
    _makeSyncStarIterable: function(body, $T) {
      return new P._SyncStarIterable(body, $T._eval$1("_SyncStarIterable<0>"));
    },
    AsyncError$: function(error, stackTrace) {
      var t1 = H.checkNotNullable(error, "error", type$.Object);
      return new P.AsyncError(t1, stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace: function(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return C.C__StringStackTrace;
    },
    Future_Future$delayed: function(duration, $T) {
      var result,
        t1 = !$T._is(null);
      if (t1)
        throw H.wrapException(P.ArgumentError$value(null, "computation", "The type parameter is not nullable"));
      result = new P._Future($.Zone__current, $T._eval$1("_Future<0>"));
      P.Timer_Timer(duration, new P.Future_Future$delayed_closure(null, result, $T));
      return result;
    },
    Future_wait: function(futures, $T) {
      var _error_get, _error_set, _stackTrace_get, _stackTrace_set, handleError, future, pos, e, st, t2, t3, exception, stackTrace, _box_0 = {}, cleanUp = null,
        eagerError = false,
        t1 = $T._eval$1("_Future<List<0>>"),
        _future = new P._Future($.Zone__current, t1);
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0._error = null;
      _error_get = new P.Future_wait__error_get(_box_0);
      _error_set = new P.Future_wait__error_set(_box_0);
      _box_0._stackTrace = null;
      _stackTrace_get = new P.Future_wait__stackTrace_get(_box_0);
      _stackTrace_set = new P.Future_wait__stackTrace_set(_box_0);
      handleError = new P.Future_wait_handleError(_box_0, cleanUp, eagerError, _future, _error_set, _stackTrace_set, _error_get, _stackTrace_get);
      try {
        for (t2 = J.get$iterator$ax(futures), t3 = type$.Null; t2.moveNext$0();) {
          future = t2.get$current();
          pos = _box_0.remaining;
          future.then$1$2$onError(new P.Future_wait_closure(_box_0, pos, _future, cleanUp, eagerError, _error_get, _stackTrace_get, $T), handleError, t3);
          ++_box_0.remaining;
        }
        t2 = _box_0.remaining;
        if (t2 === 0) {
          t2 = _future;
          t2._completeWithValue$1(H.setRuntimeTypeInfo([], $T._eval$1("JSArray<0>")));
          return t2;
        }
        _box_0.values = P.List_List$filled(t2, null, false, $T._eval$1("0?"));
      } catch (exception) {
        e = H.unwrapException(exception);
        st = H.getTraceFromException(exception);
        if (_box_0.remaining === 0 || H.boolConversionCheck(eagerError)) {
          t2 = e;
          stackTrace = st;
          H.checkNotNullable(t2, "error", type$.Object);
          $.Zone__current !== C.C__RootZone;
          if (stackTrace == null)
            stackTrace = P.AsyncError_defaultStackTrace(t2);
          t1 = new P._Future($.Zone__current, t1);
          t1._asyncCompleteError$2(t2, stackTrace);
          return t1;
        } else {
          _error_set.call$1(e);
          _stackTrace_set.call$1(st);
        }
      }
      return _future;
    },
    Future_any: function(futures, $T) {
      var t1, _i,
        completer = new P._SyncCompleter(new P._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_SyncCompleter<0>")),
        onValue = new P.Future_any_onValue(completer, $T),
        onError = new P.Future_any_onError(completer);
      for (t1 = type$.void, _i = 0; _i < 2; ++_i)
        futures[_i].then$1$2$onError(onValue, onError, t1);
      return completer.future;
    },
    TimeoutException$: function(message, duration) {
      return new P.TimeoutException(message, duration);
    },
    _Future$zoneValue: function(value, _zone, $T) {
      var t1 = new P._Future(_zone, $T._eval$1("_Future<0>"));
      $T._as(value);
      t1._state = 4;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, t2 === 2;)
        source = t1._as(source._resultOrListeners);
      if (t2 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var t2, t3, t4, _box_0, hasError, asyncError, nextListener, nextListener0, t5, sourceResult, t6, t7, zone, oldZone, result, current, _null = null, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = t2._as(t1._resultOrListeners);
            P._rootHandleUncaughtError(_null, _null, t1._zone, asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t6 = !hasError;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t7 = t5._zone === zone;
            t7 = !(t7 || t7);
          } else
            t7 = false;
          if (t7) {
            t2._as(sourceResult);
            P._rootHandleUncaughtError(_null, _null, t5._zone, sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = _null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t4._is(t1)) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if (t1._state >= 4) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 4;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      var t1;
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a valid result"));
    },
    _microtaskLoop: function() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      P._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      return new P._StreamIterator(H.checkNotNullable(stream, "stream", type$.Object), $T._eval$1("_StreamIterator<0>"));
    },
    StreamController_StreamController: function(onCancel, onListen, onResume, sync, $T) {
      return sync ? new P._SyncStreamController(onListen, null, onResume, onCancel, $T._eval$1("_SyncStreamController<0>")) : new P._AsyncStreamController(onListen, null, onResume, onCancel, $T._eval$1("_AsyncStreamController<0>"));
    },
    _runGuarded: function(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(null, null, $.Zone__current, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    _ControllerSubscription$: function(_controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0;
      return new P._ControllerSubscription(_controller, P._BufferingStreamSubscription__registerDataHandler(t1, onData, $T), P._BufferingStreamSubscription__registerErrorHandler(t1, onError), P._BufferingStreamSubscription__registerDoneHandler(t1, onDone), t1, t2, $T._eval$1("_ControllerSubscription<0>"));
    },
    _BufferingStreamSubscription__registerDataHandler: function(zone, handleData, $T) {
      var t1 = handleData == null ? P.async___nullDataHandler$closure() : handleData;
      return type$.$env_1_1_void._bind$1($T)._eval$1("1(2)")._as(t1);
    },
    _BufferingStreamSubscription__registerErrorHandler: function(zone, handleError) {
      if (handleError == null)
        handleError = P.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return type$.dynamic_Function_Object._as(handleError);
      throw H.wrapException(P.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."));
    },
    _BufferingStreamSubscription__registerDoneHandler: function(zone, handleDone) {
      var t1 = handleDone == null ? P.async___nullDoneHandler$closure() : handleDone;
      return type$.void_Function._as(t1);
    },
    _nullDataHandler: function(value) {
    },
    _nullErrorHandler: function(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      P._rootHandleUncaughtError(null, null, $.Zone__current, error, stackTrace);
    },
    _nullDoneHandler: function() {
    },
    _runUserCode: function(userCode, onSuccess, onError, $T) {
      var e, s, replacement, error, stackTrace, exception;
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        type$.Object._as(e);
        type$.nullable_StackTrace._as(s);
        replacement = null;
        if (replacement == null)
          onError.call$2(e, s);
        else {
          error = J.get$error$z(replacement);
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0(),
        t1 = $.$get$Future__nullFuture();
      if (cancelFuture !== t1)
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(),
        t1 = $.$get$Future__nullFuture();
      if (cancelFuture !== t1)
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, false));
      else
        future._complete$1(false);
    },
    Timer_Timer: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return P.Timer__createTimer(duration, type$.void_Function._as(callback));
      return P.Timer__createTimer(duration, type$.void_Function._as(t1.bindCallbackGuarded$1(callback)));
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(error, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (C.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
      this._handle = null;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _asyncStarHelper_closure: function _asyncStarHelper_closure(t0, t1) {
      this.controller = t0;
      this.bodyFunction = t1;
    },
    _asyncStarHelper_closure0: function _asyncStarHelper_closure0(t0, t1) {
      this.controller = t0;
      this.bodyFunction = t1;
    },
    _AsyncStarStreamController: function _AsyncStarStreamController(t0) {
      var _ = this;
      _.___AsyncStarStreamController_controller = null;
      _.isSuspended = false;
      _.cancelationFuture = null;
      _.$ti = t0;
    },
    _AsyncStarStreamController__resumeBody: function _AsyncStarStreamController__resumeBody(t0) {
      this.body = t0;
    },
    _AsyncStarStreamController__resumeBody_closure: function _AsyncStarStreamController__resumeBody_closure(t0) {
      this.body = t0;
    },
    _AsyncStarStreamController_closure0: function _AsyncStarStreamController_closure0(t0) {
      this._resumeBody = t0;
    },
    _AsyncStarStreamController_closure1: function _AsyncStarStreamController_closure1(t0, t1) {
      this.$this = t0;
      this._resumeBody = t1;
    },
    _AsyncStarStreamController_closure: function _AsyncStarStreamController_closure(t0, t1) {
      this.$this = t0;
      this.body = t1;
    },
    _AsyncStarStreamController__closure: function _AsyncStarStreamController__closure(t0) {
      this.body = t0;
    },
    _IterationMarker: function _IterationMarker(t0, t1) {
      this.value = t0;
      this.state = t1;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _BroadcastStream: function _BroadcastStream(t0, t1) {
      this._async$_controller = t0;
      this.$ti = t1;
    },
    _BroadcastSubscription: function _BroadcastSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._eventState = 0;
      _._async$_previous = _._async$_next = null;
      _._async$_controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._async$_onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _SyncBroadcastStreamController: function _SyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    _SyncBroadcastStreamController__sendData_closure: function _SyncBroadcastStreamController__sendData_closure(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _SyncBroadcastStreamController__sendError_closure: function _SyncBroadcastStreamController__sendError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _SyncBroadcastStreamController__sendDone_closure: function _SyncBroadcastStreamController__sendDone_closure(t0) {
      this.$this = t0;
    },
    _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    Future_Future$delayed_closure: function Future_Future$delayed_closure(t0, t1, t2) {
      this.computation = t0;
      this.result = t1;
      this.T = t2;
    },
    Future_wait__error_set: function Future_wait__error_set(t0) {
      this._box_0 = t0;
    },
    Future_wait__stackTrace_set: function Future_wait__stackTrace_set(t0) {
      this._box_0 = t0;
    },
    Future_wait__error_get: function Future_wait__error_get(t0) {
      this._box_0 = t0;
    },
    Future_wait__stackTrace_get: function Future_wait__stackTrace_get(t0) {
      this._box_0 = t0;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
      _._error_set = t4;
      _._stackTrace_set = t5;
      _._error_get = t6;
      _._stackTrace_get = t7;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.cleanUp = t3;
      _.eagerError = t4;
      _._error_get = t5;
      _._stackTrace_get = t6;
      _.T = t7;
    },
    Future_any_onValue: function Future_any_onValue(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    Future_any_onError: function Future_any_onError(t0) {
      this.completer = t0;
    },
    TimeoutException: function TimeoutException(t0, t1) {
      this.message = t0;
      this.duration = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_forEach_closure: function Stream_forEach_closure(t0) {
      this.future = t0;
    },
    Stream_forEach_closure0: function Stream_forEach_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.action = t1;
      _.subscription = t2;
      _.future = t3;
    },
    Stream_forEach__closure: function Stream_forEach__closure(t0, t1) {
      this.action = t0;
      this.element = t1;
    },
    Stream_forEach__closure0: function Stream_forEach__closure0() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_isEmpty_closure: function Stream_isEmpty_closure(t0) {
      this.future = t0;
    },
    Stream_isEmpty_closure0: function Stream_isEmpty_closure0(t0, t1, t2) {
      this.$this = t0;
      this.subscription = t1;
      this.future = t2;
    },
    Stream_timeout_closure: function Stream_timeout_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_1 = t0;
      _.$this = t1;
      _.wrapper = t2;
      _.zone = t3;
      _.registeredOnTimeout = t4;
    },
    Stream_timeout_closure0: function Stream_timeout_closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _.$this = t1;
      _.zone = t2;
      _.timeLimit = t3;
    },
    Stream_timeout__closure: function Stream_timeout__closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _._box_1 = t1;
      _.$this = t2;
      _.zone = t3;
      _.timeLimit = t4;
    },
    Stream_timeout__closure0: function Stream_timeout__closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _._box_1 = t1;
      _.zone = t2;
      _.timeLimit = t3;
    },
    Stream_timeout__closure1: function Stream_timeout__closure1(t0, t1) {
      this._box_0 = t0;
      this._box_1 = t1;
    },
    Stream_timeout__closure2: function Stream_timeout__closure2(t0, t1) {
      this._box_0 = t0;
      this.subscription = t1;
    },
    Stream_timeout__closure3: function Stream_timeout__closure3(t0, t1) {
      this._box_0 = t0;
      this.subscription = t1;
    },
    Stream_timeout__closure4: function Stream_timeout__closure4(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _._box_1 = t1;
      _.subscription = t2;
      _.zone = t3;
      _.timeLimit = t4;
    },
    StreamSubscription: function StreamSubscription() {
    },
    StreamView: function StreamView() {
    },
    StreamSink: function StreamSink() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _ControllerEventSinkWrapper: function _ControllerEventSinkWrapper(t0, t1) {
      this._async$_sink = t0;
      this.$ti = t1;
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._async$_controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._async$_controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._async$_onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _AddStreamState: function _AddStreamState() {
    },
    _AddStreamState_cancel_closure: function _AddStreamState_cancel_closure(t0) {
      this.$this = t0;
    },
    _StreamControllerAddStreamState: function _StreamControllerAddStreamState(t0, t1, t2, t3) {
      var _ = this;
      _.varData = t0;
      _.addStreamFuture = t1;
      _.addSubscription = t2;
      _.$ti = t3;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents() {
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _StreamImplEvents: function _StreamImplEvents(t0) {
      var _ = this;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _._state = 0;
      _.$ti = t0;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._zone = t0;
      _._state = 0;
      _._async$_onDone = t1;
      _.$ti = t2;
    },
    _StreamIterator: function _StreamIterator(t0, t1) {
      var _ = this;
      _._subscription = null;
      _._stateData = t0;
      _._async$_hasValue = false;
      _.$ti = t1;
    },
    _cancelAndError_closure: function _cancelAndError_closure(t0, t1, t2) {
      this.future = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _cancelAndErrorClosure_closure: function _cancelAndErrorClosure_closure(t0, t1) {
      this.subscription = t0;
      this.future = t1;
    },
    _cancelAndValue_closure: function _cancelAndValue_closure(t0, t1) {
      this.future = t0;
      this.value = t1;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._stream = t0;
      _._subscription = null;
      _._onData = t1;
      _._onError = t2;
      _._async$_onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _MapStream: function _MapStream(t0, t1, t2) {
      this._transform = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap: function($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], type$.JSArray_String);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap($K, $V);
      other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$of: function(other, $K, $V) {
      var t1 = P.LinkedHashMap_LinkedHashMap($K, $V);
      t1.addAll$1(0, other);
      return t1;
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__fillMapWithIterables: function(map, keys, values) {
      var keyIterator = J.get$iterator$ax(keys),
        valueIterator = J.get$iterator$ax(values),
        hasNextKey = keyIterator.moveNext$0(),
        hasNextValue = valueIterator.moveNext$0();
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        map.$indexSet(0, keyIterator.get$current(), valueIterator.get$current());
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw H.wrapException(P.ArgumentError$("Iterables do not have same length."));
    },
    IterableBase: function IterableBase() {
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    MapMixin_entries_closure: function MapMixin_entries_closure(t0) {
      this.$this = t0;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    Utf8Decoder__convertIntercepted: function(allowMalformed, codeUnits, start, end) {
      var casted, result;
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        end = casted.length;
        if (end - start < 15)
          return null;
        result = P.Utf8Decoder__convertInterceptedUint8List(allowMalformed, casted, start, end);
        if (result != null && allowMalformed)
          if (result.indexOf("\ufffd") >= 0)
            return null;
        return result;
      }
      return null;
    },
    Utf8Decoder__convertInterceptedUint8List: function(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$Utf8Decoder__decoderNonfatal() : $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return P.Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return P.Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, P.RangeError_checkValidRange(start, end, codeUnits.length)));
    },
    Utf8Decoder__useTextDecoder: function(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return null;
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$: function(_sink, _toEncodable) {
      return new P._JsonStringStringifier(_sink, [], P.convert___defaultToEncodable$closure());
    },
    _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
      var t1,
        output = new P.StringBuffer("");
      P._JsonStringStringifier_printOn(object, output, toEncodable, indent);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _JsonStringStringifier_printOn: function(object, output, toEncodable, indent) {
      var stringifier;
      if (indent == null)
        stringifier = P._JsonStringStringifier$(output, toEncodable);
      else
        stringifier = new P._JsonStringStringifierPretty(indent, 0, output, [], P.convert___defaultToEncodable$closure());
      stringifier.writeObject$1(object);
    },
    _Utf8Decoder_errorDescription: function(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    Utf8Decoder__decoder_closure: function Utf8Decoder__decoder_closure() {
    },
    Utf8Decoder__decoderNonfatal_closure: function Utf8Decoder__decoderNonfatal_closure() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonPrettyPrintMixin: function _JsonPrettyPrintMixin() {
    },
    _JsonPrettyPrintMixin_writeMap_closure: function _JsonPrettyPrintMixin_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    _JsonStringStringifierPretty: function _JsonStringStringifierPretty(t0, t1, t2, t3, t4) {
      var _ = this;
      _._indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _._sink = t2;
      _._seen = t3;
      _._toEncodable = t4;
    },
    Utf8Codec: function Utf8Codec(t0) {
      this._allowMalformed = t0;
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = this._carry = 0;
      this._buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin: function __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin() {
    },
    int_parse: function(source) {
      var value = H.Primitives_parseInt(source, null);
      if (value != null)
        return value;
      throw H.wrapException(P.FormatException$(source, null, null));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    List_List$filled: function($length, fill, growable, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < $length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from: function(elements, growable, $E) {
      var t1,
        list = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      return J.JSArray_markFixedList(list, $E);
    },
    List_List$of: function(elements, growable, $E) {
      var t1;
      if (growable)
        return P.List_List$_of(elements, $E);
      t1 = J.JSArray_markFixedList(P.List_List$_of(elements, $E), $E);
      return t1;
    },
    List_List$_of: function(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return H.setRuntimeTypeInfo(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$unmodifiable: function(elements, $E) {
      var result = P.List_List$from(elements, false, $E);
      result.fixed$length = Array;
      result.immutable$list = Array;
      return result;
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var t1 = H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, end, charCodes.length));
      return t1;
    },
    RegExp_RegExp: function(source) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, true, false, false, false));
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current());
      }
      return string;
    },
    DateTime_parse: function(formattedString) {
      var t1, t2, t3, years, month, day, hour, minute, second, milliAndMicroseconds, millisecond, tzSign, sign, hourDifference, isUtc, value,
        match = $.$get$DateTime__parseFormat().firstMatch$1(formattedString);
      if (match != null) {
        t1 = new P.DateTime_parse_parseIntOrZero();
        t2 = match._match;
        if (1 >= t2.length)
          return H.ioore(t2, 1);
        t3 = t2[1];
        t3.toString;
        years = P.int_parse(t3);
        if (2 >= t2.length)
          return H.ioore(t2, 2);
        t3 = t2[2];
        t3.toString;
        month = P.int_parse(t3);
        if (3 >= t2.length)
          return H.ioore(t2, 3);
        t3 = t2[3];
        t3.toString;
        day = P.int_parse(t3);
        if (4 >= t2.length)
          return H.ioore(t2, 4);
        hour = t1.call$1(t2[4]);
        if (5 >= t2.length)
          return H.ioore(t2, 5);
        minute = t1.call$1(t2[5]);
        if (6 >= t2.length)
          return H.ioore(t2, 6);
        second = t1.call$1(t2[6]);
        if (7 >= t2.length)
          return H.ioore(t2, 7);
        milliAndMicroseconds = new P.DateTime_parse_parseMilliAndMicroseconds().call$1(t2[7]);
        millisecond = C.JSInt_methods._tdivFast$1(milliAndMicroseconds, 1000);
        t3 = t2.length;
        if (8 >= t3)
          return H.ioore(t2, 8);
        if (t2[8] != null) {
          if (9 >= t3)
            return H.ioore(t2, 9);
          tzSign = t2[9];
          if (tzSign != null) {
            sign = tzSign === "-" ? -1 : 1;
            if (10 >= t3)
              return H.ioore(t2, 10);
            t3 = t2[10];
            t3.toString;
            hourDifference = P.int_parse(t3);
            if (11 >= t2.length)
              return H.ioore(t2, 11);
            minute -= sign * (t1.call$1(t2[11]) + 60 * hourDifference);
          }
          isUtc = true;
        } else
          isUtc = false;
        value = H.Primitives_valueFromDecomposedDate(years, month, day, hour, minute, second, millisecond + C.JSNumber_methods.round$0(milliAndMicroseconds % 1000 / 1000), isUtc);
        if (value == null)
          throw H.wrapException(P.FormatException$("Time out of range", formattedString, null));
        return P.DateTime$_withValue(value, isUtc);
      } else
        throw H.wrapException(P.FormatException$("Invalid date format", formattedString, null));
    },
    DateTime$_withValue: function(_value, isUtc) {
      var t1;
      if (Math.abs(_value) <= 864e13)
        t1 = false;
      else
        t1 = true;
      if (t1)
        H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + _value));
      H.checkNotNullable(isUtc, "isUtc", type$.bool);
      return new P.DateTime(_value, isUtc);
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__sixDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "+";
      if (absN >= 100000)
        return sign + absN;
      return sign + "0" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$: function(milliseconds, seconds) {
      return new P.Duration(1000000 * seconds + 1000 * milliseconds);
    },
    Error_safeToString: function(object) {
      if (typeof object == "number" || H._isBool(object) || null == object)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    AssertionError$: function(message) {
      return new P.AssertionError(message);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    RangeError$: function(message) {
      var _null = null;
      return new P.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange: function(start, end, $length) {
      if (0 > start || start > $length)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H._asInt($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    FormatException$: function(message, source, offset) {
      return new P.FormatException(message, source, offset);
    },
    print: function(object) {
      H.printString(J.toString$0$(object));
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    DateTime_parse_parseIntOrZero: function DateTime_parse_parseIntOrZero() {
    },
    DateTime_parse_parseMilliAndMicroseconds: function DateTime_parse_parseMilliAndMicroseconds() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits() {
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    promiseToFuture: function(jsPromise, $T) {
      var t1 = new P._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new P._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(H.convertDartClosureToJS(new P.promiseToFuture_closure(completer, $T), 1), H.convertDartClosureToJS(new P.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    Endian: function Endian() {
    },
    _Platform__version: function() {
      throw H.wrapException(P.UnsupportedError$("Platform._version"));
    },
    _Platform_version: function() {
      return P._Platform__version();
    }
  },
  W = {
    WebSocket_WebSocket: function(url) {
      return new WebSocket(url);
    },
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = onData == null ? null : W._wrapZone(new W._EventStreamSubscription_closure(onData), type$.Event);
      t1 = new W._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
      t1._tryResume$0();
      return t1;
    },
    _wrapZone: function(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    CloseEvent: function CloseEvent() {
    },
    DomException: function DomException() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    MessageEvent: function MessageEvent() {
    },
    WebSocket: function WebSocket() {
    },
    EventStreamProvider: function EventStreamProvider(t0, t1) {
      this._eventType = t0;
      this.$ti = t1;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pauseCount = 0;
      _._html$_target = t0;
      _._eventType = t1;
      _._html$_onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _EventStreamSubscription_onData_closure: function _EventStreamSubscription_onData_closure(t0) {
      this.handleData = t0;
    }
  },
  N = {HexCodec: function HexCodec() {
    },
    decodeIncoming: function(data) {
      var codec, sessionId, t1, sequenceNumber, index, $frames, header, eot, $length, hasNext, t2, pos,
        bytes = H.NativeByteData_NativeByteData$view(data.buffer, data.byteOffset, data.byteLength),
        msb = bytes.getUint8(0),
        codecInt = msb >>> 5 & 7;
      if (codecInt < 5)
        codec = C.List_gkc[codecInt];
      else
        throw H.wrapException(T.ProtocolException$("Bad data! Value " + codecInt + " from msb (" + C.JSInt_methods.toRadixString$1(msb, 16) + ") does not represent a valid codec!"));
      if (codec === C.AudioCodec_1)
        return new N.PingPacket(true, Z.VarIntExtension_getVarInt(bytes, 1).value, bytes.byteLength);
      else {
        sessionId = Z.VarIntExtension_getVarInt(bytes, 1);
        t1 = 1 + sessionId.lengthInBytes;
        sequenceNumber = Z.VarIntExtension_getVarInt(bytes, t1);
        index = t1 + sequenceNumber.lengthInBytes;
        $frames = H.setRuntimeTypeInfo([], type$.JSArray_Uint8List);
        if (codec === C.AudioCodec_4) {
          header = Z.VarIntExtension_getVarInt(bytes, index);
          index += header.lengthInBytes;
          t1 = header.value;
          eot = (t1 & 8192) === 8192;
          $length = t1 & 8191;
          C.JSArray_methods.add$1($frames, H.NativeUint8List_NativeUint8List$view(bytes.buffer, bytes.byteOffset + index, $length));
          index += $length;
        } else
          for (eot = false, hasNext = true; hasNext;) {
            header = bytes.getUint8(index);
            hasNext = (header & 128) === 128;
            ++index;
            $length = header & 127;
            if ($length > 0) {
              t1 = bytes.buffer;
              t2 = bytes.byteOffset;
              t1 = new Uint8Array(t1, t2 + index, $length);
              C.JSArray_methods.add$1($frames, t1);
              index += $length;
            } else
              eot = true;
          }
        pos = index < bytes.byteLength ? new R.PositionalInformation(C.NativeByteData_methods._getFloat32$2(bytes, index, false), C.NativeByteData_methods._getFloat32$2(bytes, index + 4, false), C.NativeByteData_methods._getFloat32$2(bytes, index + 8, false)) : null;
        return new N.IncomingAudioPacket(codec, msb & 31, sequenceNumber.value, $frames, eot, pos, sessionId.value, bytes.byteLength);
      }
    },
    PingPacket: function PingPacket(t0, t1, t2) {
      this.incoming = t0;
      this.pingTimestamp = t1;
      this.lengthInBytes = t2;
    },
    IncomingAudioPacket: function IncomingAudioPacket(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.codec = t0;
      _.target = t1;
      _.sequenceNumber = t2;
      _.frames = t3;
      _.endOfTransmission = t4;
      _.positionalInformation = t5;
      _.sessionId = t6;
      _.lengthInBytes = t7;
    },
    IncomingAudioPacket_jsonMap_closure: function IncomingAudioPacket_jsonMap_closure() {
    },
    AudioPacket: function AudioPacket() {
    },
    _AudioPacket_Object_JsonString: function _AudioPacket_Object_JsonString() {
    },
    ConnectionImp_connect: function(options) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Connection),
        $async$returnValue, socket, receive;
      var $async$ConnectionImp_connect = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              socket = W.WebSocket_WebSocket(options.uri);
              $async$goto = 3;
              return P._asyncAwait(N.ConnectionImp__asBinaryStream(socket), $async$ConnectionImp_connect);
            case 3:
              // returning from await.
              receive = $async$result;
              $async$returnValue = new N.ConnectionImp(socket, new M.ProtobufHeaderPrepender(new N._WebSocketDataSink(socket, new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void))), H._instanceType(receive)._eval$1("StreamTransformer<Stream.T,ProtobufPacket>")._as(new X.ProtobufStreamTransformer()).bind$1(receive));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$ConnectionImp_connect, $async$completer);
    },
    ConnectionImp__asBinaryStream: function(socket) {
      return N.ConnectionImp__asBinaryStream$body(socket);
    },
    ConnectionImp__asBinaryStream$body: function(socket) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Stream_List_int),
        $async$returnValue, t1, receive, t2, $open;
      var $async$ConnectionImp__asBinaryStream = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              receive = P.StreamController_StreamController(null, null, null, true, type$.List_int);
              t2 = new P._Future($.Zone__current, type$._Future_void);
              $open = new P._AsyncCompleter(t2, type$._AsyncCompleter_void);
              t1._sub = null;
              new N.ConnectionImp__asBinaryStream__sub_set(t1).call$1(N._AllStream_get_allEvents(socket).listen$4$cancelOnError$onDone$onError(new N.ConnectionImp__asBinaryStream_closure($open, receive, new N.ConnectionImp__asBinaryStream__sub_get(t1)), true, new N.ConnectionImp__asBinaryStream_closure0($open, receive), new N.ConnectionImp__asBinaryStream_closure1($open, receive)));
              $async$goto = 3;
              return P._asyncAwait(t2, $async$ConnectionImp__asBinaryStream);
            case 3:
              // returning from await.
              $async$returnValue = new P._ControllerStream(receive, H._instanceType(receive)._eval$1("_ControllerStream<1>"));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$ConnectionImp__asBinaryStream, $async$completer);
    },
    _AllStream_get_allEvents: function(_this) {
      var onDone, t3, t1 = {},
        subs = H.setRuntimeTypeInfo([], type$.JSArray_StreamSubscription_dynamic),
        t2 = type$.Event,
        controller = P.StreamController_StreamController(new N._AllStream_get_allEvents_closure(subs), null, null, true, t2);
      t1.notDone = 4;
      onDone = new N._AllStream_get_allEvents_closure0(t1, controller);
      t1 = type$.nullable_void_Function_CloseEvent._as(controller.get$add(controller));
      type$.nullable_void_Function._as(onDone);
      C.JSArray_methods.add$1(subs, W._EventStreamSubscription$(_this, "close", t1, false, type$.CloseEvent));
      t3 = type$._EventStream_Event;
      C.JSArray_methods.add$1(subs, new P._MapStream(t3._eval$1("_OpenEvent(Stream.T)")._as(new N._AllStream_get_allEvents_closure1()), new W._EventStream(_this, "open", false, t3), t3._eval$1("_MapStream<Stream.T,_OpenEvent>")).listen$4$cancelOnError$onDone$onError(t1, true, onDone, controller.get$addError()));
      C.JSArray_methods.add$1(subs, W._EventStreamSubscription$(_this, "error", type$.nullable_void_Function_Event._as(t1), false, t2));
      C.JSArray_methods.add$1(subs, W._EventStreamSubscription$(_this, "message", type$.nullable_void_Function_MessageEvent._as(t1), false, type$.MessageEvent));
      return new P._ControllerStream(controller, H._instanceType(controller)._eval$1("_ControllerStream<1>"));
    },
    ConnectionImp: function ConnectionImp(t0, t1, t2) {
      this._webSocket = t0;
      this._out = t1;
      this._stream = t2;
    },
    ConnectionImp__asBinaryStream__sub_set: function ConnectionImp__asBinaryStream__sub_set(t0) {
      this._box_0 = t0;
    },
    ConnectionImp__asBinaryStream__sub_get: function ConnectionImp__asBinaryStream__sub_get(t0) {
      this._box_0 = t0;
    },
    ConnectionImp__asBinaryStream_closure: function ConnectionImp__asBinaryStream_closure(t0, t1, t2) {
      this.open = t0;
      this.receive = t1;
      this._sub_get = t2;
    },
    ConnectionImp__asBinaryStream_closure0: function ConnectionImp__asBinaryStream_closure0(t0, t1) {
      this.open = t0;
      this.receive = t1;
    },
    ConnectionImp__asBinaryStream_closure1: function ConnectionImp__asBinaryStream_closure1(t0, t1) {
      this.open = t0;
      this.receive = t1;
    },
    _AllStream_get_allEvents_closure: function _AllStream_get_allEvents_closure(t0) {
      this.subs = t0;
    },
    _AllStream_get_allEvents__closure: function _AllStream_get_allEvents__closure() {
    },
    _AllStream_get_allEvents_closure0: function _AllStream_get_allEvents_closure0(t0, t1) {
      this._box_0 = t0;
      this.controller = t1;
    },
    _AllStream_get_allEvents_closure1: function _AllStream_get_allEvents_closure1() {
    },
    _OpenEvent: function _OpenEvent() {
    },
    _WebSocketDataSink: function _WebSocketDataSink(t0, t1) {
      this._ws = t0;
      this._done = t1;
    },
    ChannelChanges: function ChannelChanges(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.parent = t0;
      _.links = t1;
      _.name = t2;
      _.description = t3;
      _.temporary = t4;
      _.position = t5;
      _.descriptionHash = t6;
      _.maxUsers = t7;
    },
    Channel: function Channel(t0, t1, t2, t3) {
      var _ = this;
      _._channel$_client = t0;
      _.channelId = t1;
      _._links = t2;
      _._descriptionHash = _._position = _._temporary = _._description = _._channel$_name = _._parent = _._maxUsers = null;
      _.Notifier__listeners = t3;
    },
    Channel_jsonMap_closure: function Channel_jsonMap_closure() {
    },
    Channel__notifyChannelPermissions_closure: function Channel__notifyChannelPermissions_closure(t0, t1) {
      this.$this = t0;
      this.permissions = t1;
    },
    Channel__notifyChannelUpdate_closure: function Channel__notifyChannelUpdate_closure(t0, t1) {
      this.$this = t0;
      this.changes = t1;
    },
    Channel__notifyChannelRemoved_closure: function Channel__notifyChannelRemoved_closure(t0) {
      this.$this = t0;
    },
    _Channel_Object_Notifier: function _Channel_Object_Notifier() {
    },
    _Channel_Object_Notifier_JsonString: function _Channel_Object_Notifier_JsonString() {
    },
    _ChannelChanges_Object_JsonString: function _ChannelChanges_Object_JsonString() {
    },
    rejectExceptionFromProto: function(reject) {
      var t1, t2;
      if (reject.__fieldSet._$has$1(0)) {
        t1 = reject.__fieldSet._$getSZ$1(1);
        t2 = type$.Reject_RejectType._as(reject.__fieldSet._$getND$1(0)).value;
        if (t2 >= 10)
          return H.ioore(C.List_MQk, t2);
        return new N.RejectException(t1, C.List_MQk[t2]);
      } else
        throw H.wrapException(T.ProtocolException$("Expected value type not set!"));
    },
    RejectType: function RejectType(t0) {
      this._model_exceptions$_name = t0;
    },
    RejectException: function RejectException(t0, t1) {
      this.reason = t0;
      this.rejectType = t1;
    },
    DenyType: function DenyType(t0) {
      this._model_exceptions$_name = t0;
    },
    PermissionDeniedException: function PermissionDeniedException(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.denyType = t0;
      _.deniedPermission = t1;
      _.channel = t2;
      _.user = t3;
      _.reason = t4;
      _.invalidUserName = t5;
    },
    UserChanges: function UserChanges(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _.name = t0;
      _.userId = t1;
      _.channel = t2;
      _.mute = t3;
      _.deaf = t4;
      _.supress = t5;
      _.selfMute = t6;
      _.selfDeaf = t7;
      _.texture = t8;
      _.comment = t9;
      _.hash = t10;
      _.commentHash = t11;
      _.textureHash = t12;
      _.prioritySpeaker = t13;
      _.recording = t14;
    },
    Self: function Self(t0, t1, t2, t3) {
      var _ = this;
      _._client = t0;
      _.session = t1;
      _._channel = t2;
      _._recording = _._prioritySpeaker = _._textureHash = _._commentHash = _._hash = _._comment = _._texture = _._selfDeaf = _._selfMute = _._suppress = _._deaf = _._mute = _._userId = _._user$_name = null;
      _.Notifier__listeners = t3;
    },
    User: function User(t0, t1, t2, t3) {
      var _ = this;
      _._client = t0;
      _.session = t1;
      _._channel = t2;
      _._recording = _._prioritySpeaker = _._textureHash = _._commentHash = _._hash = _._comment = _._texture = _._selfDeaf = _._selfMute = _._suppress = _._deaf = _._mute = _._userId = _._user$_name = null;
      _.Notifier__listeners = t3;
    },
    User__notifyUserUpdate_closure: function User__notifyUserUpdate_closure(t0, t1, t2) {
      this.$this = t0;
      this.actor = t1;
      this.changes = t2;
    },
    User__notifyUserRemoved_closure: function User__notifyUserRemoved_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.actor = t1;
      _.reason = t2;
      _.ban = t3;
    },
    User__reportUserStats_closure: function User__reportUserStats_closure(t0, t1) {
      this.$this = t0;
      this.stats = t1;
    },
    _User_Object_Notifier: function _User_Object_Notifier() {
    },
    _User_Object_Notifier_JsonString: function _User_Object_Notifier_JsonString() {
    },
    _UserChanges_Object_JsonString: function _UserChanges_Object_JsonString() {
    }
  },
  A = {
    _decode: function(codeUnits, sourceStart, sourceEnd, destination, destinationStart) {
      var t1, t2, i, destinationIndex, firstDigit, secondDigit, destinationIndex0;
      for (t1 = sourceEnd - 1, t2 = destination.length, i = sourceStart, destinationIndex = destinationStart; i < t1; i += 2, destinationIndex = destinationIndex0) {
        firstDigit = T.digitForCodeUnit(codeUnits, i);
        secondDigit = T.digitForCodeUnit(codeUnits, i + 1);
        destinationIndex0 = destinationIndex + 1;
        if (destinationIndex >= t2)
          return H.ioore(destination, destinationIndex);
        destination[destinationIndex] = 16 * firstDigit + secondDigit;
      }
      if ((sourceEnd - sourceStart & 1) === 0)
        return null;
      return 16 * T.digitForCodeUnit(codeUnits, t1);
    },
    HexDecoder: function HexDecoder() {
    },
    userStatsFromProto: function(stats) {
      var t1, address, info, fromServer, t2, t3, certificates, t4, t5, t6, t7, t8, t9, t10, t11, _null = null;
      if (stats.__fieldSet._$has$1(13)) {
        t1 = type$.List_int;
        t1 = J.get$length$asx(t1._as(stats.__fieldSet._$getND$1(13))) === 4 || J.get$length$asx(t1._as(stats.__fieldSet._$getND$1(13))) === 16;
      } else
        t1 = false;
      address = t1 ? B.IP_fromBytes(new Uint8Array(H._ensureNativeList(type$.List_int._as(stats.__fieldSet._$getND$1(13)))), true) : _null;
      info = stats.__fieldSet._$has$1(11) ? Y.versionInformationFromProto(type$.Version._as(stats.__fieldSet._$getND$1(11))) : _null;
      fromServer = stats.__fieldSet._$has$1(4) ? Y.packetStatsFromProto(type$.UserStats_Stats._as(stats.__fieldSet._$getND$1(4))) : _null;
      if (stats.__fieldSet._$has$1(3))
        fromServer = Y.packetStatsFromProto(type$.UserStats_Stats._as(stats.__fieldSet._$getND$1(3)));
      t1 = stats.__fieldSet._$has$1(9) ? H._asDouble(stats.__fieldSet._$getND$1(9)) : _null;
      if (stats.__fieldSet._$has$1(10))
        H._asDouble(stats.__fieldSet._$getND$1(10));
      t2 = stats.__fieldSet._$has$1(5) ? H._asDouble(stats.__fieldSet._$getND$1(7)) : _null;
      t3 = stats.__fieldSet._$has$1(8) ? H._asDouble(stats.__fieldSet._$getND$1(8)) : _null;
      certificates = H.setRuntimeTypeInfo([], type$.JSArray_Uint8List);
      for (t4 = J.get$iterator$ax(stats.__fieldSet._$getList$1$1(2, type$.List_int)); t4.moveNext$0();)
        C.JSArray_methods.add$1(certificates, new Uint8Array(H._ensureNativeList(t4.get$current())));
      t4 = stats.__fieldSet._$getBF$1(17);
      t5 = stats.__fieldSet._$getList$1$1(12, type$.int);
      t6 = stats.__fieldSet._$getIZ$1(14);
      t7 = stats.__fieldSet._$getIZ$1(5);
      t8 = stats.__fieldSet._$getIZ$1(6);
      t9 = stats.__fieldSet._$getBF$1(18);
      t10 = stats.__fieldSet._$has$1(15) ? P.Duration$(0, stats.__fieldSet._$getIZ$1(15)) : _null;
      t11 = stats.__fieldSet._$has$1(16) ? P.Duration$(0, stats.__fieldSet._$getIZ$1(16)) : _null;
      return new A.UserStats(certificates, _null, fromServer, t7, t8, new Y.PingStats(t2, t3, t1, t1), info, t5, address, t6, t10, t11, t4, t9);
    },
    UserStats: function UserStats(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _.certificates = t0;
      _.fromClient = t1;
      _.fromServer = t2;
      _.udpPacketCount = t3;
      _.tcpPacketCount = t4;
      _.pingStats = t5;
      _.clientVersion = t6;
      _.celtVersions = t7;
      _.address = t8;
      _.bandwidth = t9;
      _.onlineTime = t10;
      _.idleTime = t11;
      _.strongCertificate = t12;
      _.opus = t13;
    },
    _UserStats_Object_JsonString: function _UserStats_Object_JsonString() {
    }
  },
  R = {
    _convert: function(bytes, start, end) {
      var t2, i, bufferIndex, byteOr, byte, bufferIndex0, t3,
        t1 = (end - start) * 2,
        buffer = new Uint8Array(t1);
      for (t2 = J.getInterceptor$asx(bytes), i = start, bufferIndex = 0, byteOr = 0; i < end; ++i) {
        byte = t2.$index(bytes, i);
        byteOr = (byteOr | byte) >>> 0;
        bufferIndex0 = bufferIndex + 1;
        t3 = byte >>> 4 & 15;
        t3 = t3 < 10 ? t3 + 48 : t3 + 97 - 10;
        if (bufferIndex >= t1)
          return H.ioore(buffer, bufferIndex);
        buffer[bufferIndex] = t3;
        bufferIndex = bufferIndex0 + 1;
        t3 = byte & 15;
        t3 = t3 < 10 ? t3 + 48 : t3 + 97 - 10;
        if (bufferIndex0 >= t1)
          return H.ioore(buffer, bufferIndex0);
        buffer[bufferIndex0] = t3;
      }
      if (byteOr >= 0 && byteOr <= 255)
        return P.String_String$fromCharCodes(buffer, 0, null);
      for (i = start; i < end; ++i) {
        byte = t2.$index(bytes, i);
        if (byte >= 0 && byte <= 255)
          continue;
        throw H.wrapException(P.FormatException$("Invalid byte " + (byte < 0 ? "-" : "") + "0x" + C.JSInt_methods.toRadixString$1(Math.abs(byte), 16) + ".", bytes, i));
      }
      throw H.wrapException("unreachable");
    },
    HexEncoder: function HexEncoder() {
    },
    AudioCodec: function AudioCodec(t0) {
      this._audio$_name = t0;
    },
    TalkMode: function TalkMode(t0) {
      this._audio$_name = t0;
    },
    PositionalInformation: function PositionalInformation(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.z = t2;
    }
  },
  D = {
    AudioClientBase_withRemoteHostLookup: function(client, platformOptions, incomingAudioStreamTimeout) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.AudioClientBase),
        $async$returnValue, $async$temp1, $async$temp2;
      var $async$AudioClientBase_withRemoteHostLookup = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = D;
              $async$temp2 = client;
              $async$goto = 3;
              return P._asyncAwait(O.UdpTransportImp_withRemoteHostLookup(client, null, platformOptions, null), $async$AudioClientBase_withRemoteHostLookup);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.AudioClientBase$($async$temp2, $async$result, incomingAudioStreamTimeout);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$AudioClientBase_withRemoteHostLookup, $async$completer);
    },
    AudioClientBase$: function(_client, _udpTransport, incomingAudioStreamTimeout) {
      var t1 = H.setRuntimeTypeInfo([], type$.JSArray__UdpErrorReceiver);
      t1 = new D.AudioClientBase(_client, _udpTransport, t1, H.setRuntimeTypeInfo([], type$.JSArray_AudioFrameSink), new H.JsLinkedHashMap(type$.JsLinkedHashMap_int__AudioFrameStream), incomingAudioStreamTimeout, H.setRuntimeTypeInfo([], type$.JSArray_AudioListener));
      t1.AudioClientBase$3(_client, _udpTransport, incomingAudioStreamTimeout);
      return t1;
    },
    _AudioFrameStream$_: function(userId, timeout, _controller, onTimeout) {
      var t1 = new P._BroadcastStream(_controller, H._instanceType(_controller)._eval$1("_BroadcastStream<1>")).timeout$2$onTimeout(timeout, new D._AudioFrameStream$__closure(onTimeout));
      return new D._AudioFrameStream(_controller, userId, t1);
    },
    AudioFrame: function AudioFrame(t0, t1, t2) {
      this.frame = t0;
      this.sequenceNumber = t1;
      this.positionalInformation = t2;
    },
    AudioClient: function AudioClient() {
    },
    AudioClientBase: function AudioClientBase(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._audio_client$_client = t0;
      _._udpTransport = t1;
      _._overUdp = t2;
      _._sinks = t3;
      _._streams = t4;
      _._udpAvailable = false;
      _.incomingAudioStreamTimeout = t5;
      _.Notifier__listeners = t6;
    },
    AudioClientBase_feed_closure: function AudioClientBase_feed_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _UdpErrorReceiver: function _UdpErrorReceiver() {
    },
    _AudioFrameStream: function _AudioFrameStream(t0, t1, t2) {
      this._controller = t0;
      this.userId = t1;
      this._stream = t2;
    },
    _AudioFrameStream$__closure: function _AudioFrameStream$__closure(t0) {
      this.onTimeout = t0;
    },
    _AudioClient_Object_Notifier: function _AudioClient_Object_Notifier() {
    },
    _AudioFrame_Object_JsonString: function _AudioFrame_Object_JsonString() {
    },
    __AudioFrameStream_StreamView__UdpErrorReceiver: function __AudioFrameStream_StreamView__UdpErrorReceiver() {
    },
    ProtobufPacket: function ProtobufPacket(t0, t1) {
      this.type = t0;
      this.data = t1;
    }
  },
  U = {MumbleClient: function MumbleClient() {
    }, ServerInfo: function ServerInfo() {
    }, _ServerInfo_Object_JsonString: function _ServerInfo_Object_JsonString() {
    }},
  S = {
    _channelToId: function(channel) {
      return type$.Channel._as(channel).channelId;
    },
    _userToId: function(user) {
      return type$.User._as(user).session;
    },
    MumbleClientBase_connect: function(options, platformOptions) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.MumbleClient),
        $async$returnValue, _result, t4, onError, t1, t2, t3, syncCompleter, con, client, handleError, $async$temp1;
      var $async$MumbleClientBase_connect = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$._Future_void;
              t2 = new P._Future($.Zone__current, t1);
              t3 = type$._AsyncCompleter_void;
              syncCompleter = new V.ExtendedCompleter(new P._AsyncCompleter(t2, t3), type$.ExtendedCompleter_void);
              $async$goto = 3;
              return P._asyncAwait(N.ConnectionImp_connect(platformOptions), $async$MumbleClientBase_connect);
            case 3:
              // returning from await.
              con = $async$result;
              client = new S.MumbleClientBase(new H.JsLinkedHashMap(type$.JsLinkedHashMap_int_User), new H.JsLinkedHashMap(type$.JsLinkedHashMap_int_Channel), con, new P._AsyncCompleter(new P._Future($.Zone__current, t1), t3), options, new S.ServerInfoBase(), H.setRuntimeTypeInfo([], type$.JSArray_MumbleClientListener));
              handleError = new S.MumbleClientBase_connect_closure(syncCompleter, client);
              con.listen$4$cancelOnError$onDone$onError(new S.MumbleClientBase_connect_closure0(client, syncCompleter, handleError), true, new S.MumbleClientBase_connect_closure1(syncCompleter, client), handleError);
              _result = G.Version_create();
              _result.$$_setUnsignedInt32$2(0, 66560);
              _result.__fieldSet._$set$2(1, "Dumble");
              _result.__fieldSet._$set$2(2, "Dart VM");
              t1 = $.$get$Platform__version();
              _result.__fieldSet._$set$2(3, t1);
              client.writeMessage$1$1(_result, type$.Version);
              _result = G.Authenticate_create();
              _result.__fieldSet._$set$2(0, options.name);
              _result.__fieldSet._$set$2(4, true);
              J.addAll$1$ax(_result.__fieldSet._$getList$1$1(3, type$.int), C.List_empty);
              J.addAll$1$ax(_result.__fieldSet._$getList$1$1(2, type$.String), C.List_empty0);
              t1 = _result.__fieldSet;
              t1._$set$2(1, options.password);
              client.writeMessage$1$1(_result, type$.Authenticate);
              t1 = client._pingRoutine$0();
              type$.nullable_bool_Function_Object._as(null);
              t3 = t1.$ti;
              t4 = $.Zone__current;
              if (t4 !== C.C__RootZone)
                onError = P._registerErrorHandler(handleError, t4);
              else
                onError = handleError;
              t1._addListener$1(new P._FutureListener(new P._Future(t4, t3), 2, null, onError, t3._eval$1("@<1>")._bind$1(t3._precomputed1)._eval$1("_FutureListener<1,2>")));
              $async$goto = 4;
              return P._asyncAwait(t2, $async$MumbleClientBase_connect);
            case 4:
              // returning from await.
              if (client._lateCryptState == null)
                throw H.wrapException(T.ProtocolException$("Received sync complete message from server, but CryptState is still missing!\r\nThis should be impossible!"));
              if (client._lateSelf == null)
                throw H.wrapException(T.ProtocolException$("Received sync complete message from server, but Self is still missing!\r\nThis should be impossible!"));
              if (client._lateRootChannel == null)
                throw H.wrapException(T.ProtocolException$("Received sync complete message from server, but the root channel is still missing!\r\nThis should be impossible!"));
              $async$temp1 = client;
              $async$goto = 5;
              return P._asyncAwait(D.AudioClientBase_withRemoteHostLookup(client, platformOptions, C.Duration_500000), $async$MumbleClientBase_connect);
            case 5:
              // returning from await.
              $async$temp1.set$_lateAudio($async$result);
              $async$returnValue = client;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$MumbleClientBase_connect, $async$completer);
    },
    MumbleClientBase: function MumbleClientBase(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._users = t0;
      _._channels = t1;
      _._connection = t2;
      _._pinging = t3;
      _._closed = false;
      _.options = t4;
      _._lateCryptState = _._lateAudio = _._lastMessageReceived = null;
      _._serverInfo = t5;
      _._lateSelf = _._lateRootChannel = null;
      _.Notifier__listeners = t6;
    },
    MumbleClientBase_connect_closure: function MumbleClientBase_connect_closure(t0, t1) {
      this.syncCompleter = t0;
      this.client = t1;
    },
    MumbleClientBase_connect_closure0: function MumbleClientBase_connect_closure0(t0, t1, t2) {
      this.client = t0;
      this.syncCompleter = t1;
      this.handleError = t2;
    },
    MumbleClientBase_connect_closure1: function MumbleClientBase_connect_closure1(t0, t1) {
      this.syncCompleter = t0;
      this.client = t1;
    },
    MumbleClientBase__onError_closure: function MumbleClientBase__onError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    MumbleClientBase__onDone_closure: function MumbleClientBase__onDone_closure() {
    },
    MumbleClientBase__onMessage_closure: function MumbleClientBase__onMessage_closure() {
    },
    MumbleClientBase__onMessage_closure0: function MumbleClientBase__onMessage_closure0(t0) {
      this.permissionDeniedException = t0;
    },
    MumbleClientBase__onMessage_closure1: function MumbleClientBase__onMessage_closure1() {
    },
    MumbleClientBase__onMessage_closure2: function MumbleClientBase__onMessage_closure2(t0) {
      this.entries = t0;
    },
    MumbleClientBase__onMessage_closure3: function MumbleClientBase__onMessage_closure3(t0) {
      this.$this = t0;
    },
    MumbleClientBase__onMessage_closure4: function MumbleClientBase__onMessage_closure4(t0) {
      this.users = t0;
    },
    MumbleClientBase__onMessage_closure5: function MumbleClientBase__onMessage_closure5(t0) {
      this._box_0 = t0;
    },
    MumbleClientBase__handleTextMessage_closure: function MumbleClientBase__handleTextMessage_closure(t0) {
      this.$this = t0;
    },
    MumbleClientBase__handleTextMessage_closure0: function MumbleClientBase__handleTextMessage_closure0(t0) {
      this.$this = t0;
    },
    MumbleClientBase__handleTextMessage_closure1: function MumbleClientBase__handleTextMessage_closure1(t0) {
      this.$this = t0;
    },
    MumbleClientBase__handleTextMessage_closure2: function MumbleClientBase__handleTextMessage_closure2(t0) {
      this.msg = t0;
    },
    MumbleClientBase__handleChannelState_closure: function MumbleClientBase__handleChannelState_closure(t0) {
      this._box_0 = t0;
    },
    MumbleClientBase__handleUserState_closure: function MumbleClientBase__handleUserState_closure(t0) {
      this._box_0 = t0;
    },
    ServerInfoBase: function ServerInfoBase() {
      var _ = this;
      _.codecVersion = _.suggestedClientConfig = _.connectionStats = _.config = _.version = null;
    },
    _MumbleClientBase_MumbleClient_Notifier: function _MumbleClientBase_MumbleClient_Notifier() {
    },
    Reject_RejectType_valueOf: function(value) {
      return $.$get$Reject_RejectType__byValue().$index(0, value);
    },
    PermissionDenied_DenyType_valueOf: function(value) {
      return $.$get$PermissionDenied_DenyType__byValue().$index(0, value);
    },
    ContextActionModify_Operation_valueOf: function(value) {
      return $.$get$ContextActionModify_Operation__byValue().$index(0, value);
    },
    Reject_RejectType: function Reject_RejectType(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    PermissionDenied_DenyType: function PermissionDenied_DenyType(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    ContextActionModify_Operation: function ContextActionModify_Operation(t0, t1) {
      this.value = t0;
      this.name = t1;
    }
  },
  V = {Connection: function Connection() {
    }, ExtendedCompleter: function ExtendedCompleter(t0, t1) {
      this._base = t0;
      this._completedWithoutError = false;
      this.$ti = t1;
    },
    Int64_Int64: function(value) {
      var negative, v2, v1, t1, t2, t3;
      if (value < 0) {
        value = -value;
        negative = true;
      } else
        negative = false;
      v2 = C.JSInt_methods._tdivFast$1(value, 17592186044416);
      value -= v2 * 17592186044416;
      v1 = C.JSInt_methods._tdivFast$1(value, 4194304);
      t1 = value - v1 * 4194304 & 4194303;
      t2 = v1 & 4194303;
      t3 = v2 & 1048575;
      return negative ? V.Int64__sub(0, 0, 0, t1, t2, t3) : new V.Int64(t1, t2, t3);
    },
    Int64_Int64$fromBytes: function(bytes) {
      if (7 >= bytes.length)
        return H.ioore(bytes, 7);
      return V.Int64_Int64$fromInts(((((bytes[7] & 255) << 8 | bytes[6] & 255) << 8 | bytes[5] & 255) << 8 | bytes[4] & 255) >>> 0, ((((bytes[3] & 255) << 8 | bytes[2] & 255) << 8 | bytes[1] & 255) << 8 | bytes[0] & 255) >>> 0);
    },
    Int64_Int64$fromInts: function($top, bottom) {
      return new V.Int64(bottom & 4194303, (($top & 4095) << 10 | bottom >>> 22 & 1023) & 4194303, $top >>> 12 & 1048575);
    },
    Int64__promote: function(value) {
      if (value instanceof V.Int64)
        return value;
      else if (H._isInt(value))
        return V.Int64_Int64(value);
      throw H.wrapException(P.ArgumentError$value(value, null, null));
    },
    Int64__toRadixStringUnsigned: function(radix, d0, d1, d2, sign) {
      var d4, d3, fatRadix, chunk1, chunk2, chunk3, q, q0, q1, q2, q3, chunk10, residue;
      if (d0 === 0 && d1 === 0 && d2 === 0)
        return "0";
      d4 = (d2 << 4 | d1 >>> 18) >>> 0;
      d3 = d1 >>> 8 & 1023;
      d2 = (d1 << 2 | d0 >>> 20) & 1023;
      d1 = d0 >>> 10 & 1023;
      d0 &= 1023;
      if (radix >= 37)
        return H.ioore(C.List_WrN, radix);
      fatRadix = C.List_WrN[radix];
      chunk1 = "";
      chunk2 = "";
      chunk3 = "";
      while (true) {
        if (!!(d4 === 0 && d3 === 0))
          break;
        q = C.JSInt_methods.$tdiv(d4, fatRadix);
        d3 += d4 - q * fatRadix << 10 >>> 0;
        q0 = C.JSInt_methods.$tdiv(d3, fatRadix);
        d2 += d3 - q0 * fatRadix << 10 >>> 0;
        q1 = C.JSInt_methods.$tdiv(d2, fatRadix);
        d1 += d2 - q1 * fatRadix << 10 >>> 0;
        q2 = C.JSInt_methods.$tdiv(d1, fatRadix);
        d0 += d1 - q2 * fatRadix << 10 >>> 0;
        q3 = C.JSInt_methods.$tdiv(d0, fatRadix);
        chunk10 = C.JSString_methods.substring$1(C.JSInt_methods.toRadixString$1(fatRadix + (d0 - q3 * fatRadix), radix), 1);
        chunk3 = chunk2;
        chunk2 = chunk1;
        chunk1 = chunk10;
        d3 = q0;
        d4 = q;
        d2 = q1;
        d1 = q2;
        d0 = q3;
      }
      residue = (d2 << 20 >>> 0) + (d1 << 10 >>> 0) + d0;
      return sign + (residue === 0 ? "" : C.JSInt_methods.toRadixString$1(residue, radix)) + chunk1 + chunk2 + chunk3;
    },
    Int64__sub: function(a0, a1, a2, b0, b1, b2) {
      var diff0 = a0 - b0,
        diff1 = a1 - b1 - (C.JSInt_methods._shrOtherPositive$1(diff0, 22) & 1);
      return new V.Int64(diff0 & 4194303, diff1 & 4194303, a2 - b2 - (C.JSInt_methods._shrOtherPositive$1(diff1, 22) & 1) & 1048575);
    },
    Int64__shiftRight: function(x, n) {
      var t1 = C.JSInt_methods._shrReceiverPositive$1(x, n);
      return t1;
    },
    Int64: function Int64(t0, t1, t2) {
      this._l = t0;
      this._m = t1;
      this._h = t2;
    },
    main: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        t1, t2, t3, _result, client, callback;
      var $async$main = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(S.MumbleClientBase_connect($.$get$defaultConnectionOptions(), $.$get$defaultPlatformOptions()), $async$main);
            case 2:
              // returning from await.
              client = $async$result;
              callback = new V.MumbleExampleCallback(client);
              H._instanceType(client)._eval$1("Notifier.T")._as(callback);
              C.JSArray_methods.add$1(client.Notifier__listeners, callback);
              P.print("Client synced with server!");
              P.print("Listing channels...");
              t1 = type$.int;
              P.print(P.LinkedHashMap_LinkedHashMap$of(client._channels, t1, type$.Channel));
              P.print("Listing users...");
              t2 = client._users;
              t3 = type$.User;
              P.print(P.LinkedHashMap_LinkedHashMap$of(t2, t1, t3));
              P.LinkedHashMap_LinkedHashMap$of(t2, t1, t3).get$values().forEach$1(0, new V.main_closure(callback));
              t3 = client.get$self();
              C.JSArray_methods.add$1(t3.Notifier__listeners, H._instanceType(t3)._eval$1("Notifier.T")._as(callback));
              t3 = client.get$self();
              t1 = G.UserState_UserState();
              t1.__fieldSet._$set$2(13, "I'm a bot!");
              t3._client.writeMessage$1$1(t1, type$.UserState);
              _result = G.ChannelState_create();
              _result.$$_setUnsignedInt32$2(1, 0);
              _result.__fieldSet._$set$2(2, "Dumble Test Channel");
              client.writeMessage$1$1(_result, type$.ChannelState);
              $async$goto = 3;
              return P._asyncAwait(P.Future_Future$delayed(C.Duration_30000000, type$.dynamic), $async$main);
            case 3:
              // returning from await.
              $async$goto = 4;
              return P._asyncAwait(client.close$0(0), $async$main);
            case 4:
              // returning from await.
              P.print("Bye!");
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$main, $async$completer);
    },
    main_closure: function main_closure(t0) {
      this.callback = t0;
    },
    MumbleExampleCallback: function MumbleExampleCallback(t0) {
      this.client = t0;
    },
    _MumbleExampleCallback_Object_MumbleClientListener: function _MumbleExampleCallback_Object_MumbleClientListener() {
    },
    _MumbleExampleCallback_Object_MumbleClientListener_UserListener: function _MumbleExampleCallback_Object_MumbleClientListener_UserListener() {
    }
  },
  Q = {ConnectionOptions: function ConnectionOptions(t0, t1, t2) {
      this.name = t0;
      this.password = t1;
      this.pingTimeout = t2;
    }, _ConnectionOptions_Object_JsonString: function _ConnectionOptions_Object_JsonString() {
    },
    OutgoingTextMessage$: function(channels, message, trees) {
      var t2, t3,
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_User);
      t1 = P.List_List$from(t1, true, type$.User);
      t2 = channels == null ? H.setRuntimeTypeInfo([], type$.JSArray_Channel) : channels;
      t3 = type$.Channel;
      t2 = P.List_List$from(t2, true, t3);
      return new Q.OutgoingTextMessage(t1, t2, P.List_List$from(trees == null ? H.setRuntimeTypeInfo([], type$.JSArray_Channel) : trees, true, t3), message);
    },
    TextMessage0: function TextMessage0() {
    },
    TextMessage_jsonMap_closure: function TextMessage_jsonMap_closure() {
    },
    TextMessage_jsonMap_closure0: function TextMessage_jsonMap_closure0() {
    },
    OutgoingTextMessage: function OutgoingTextMessage(t0, t1, t2, t3) {
      var _ = this;
      _.clients = t0;
      _.channels = t1;
      _.trees = t2;
      _.message = t3;
    },
    IncomingTextMessage: function IncomingTextMessage(t0, t1, t2, t3, t4) {
      var _ = this;
      _.actor = t0;
      _.clients = t1;
      _.channels = t2;
      _.trees = t3;
      _.message = t4;
    },
    _TextMessage_Object_JsonString: function _TextMessage_Object_JsonString() {
    }
  },
  T = {
    ProtocolException$: function(message) {
      return new T.ProtocolException(message);
    },
    ProtocolException: function ProtocolException(t0) {
      this.message = t0;
    },
    UnhandeledError: function UnhandeledError(t0, t1) {
      this.causeStackTrace = t0;
      this.causeError = t1;
    },
    banEntryFromProto: function(entry) {
      var rawAddress, address, t1, t2, t3, t4, t5, t6, t7, _null = null;
      type$.BanList_BanEntry._as(entry);
      rawAddress = new Uint8Array(H._ensureNativeList(type$.List_int._as(entry.__fieldSet._$getND$1(0))));
      address = B.IP_fromBytes(rawAddress, true);
      t1 = entry.__fieldSet._$getIZ$1(1);
      t2 = B.IP_possibleAsIPv4(rawAddress) ? 96 : 0;
      t3 = entry.__fieldSet._$has$1(6) && entry.__fieldSet._$getIZ$1(6) > 0 ? P.Duration$(0, entry.__fieldSet._$getIZ$1(6)) : _null;
      t4 = entry.__fieldSet._$has$1(2) && entry.__fieldSet._$getSZ$1(2).length !== 0 ? entry.__fieldSet._$getSZ$1(2) : _null;
      t5 = entry.__fieldSet._$has$1(3) && entry.__fieldSet._$getSZ$1(3).length !== 0 ? entry.__fieldSet._$getSZ$1(3) : _null;
      t6 = entry.__fieldSet._$has$1(4) && entry.__fieldSet._$getSZ$1(4).length !== 0 ? entry.__fieldSet._$getSZ$1(4) : _null;
      t7 = entry.__fieldSet._$has$1(5) && entry.__fieldSet._$getSZ$1(5).length !== 0 ? P.DateTime_parse(entry.__fieldSet._$getSZ$1(5)) : _null;
      t7 = t7 == null ? _null : t7.toUtc$0();
      return new T.BanEntry(address, B.IP_asIPv6Bytes(address), t1 - t2, t4, t5, t6, t7, t3);
    },
    BanEntry: function BanEntry(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.address = t0;
      _._rawAddress = t1;
      _.mask = t2;
      _.name = t3;
      _.hash = t4;
      _.reason = t5;
      _.start = t6;
      _.duration = t7;
    },
    _BanEntry_Object_JsonString: function _BanEntry_Object_JsonString() {
    },
    digitForCodeUnit: function(codeUnits, index) {
      var letter,
        codeUnit = J.$index$asx(codeUnits, index),
        digit = 48 ^ codeUnit;
      if (digit <= 9)
        return digit;
      else {
        letter = codeUnit | 32;
        if (97 <= letter && letter <= 102)
          return letter - 97 + 10;
      }
      throw H.wrapException(P.FormatException$("Invalid hexadecimal code unit U+" + C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(codeUnit, 16), 4, "0") + ".", codeUnits, index));
    }
  },
  G = {
    Version_create: function() {
      var t1 = new G.Version();
      t1.GeneratedMessage$0();
      return t1;
    },
    UDPTunnel_create: function() {
      var t1 = new G.UDPTunnel();
      t1.GeneratedMessage$0();
      return t1;
    },
    Authenticate_create: function() {
      var t1 = new G.Authenticate();
      t1.GeneratedMessage$0();
      return t1;
    },
    Ping_create: function() {
      var t1 = new G.Ping();
      t1.GeneratedMessage$0();
      return t1;
    },
    Reject_create: function() {
      var t1 = new G.Reject();
      t1.GeneratedMessage$0();
      return t1;
    },
    ServerSync_create: function() {
      var t1 = new G.ServerSync();
      t1.GeneratedMessage$0();
      return t1;
    },
    ChannelRemove_create: function() {
      var t1 = new G.ChannelRemove();
      t1.GeneratedMessage$0();
      return t1;
    },
    ChannelState_create: function() {
      var t1 = new G.ChannelState();
      t1.GeneratedMessage$0();
      return t1;
    },
    UserRemove_create: function() {
      var t1 = new G.UserRemove();
      t1.GeneratedMessage$0();
      return t1;
    },
    UserState_UserState: function() {
      var _result = G.UserState_create();
      return _result;
    },
    UserState_create: function() {
      var t1 = new G.UserState();
      t1.GeneratedMessage$0();
      return t1;
    },
    BanList_BanEntry_create: function() {
      var t1 = new G.BanList_BanEntry();
      t1.GeneratedMessage$0();
      return t1;
    },
    BanList_create: function() {
      var t1 = new G.BanList();
      t1.GeneratedMessage$0();
      return t1;
    },
    TextMessage_create: function() {
      var t1 = new G.TextMessage();
      t1.GeneratedMessage$0();
      return t1;
    },
    PermissionDenied_create: function() {
      var t1 = new G.PermissionDenied();
      t1.GeneratedMessage$0();
      return t1;
    },
    ACL_ChanGroup_create: function() {
      var t1 = new G.ACL_ChanGroup();
      t1.GeneratedMessage$0();
      return t1;
    },
    ACL_ChanACL_create: function() {
      var t1 = new G.ACL_ChanACL();
      t1.GeneratedMessage$0();
      return t1;
    },
    ACL_create: function() {
      var t1 = new G.ACL();
      t1.GeneratedMessage$0();
      return t1;
    },
    QueryUsers_create: function() {
      var t1 = new G.QueryUsers();
      t1.GeneratedMessage$0();
      return t1;
    },
    CryptSetup_create: function() {
      var t1 = new G.CryptSetup();
      t1.GeneratedMessage$0();
      return t1;
    },
    ContextActionModify_create: function() {
      var t1 = new G.ContextActionModify();
      t1.GeneratedMessage$0();
      return t1;
    },
    ContextAction_create: function() {
      var t1 = new G.ContextAction();
      t1.GeneratedMessage$0();
      return t1;
    },
    UserList_User_create: function() {
      var t1 = new G.UserList_User();
      t1.GeneratedMessage$0();
      return t1;
    },
    UserList_create: function() {
      var t1 = new G.UserList();
      t1.GeneratedMessage$0();
      return t1;
    },
    VoiceTarget_Target_create: function() {
      var t1 = new G.VoiceTarget_Target();
      t1.GeneratedMessage$0();
      return t1;
    },
    VoiceTarget_create: function() {
      var t1 = new G.VoiceTarget();
      t1.GeneratedMessage$0();
      return t1;
    },
    PermissionQuery_create: function() {
      var t1 = new G.PermissionQuery();
      t1.GeneratedMessage$0();
      return t1;
    },
    CodecVersion_create: function() {
      var t1 = new G.CodecVersion();
      t1.GeneratedMessage$0();
      return t1;
    },
    UserStats_Stats_create: function() {
      var t1 = new G.UserStats_Stats();
      t1.GeneratedMessage$0();
      return t1;
    },
    UserStats_create: function() {
      var t1 = new G.UserStats0();
      t1.GeneratedMessage$0();
      return t1;
    },
    RequestBlob_create: function() {
      var t1 = new G.RequestBlob();
      t1.GeneratedMessage$0();
      return t1;
    },
    ServerConfig_create: function() {
      var t1 = new G.ServerConfig0();
      t1.GeneratedMessage$0();
      return t1;
    },
    SuggestConfig_create: function() {
      var t1 = new G.SuggestConfig();
      t1.GeneratedMessage$0();
      return t1;
    },
    PluginDataTransmission_create: function() {
      var t1 = new G.PluginDataTransmission();
      t1.GeneratedMessage$0();
      return t1;
    },
    Version: function Version() {
      this.__fieldSet = null;
    },
    UDPTunnel: function UDPTunnel() {
      this.__fieldSet = null;
    },
    Authenticate: function Authenticate() {
      this.__fieldSet = null;
    },
    Ping: function Ping() {
      this.__fieldSet = null;
    },
    Reject: function Reject() {
      this.__fieldSet = null;
    },
    ServerSync: function ServerSync() {
      this.__fieldSet = null;
    },
    ChannelRemove: function ChannelRemove() {
      this.__fieldSet = null;
    },
    ChannelState: function ChannelState() {
      this.__fieldSet = null;
    },
    UserRemove: function UserRemove() {
      this.__fieldSet = null;
    },
    UserState: function UserState() {
      this.__fieldSet = null;
    },
    BanList_BanEntry: function BanList_BanEntry() {
      this.__fieldSet = null;
    },
    BanList: function BanList() {
      this.__fieldSet = null;
    },
    TextMessage: function TextMessage() {
      this.__fieldSet = null;
    },
    PermissionDenied: function PermissionDenied() {
      this.__fieldSet = null;
    },
    ACL_ChanGroup: function ACL_ChanGroup() {
      this.__fieldSet = null;
    },
    ACL_ChanACL: function ACL_ChanACL() {
      this.__fieldSet = null;
    },
    ACL: function ACL() {
      this.__fieldSet = null;
    },
    QueryUsers: function QueryUsers() {
      this.__fieldSet = null;
    },
    CryptSetup: function CryptSetup() {
      this.__fieldSet = null;
    },
    ContextActionModify: function ContextActionModify() {
      this.__fieldSet = null;
    },
    ContextAction: function ContextAction() {
      this.__fieldSet = null;
    },
    UserList_User: function UserList_User() {
      this.__fieldSet = null;
    },
    UserList: function UserList() {
      this.__fieldSet = null;
    },
    VoiceTarget_Target: function VoiceTarget_Target() {
      this.__fieldSet = null;
    },
    VoiceTarget: function VoiceTarget() {
      this.__fieldSet = null;
    },
    PermissionQuery: function PermissionQuery() {
      this.__fieldSet = null;
    },
    CodecVersion: function CodecVersion() {
      this.__fieldSet = null;
    },
    UserStats_Stats: function UserStats_Stats() {
      this.__fieldSet = null;
    },
    UserStats0: function UserStats0() {
      this.__fieldSet = null;
    },
    RequestBlob: function RequestBlob() {
      this.__fieldSet = null;
    },
    ServerConfig0: function ServerConfig0() {
      this.__fieldSet = null;
    },
    SuggestConfig: function SuggestConfig() {
      this.__fieldSet = null;
    },
    PluginDataTransmission: function PluginDataTransmission() {
      this.__fieldSet = null;
    },
    ServerSuggestedClientConfig: function ServerSuggestedClientConfig(t0, t1, t2) {
      this.suggestedClientVersion = t0;
      this.usePositionalAudio = t1;
      this.usePushToTalk = t2;
    },
    ServerConfig: function ServerConfig(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.allowHtml = t0;
      _.maxMessageLength = t1;
      _.maxImageMessageLength = t2;
      _.maxUsers = t3;
      _.suggestedOpusBitrate = t4;
      _.maxBandwidth = t5;
      _.welcomeText = t6;
    },
    ServerConnectionStats: function ServerConnectionStats(t0, t1, t2, t3) {
      var _ = this;
      _.packetStats = t0;
      _.tcpPacketCount = t1;
      _.udpPacketCount = t2;
      _.pingStats = t3;
    },
    ServerCodecVersion: function ServerCodecVersion(t0, t1, t2, t3) {
      var _ = this;
      _.celtAlphaVersion = t0;
      _.celtBetaVersion = t1;
      _.preferAlpha = t2;
      _.opus = t3;
    },
    _ServerCodecVersion_Object_JsonString: function _ServerCodecVersion_Object_JsonString() {
    },
    _ServerConfig_Object_JsonString: function _ServerConfig_Object_JsonString() {
    },
    _ServerConnectionStats_Object_JsonString: function _ServerConnectionStats_Object_JsonString() {
    },
    _ServerSuggestedClientConfig_Object_JsonString: function _ServerSuggestedClientConfig_Object_JsonString() {
    }
  },
  M = {MumbleClientListener: function MumbleClientListener() {
    }, UserListener: function UserListener() {
    }, Notifier: function Notifier() {
    },
    cryptStateFromProto: function(crypt, currentCryptState) {
      var t1, t2, _null = null,
        clientNonce = crypt.__fieldSet._$has$1(1) && J.get$isNotEmpty$asx(type$.List_int._as(crypt.__fieldSet._$getND$1(1))) ? new Uint8Array(H._ensureNativeList(type$.List_int._as(crypt.__fieldSet._$getND$1(1)))) : _null,
        serverNonce = crypt.__fieldSet._$has$1(2) && J.get$isNotEmpty$asx(type$.List_int._as(crypt.__fieldSet._$getND$1(2))) ? new Uint8Array(H._ensureNativeList(type$.List_int._as(crypt.__fieldSet._$getND$1(2)))) : _null,
        key = crypt.__fieldSet._$has$1(0) && J.get$isNotEmpty$asx(type$.List_int._as(crypt.__fieldSet._$getND$1(0))) ? new Uint8Array(H._ensureNativeList(type$.List_int._as(crypt.__fieldSet._$getND$1(0)))) : _null;
      if (currentCryptState != null) {
        t1 = key == null ? currentCryptState.key : key;
        t2 = clientNonce == null ? currentCryptState._clientNonce : clientNonce;
        return new M.CryptState(t1, t2, serverNonce == null ? currentCryptState._serverNonce : serverNonce);
      } else if (clientNonce != null && serverNonce != null && key != null)
        return new M.CryptState(key, clientNonce, serverNonce);
      else
        return _null;
    },
    CryptState: function CryptState(t0, t1, t2) {
      this.key = t0;
      this._clientNonce = t1;
      this._serverNonce = t2;
    },
    _CryptState_Object_JsonString: function _CryptState_Object_JsonString() {
    },
    ProtobufHeaderPrepender: function ProtobufHeaderPrepender(t0) {
      this._wrapped = t0;
    },
    BuilderInfo$: function(messageName, createEmptyInstance, $package) {
      var t1 = H.setRuntimeTypeInfo([], type$.JSArray_FieldInfo_dynamic),
        t2 = type$.int,
        t3 = type$.FieldInfo_dynamic,
        t4 = type$.String,
        t5 = $package.name;
      return new M.BuilderInfo((t5 === "" ? "" : t5 + ".") + messageName, t1, P.LinkedHashMap_LinkedHashMap$_empty(t2, t3), P.LinkedHashMap_LinkedHashMap$_empty(t4, t3), P.LinkedHashMap_LinkedHashMap$_empty(t4, t3), P.LinkedHashMap_LinkedHashMap$_empty(t2, t2), createEmptyInstance);
    },
    _writeToCodedBufferWriter: function(fs, out) {
      var t1, t2, t3, _i, fi, t4, value, tagNumber;
      for (t1 = fs._protobuf$_message.get$info_().get$sortedByTag(), t2 = t1.length, t3 = fs._values, _i = 0; _i < t2; ++_i) {
        fi = t1[_i];
        t4 = fi.index;
        if (t4 >= t3.length)
          return H.ioore(t3, t4);
        value = t3[t4];
        if (value == null)
          continue;
        out.writeField$3(fi.tagNumber, fi.type, value);
      }
      t1 = fs._extensions;
      if (t1 != null)
        for (t1 = M._sorted(t1._values.get$keys(), type$.int), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          tagNumber = t1[_i];
          t3 = fs._extensions;
          t3.toString;
          H._asIntQ(tagNumber);
          fi = t3._info.$index(0, tagNumber);
          out.writeField$3(tagNumber, fi.get$type(fi), fs._extensions._values.$index(0, fi.get$tagNumber()));
        }
      t1 = fs._unknownFields;
      if (t1 != null)
        t1.writeToCodedBufferWriter$1(out);
    },
    _mergeFromCodedBufferReader: function(meta, fs, input, registry) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, tag, wireType, tagNumber, fi, fieldType, t20, t21, t22, rawValue, i, f, unknown, subBuilderFunc, oldValue, value, data, view, mapEntryMeta, _null = null;
      for (t1 = type$.MapFieldInfo_dynamic_dynamic, t2 = type$.dynamic, t3 = meta.fieldInfo, t4 = input.get$readSfixed64(), t5 = input.get$readSfixed32(), t6 = input.get$readFixed64(), t7 = input.get$readFixed32(), t8 = input.get$readUint64(), t9 = input.get$readUint32(), t10 = input.get$readSint64(), t11 = input.get$readSint32(), t12 = input.get$readInt64(), t13 = input.get$readInt32(), t14 = input.get$readDouble(), t15 = input.get$readFloat(), t16 = type$.List_int, t17 = input.get$readBool(), t18 = type$.GeneratedMessage, t19 = input._protobuf$_buffer; true;) {
        tag = input.readTag$0();
        if (tag === 0)
          return;
        wireType = tag & 7;
        tagNumber = C.JSInt_methods._shrOtherPositive$1(tag, 3);
        fi = t3.$index(0, tagNumber);
        if (fi == null)
          fi = _null;
        if (fi == null || !M._wireTypeMatches(fi.type, wireType)) {
          if (!fs._ensureUnknownFields$0().mergeFieldFromBuffer$2(tag, input))
            return;
          continue;
        }
        fieldType = fi.type & 4294967290;
        switch (fieldType) {
          case 16:
            fs._setFieldUnchecked$3(meta, fi, input._readRawVarint32$1(true) !== 0);
            break;
          case 32:
            fs._setFieldUnchecked$3(meta, fi, input.readBytes$0());
            break;
          case 64:
            t20 = t16._as(input.readBytes$0());
            fs._setFieldUnchecked$3(meta, fi, C.Utf8Decoder_true.convert$1(t20));
            break;
          case 256:
            t20 = input._bufferPos += 4;
            if (t20 > input._currentLimit)
              H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
            t21 = t19.buffer;
            t22 = t19.byteOffset;
            t20 = new DataView(t21, t22 + t20 - 4, 4);
            fs._setFieldUnchecked$3(meta, fi, C.NativeByteData_methods._getFloat32$2(t20, 0, true));
            break;
          case 128:
            t20 = input._bufferPos += 8;
            if (t20 > input._currentLimit)
              H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
            t21 = t19.buffer;
            t22 = t19.byteOffset;
            t20 = new DataView(t21, t22 + t20 - 8, 8);
            fs._setFieldUnchecked$3(meta, fi, C.NativeByteData_methods._getFloat64$2(t20, 0, true));
            break;
          case 512:
            rawValue = input._readRawVarint32$1(true);
            i = t3.$index(0, tagNumber);
            f = i != null ? i.valueOf : _null;
            t20 = (f == null && true ? _null.get$valueOf() : f).call$1(rawValue);
            if (t20 == null) {
              unknown = fs._ensureUnknownFields$0();
              t20 = V.Int64_Int64(rawValue);
              if (unknown._isReadOnly)
                M.defaultFrozenMessageModificationHandler("UnknownFieldSet", "mergeVarintField");
              C.JSArray_methods.add$1(unknown._getField$1(tagNumber)._varints, t20);
            } else
              fs._setFieldUnchecked$3(meta, fi, t20);
            break;
          case 1024:
            i = t3.$index(0, tagNumber);
            subBuilderFunc = i != null ? i.subBuilder : _null;
            t20 = (subBuilderFunc == null && true ? _null.get$subBuilder() : subBuilderFunc).call$0();
            oldValue = fs._getFieldOrNull$1(fi);
            if (oldValue != null)
              t20.mergeFromMessage$1(t18._as(oldValue));
            input.readGroup$3(tagNumber, t20, registry);
            fs._setFieldUnchecked$3(meta, fi, t20);
            break;
          case 2048:
            fs._setFieldUnchecked$3(meta, fi, input._readRawVarint32$1(true));
            break;
          case 4096:
            fs._setFieldUnchecked$3(meta, fi, input._readRawVarint64$0());
            break;
          case 8192:
            fs._setFieldUnchecked$3(meta, fi, M.CodedBufferReader__decodeZigZag32(input._readRawVarint32$1(false)));
            break;
          case 16384:
            value = input._readRawVarint64$0();
            fs._setFieldUnchecked$3(meta, fi, (value.$and(0, 1).$eq(0, 1) ? V.Int64__sub(0, 0, 0, value._l, value._m, value._h) : value).$shr(0, 1));
            break;
          case 32768:
            fs._setFieldUnchecked$3(meta, fi, input._readRawVarint32$1(false));
            break;
          case 65536:
            fs._setFieldUnchecked$3(meta, fi, input._readRawVarint64$0());
            break;
          case 131072:
            t20 = input._bufferPos += 4;
            if (t20 > input._currentLimit)
              H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
            t21 = t19.buffer;
            t22 = t19.byteOffset;
            t20 = new DataView(t21, t22 + t20 - 4, 4);
            fs._setFieldUnchecked$3(meta, fi, C.NativeByteData_methods._getUint32$2(t20, 0, true));
            break;
          case 262144:
            t20 = input._bufferPos += 8;
            if (t20 > input._currentLimit)
              H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
            t21 = t19.buffer;
            t22 = t19.byteOffset;
            data = new DataView(t21, t22 + t20 - 8, 8);
            t20 = data.buffer;
            t21 = data.byteOffset;
            view = new Uint8Array(t20, t21, 8);
            fs._setFieldUnchecked$3(meta, fi, V.Int64_Int64$fromBytes(view));
            break;
          case 524288:
            t20 = input._bufferPos += 4;
            if (t20 > input._currentLimit)
              H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
            t21 = t19.buffer;
            t22 = t19.byteOffset;
            t20 = new DataView(t21, t22 + t20 - 4, 4);
            fs._setFieldUnchecked$3(meta, fi, C.NativeByteData_methods._getInt32$2(t20, 0, true));
            break;
          case 1048576:
            t20 = input._bufferPos += 8;
            if (t20 > input._currentLimit)
              H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
            t21 = t19.buffer;
            t22 = t19.byteOffset;
            data = new DataView(t21, t22 + t20 - 8, 8);
            t20 = data.buffer;
            t21 = data.byteOffset;
            view = new Uint8Array(t20, t21, 8);
            fs._setFieldUnchecked$3(meta, fi, V.Int64_Int64$fromBytes(view));
            break;
          case 2097152:
            i = t3.$index(0, tagNumber);
            subBuilderFunc = i != null ? i.subBuilder : _null;
            t20 = (subBuilderFunc == null && true ? _null.get$subBuilder() : subBuilderFunc).call$0();
            oldValue = fs._getFieldOrNull$1(fi);
            if (oldValue != null)
              t20.mergeFromMessage$1(t18._as(oldValue));
            input.readMessage$2(t20, registry);
            fs._setFieldUnchecked$3(meta, fi, t20);
            break;
          case 18:
            M._readPackable(meta, fs, input, wireType, fi, t17);
            break;
          case 34:
            J.add$1$ax(fs._ensureRepeatedField$1$2(meta, fi, t2), input.readBytes$0());
            break;
          case 66:
            t20 = fs._ensureRepeatedField$1$2(meta, fi, t2);
            t21 = t16._as(input.readBytes$0());
            J.add$1$ax(t20, C.Utf8Decoder_true.convert$1(t21));
            break;
          case 258:
            M._readPackable(meta, fs, input, wireType, fi, t15);
            break;
          case 130:
            M._readPackable(meta, fs, input, wireType, fi, t14);
            break;
          case 514:
            M._readPackableToListEnum(meta, fs, input, wireType, fi, tagNumber, registry);
            break;
          case 1026:
            i = t3.$index(0, tagNumber);
            subBuilderFunc = i != null ? i.subBuilder : _null;
            t20 = (subBuilderFunc == null && true ? _null.get$subBuilder() : subBuilderFunc).call$0();
            input.readGroup$3(tagNumber, t20, registry);
            J.add$1$ax(fs._ensureRepeatedField$1$2(meta, fi, t2), t20);
            break;
          case 2050:
            M._readPackable(meta, fs, input, wireType, fi, t13);
            break;
          case 4098:
            M._readPackable(meta, fs, input, wireType, fi, t12);
            break;
          case 8194:
            M._readPackable(meta, fs, input, wireType, fi, t11);
            break;
          case 16386:
            M._readPackable(meta, fs, input, wireType, fi, t10);
            break;
          case 32770:
            M._readPackable(meta, fs, input, wireType, fi, t9);
            break;
          case 65538:
            M._readPackable(meta, fs, input, wireType, fi, t8);
            break;
          case 131074:
            M._readPackable(meta, fs, input, wireType, fi, t7);
            break;
          case 262146:
            M._readPackable(meta, fs, input, wireType, fi, t6);
            break;
          case 524290:
            M._readPackable(meta, fs, input, wireType, fi, t5);
            break;
          case 1048578:
            M._readPackable(meta, fs, input, wireType, fi, t4);
            break;
          case 2097154:
            i = t3.$index(0, tagNumber);
            subBuilderFunc = i != null ? i.subBuilder : _null;
            t20 = (subBuilderFunc == null && true ? _null.get$subBuilder() : subBuilderFunc).call$0();
            input.readMessage$2(t20, registry);
            J.add$1$ax(fs._ensureRepeatedField$1$2(meta, fi, t2), t20);
            break;
          case 6291456:
            t1._as(fi);
            mapEntryMeta = fi.get$mapEntryBuilderInfo();
            fs._ensureMapField$2$2(meta, fi, t2, t2)._mergeEntry$3(mapEntryMeta, input, registry);
            break;
          default:
            throw H.wrapException("Unknown field type " + fieldType);
        }
      }
    },
    _readPackable: function(meta, fs, input, wireType, fi, readFunc) {
      M._readPackableToList(meta, fs, input, wireType, fi, new M._readPackable_readToList(readFunc));
    },
    _readPackableToListEnum: function(meta, fs, input, wireType, fi, tagNumber, registry) {
      M._readPackableToList(meta, fs, input, wireType, fi, new M._readPackableToListEnum_readToList(input, meta, tagNumber, registry, fs));
    },
    _readPackableToList: function(meta, fs, input, wireType, fi, readToList) {
      var t1, byteLimit, oldLimit,
        list = fs._ensureRepeatedField$1$2(meta, fi, type$.dynamic);
      if (wireType === 2) {
        t1 = input._readRawVarint32$1(true);
        if (t1 < 0)
          H.throwExpression(P.ArgumentError$(string$.CodedB));
        byteLimit = t1 + input._bufferPos;
        oldLimit = input._currentLimit;
        if (oldLimit !== -1 && byteLimit > oldLimit || byteLimit > input._sizeLimit)
          H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
        input._currentLimit = byteLimit;
        new M._readPackableToList_closure(input, readToList, list).call$0();
        input._currentLimit = oldLimit;
      } else
        readToList.call$1(list);
    },
    CodedBufferReader__decodeZigZag32: function(value) {
      if ((value & 1) === 1)
        return -C.JSInt_methods._shrOtherPositive$1(value, 1) - 1;
      else
        return C.JSInt_methods._shrOtherPositive$1(value, 1);
    },
    InvalidProtocolBufferException$invalidEndTag: function() {
      return new M.InvalidProtocolBufferException("Protocol message end-group tag did not match expected tag.");
    },
    InvalidProtocolBufferException$malformedVarint: function() {
      return new M.InvalidProtocolBufferException("CodedBufferReader encountered a malformed varint.");
    },
    InvalidProtocolBufferException$recursionLimitExceeded: function() {
      return new M.InvalidProtocolBufferException("Protocol message had too many levels of nesting.  May be malicious.\nUse CodedBufferReader.setRecursionLimit() to increase the depth limit.\n");
    },
    InvalidProtocolBufferException$truncatedMessage: function() {
      return new M.InvalidProtocolBufferException("While parsing a protocol message, the input ended unexpectedly\nin the middle of a field.  This could mean either than the\ninput has been truncated or that an embedded message\nmisreported its own length.\n");
    },
    _getFieldError: function(fieldType, value) {
      var _null = null,
        _s15_ = "not type double",
        _s12_ = "not type int";
      switch (fieldType & 4290772984) {
        case 16:
          if (!H._isBool(value))
            return "not type bool";
          return _null;
        case 32:
          if (!type$.List_dynamic._is(value))
            return "not List";
          return _null;
        case 64:
          if (typeof value != "string")
            return "not type String";
          return _null;
        case 256:
          if (typeof value != "number")
            return _s15_;
          if (!M._isFloat32(value))
            return "out of range for float";
          return _null;
        case 128:
          if (typeof value != "number")
            return _s15_;
          return _null;
        case 512:
          if (!(value instanceof M.ProtobufEnum))
            return "not type ProtobufEnum";
          return _null;
        case 2048:
        case 8192:
        case 524288:
          if (!H._isInt(value))
            return _s12_;
          if (!(-2147483648 <= value && value <= 2147483647))
            return "out of range for signed 32-bit int";
          return _null;
        case 32768:
        case 131072:
          if (!H._isInt(value))
            return _s12_;
          if (!(0 <= value && value <= 4294967295))
            return "out of range for unsigned 32-bit int";
          return _null;
        case 4096:
        case 16384:
        case 65536:
        case 262144:
        case 1048576:
          if (!(value instanceof V.Int64))
            return "not Int64";
          return _null;
        case 1024:
        case 2097152:
          if (!(value instanceof M.GeneratedMessage))
            return "not a GeneratedMessage";
          return _null;
        default:
          return "field has unknown type " + fieldType;
      }
    },
    getCheckFunction: function(fieldType) {
      switch (fieldType & 4294967288) {
        case 16:
        case 32:
        case 64:
        case 128:
        case 512:
        case 1024:
        case 2097152:
        case 4096:
        case 16384:
        case 1048576:
        case 65536:
        case 262144:
          return M.protobuf___checkNotNull$closure();
        case 256:
          return M.protobuf___checkFloat$closure();
        case 2048:
        case 8192:
        case 524288:
          return M.protobuf___checkSigned32$closure();
        case 32768:
        case 131072:
          return M.protobuf___checkUnsigned32$closure();
      }
      throw H.wrapException(P.ArgumentError$("check function not implemented: " + fieldType));
    },
    _checkNotNull: function(val) {
      if (val == null)
        throw H.wrapException(P.ArgumentError$("Can't add a null to a repeated field"));
    },
    _checkFloat: function(val) {
      H._asDouble(val);
      if (!M._isFloat32(val))
        throw H.wrapException(M._createFieldRangeError(val, "a float"));
    },
    _checkSigned32: function(val) {
      H._asInt(val);
      if (!(-2147483648 <= val && val <= 2147483647))
        throw H.wrapException(M._createFieldRangeError(val, "a signed int32"));
    },
    _checkUnsigned32: function(val) {
      H._asInt(val);
      if (!(0 <= val && val <= 4294967295))
        throw H.wrapException(M._createFieldRangeError(val, "an unsigned int32"));
    },
    _createFieldRangeError: function(val, wantedType) {
      return P.RangeError$("Value (" + H.S(val) + ") is not " + wantedType);
    },
    _isFloat32: function(value) {
      var t1;
      if (!isNaN(value))
        if (!(value == 1 / 0 || value == -1 / 0))
          t1 = -34028234663852886e22 <= value && value <= 34028234663852886e22;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    FieldInfo$repeated: function($name, tagNumber, index, type, check, subBuilder, enumValues, protoName, $valueOf, $T) {
      if (protoName == null)
        M._unCamelCase($name);
      return new M.FieldInfo($name, tagNumber, index, type, new M.FieldInfo$repeated_closure(check, $T), subBuilder, $valueOf, check, $T._eval$1("FieldInfo<0>"));
    },
    FieldInfo_findMakeDefault: function(type, defaultOrMaker) {
      if (defaultOrMaker == null)
        return M.PbFieldType__defaultForType(type);
      if (type$.dynamic_Function._is(defaultOrMaker))
        return defaultOrMaker;
      return new M.FieldInfo_findMakeDefault_closure(defaultOrMaker);
    },
    _unCamelCase: function($name) {
      return H.stringReplaceAllFuncUnchecked($name, type$.Pattern._as($.$get$_upperCase()), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new M._unCamelCase_closure())), type$.nullable_String_Function_String._as(null));
    },
    defaultFrozenMessageModificationHandler: function(messageName, methodName) {
      if (methodName != null)
        throw H.wrapException(P.UnsupportedError$("Attempted to call " + methodName + " on a read-only message (" + messageName + ")"));
      throw H.wrapException(P.UnsupportedError$("Attempted to change a read-only message (" + messageName + ")"));
    },
    _FieldSet__makeValueList: function($length) {
      if ($length === 0)
        return $._FieldSet__zeroList;
      return P.List_List$filled($length, null, false, type$.dynamic);
    },
    PbFieldType__defaultForType: function(type) {
      switch (type) {
        case 16:
        case 17:
          return M.protobuf_PbFieldType__BOOL_FALSE$closure();
        case 32:
        case 33:
          return M.protobuf_PbFieldType__BYTES_EMPTY$closure();
        case 64:
        case 65:
          return M.protobuf_PbFieldType__STRING_EMPTY$closure();
        case 256:
        case 257:
        case 128:
        case 129:
          return M.protobuf_PbFieldType__DOUBLE_ZERO$closure();
        case 2048:
        case 2049:
        case 4096:
        case 4097:
        case 8192:
        case 8193:
        case 16384:
        case 16385:
        case 32768:
        case 32769:
        case 65536:
        case 65537:
        case 131072:
        case 131073:
        case 262144:
        case 262145:
        case 524288:
        case 524289:
        case 1048576:
        case 1048577:
          return M.protobuf_PbFieldType__INT_ZERO$closure();
        default:
          return null;
      }
    },
    PbFieldType__STRING_EMPTY: function() {
      return "";
    },
    PbFieldType__BYTES_EMPTY: function() {
      return H.setRuntimeTypeInfo([], type$.JSArray_int);
    },
    PbFieldType__BOOL_FALSE: function() {
      return false;
    },
    PbFieldType__INT_ZERO: function() {
      return 0;
    },
    PbFieldType__DOUBLE_ZERO: function() {
      return 0;
    },
    GeneratedMessage__createDefaultMakerFor: function(createFn, $T) {
      var t1 = {};
      t1.defaultValue = null;
      return new M.GeneratedMessage__createDefaultMakerFor_defaultMaker(t1, createFn, $T);
    },
    GeneratedMessageGenericExtensions_deepCopy: function(_this, $T) {
      var t1 = $T._as(_this.get$info_().createEmptyInstance.call$0());
      t1.mergeFromMessage$1(_this);
      return t1;
    },
    PbList$: function(check, $E) {
      var t1 = new M.PbList(H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>")), check, $E._eval$1("PbList<0>"));
      t1.PbListBase$_noList$1$check(check, $E);
      return t1;
    },
    ProtobufEnum_initByValue: function(byIndex, $T) {
      var t1, _i, v,
        byValue = P.LinkedHashMap_LinkedHashMap$_empty(type$.int, $T);
      for (t1 = byIndex.length, _i = 0; _i < t1; ++_i) {
        v = byIndex[_i];
        byValue.$indexSet(0, v.value, v);
      }
      return byValue;
    },
    UnknownFieldSet$: function() {
      return new M.UnknownFieldSet(P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.UnknownFieldSetField));
    },
    _deepEquals: function(lhs, rhs) {
      var t1;
      if (lhs instanceof M.GeneratedMessage)
        return lhs.$eq(0, rhs);
      if (rhs instanceof M.GeneratedMessage)
        return false;
      t1 = type$.List_dynamic;
      if (t1._is(lhs) && t1._is(rhs))
        return M._areListsEqual(lhs, rhs);
      t1 = type$.Map_dynamic_dynamic;
      if (t1._is(lhs) && t1._is(rhs))
        return M._areMapsEqual(lhs, rhs);
      t1 = type$.ByteData;
      if (t1._is(lhs) && t1._is(rhs))
        return M._areByteDataEqual(lhs, rhs);
      return J.$eq$(lhs, rhs);
    },
    _areListsEqual: function(lhs, rhs) {
      var i,
        t1 = J.getInterceptor$asx(lhs),
        t2 = J.getInterceptor$asx(rhs);
      if (t1.get$length(lhs) !== t2.get$length(rhs))
        return false;
      for (i = 0; i < t1.get$length(lhs); ++i)
        if (!M._deepEquals(t1.$index(lhs, i), t2.$index(rhs, i)))
          return false;
      return true;
    },
    _areMapsEqual: function(lhs, rhs) {
      if (lhs.get$length(lhs) !== rhs.get$length(rhs))
        return false;
      return lhs.get$keys().every$1(0, new M._areMapsEqual_closure(lhs, rhs));
    },
    _areByteDataEqual: function(lhs, rhs) {
      var t1 = new M._areByteDataEqual_asBytes();
      return M._areListsEqual(t1.call$1(lhs), t1.call$1(rhs));
    },
    _sorted: function(list, $T) {
      var t1 = P.List_List$from(list, true, $T);
      C.JSArray_methods.sort$0(t1);
      return t1;
    },
    _HashUtils__combine: function(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    _HashUtils__hashObjects: function(objects) {
      var t1 = J.fold$1$2$ax(objects, 0, new M._HashUtils__hashObjects_closure(), type$.int),
        hash = t1 + ((t1 & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    _wireTypeMatches: function(fieldType, wireType) {
      switch (fieldType & 4290772984) {
        case 16:
        case 512:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
          return wireType === 0 || wireType === 2;
        case 256:
        case 131072:
        case 524288:
          return wireType === 5 || wireType === 2;
        case 128:
        case 262144:
        case 1048576:
          return wireType === 1 || wireType === 2;
        case 32:
        case 64:
        case 2097152:
          return wireType === 2;
        case 1024:
          return wireType === 3;
        default:
          return false;
      }
    },
    BuilderInfo: function BuilderInfo(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.qualifiedMessageName = t0;
      _.byIndex = t1;
      _.fieldInfo = t2;
      _.byTagAsString = t3;
      _.byName = t4;
      _.oneofs = t5;
      _.hasRequiredFields = true;
      _._sortedByTag = null;
      _.createEmptyInstance = t6;
    },
    BuilderInfo__computeSortedByTag_closure: function BuilderInfo__computeSortedByTag_closure() {
    },
    _readPackable_readToList: function _readPackable_readToList(t0) {
      this.readFunc = t0;
    },
    _readPackableToListEnum_readToList: function _readPackableToListEnum_readToList(t0, t1, t2, t3, t4) {
      var _ = this;
      _.input = t0;
      _.meta = t1;
      _.tagNumber = t2;
      _.registry = t3;
      _.fs = t4;
    },
    _readPackableToList_closure: function _readPackableToList_closure(t0, t1, t2) {
      this.input = t0;
      this.readToList = t1;
      this.list = t2;
    },
    CodedBufferReader: function CodedBufferReader(t0, t1) {
      var _ = this;
      _._protobuf$_buffer = t0;
      _._bufferPos = 0;
      _._currentLimit = -1;
      _._recursionDepth = _._lastTag = 0;
      _._sizeLimit = t1;
    },
    CodedBufferWriter: function CodedBufferWriter(t0, t1) {
      var _ = this;
      _._splices = t0;
      _._lastSplicePos = 0;
      _._outputChunk = null;
      _._bytesInChunk = 0;
      _._outputChunkAsByteData = null;
      _._outputChunks = t1;
      _._bytesTotal = _._outputChunksBytes = 0;
    },
    CodedBufferWriter_writeField_closure: function CodedBufferWriter_writeField_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.fieldNumber = t1;
      _.fieldValue = t2;
      _.keyWireFormat = t3;
      _.valueWireFormat = t4;
    },
    InvalidProtocolBufferException: function InvalidProtocolBufferException(t0) {
      this.message = t0;
    },
    _ExtensionFieldSet: function _ExtensionFieldSet(t0, t1, t2) {
      var _ = this;
      _._protobuf$_parent = t0;
      _._info = t1;
      _._values = t2;
      _._isReadOnly = false;
    },
    _EmptyExtensionRegistry: function _EmptyExtensionRegistry() {
    },
    FieldInfo: function FieldInfo(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._emptyList = null;
      _.name = t0;
      _.tagNumber = t1;
      _.index = t2;
      _.type = t3;
      _.makeDefault = t4;
      _.subBuilder = t5;
      _.valueOf = t6;
      _.check = t7;
      _.$ti = t8;
    },
    FieldInfo$repeated_closure: function FieldInfo$repeated_closure(t0, t1) {
      this.check = t0;
      this.T = t1;
    },
    FieldInfo_findMakeDefault_closure: function FieldInfo_findMakeDefault_closure(t0) {
      this.defaultOrMaker = t0;
    },
    _unCamelCase_closure: function _unCamelCase_closure() {
    },
    _FieldSet: function _FieldSet(t0, t1, t2, t3) {
      var _ = this;
      _._protobuf$_message = t0;
      _._eventPlugin = t1;
      _._values = t2;
      _._unknownFields = _._extensions = null;
      _._frozenState = false;
      _._oneofCases = t3;
    },
    _FieldSet__hashCode_hashField: function _FieldSet__hashCode_hashField() {
    },
    _FieldSet__hashCode_hashField_closure: function _FieldSet__hashCode_hashField_closure() {
    },
    _FieldSet__hashCode_hashEachField: function _FieldSet__hashCode_hashEachField(t0, t1) {
      this.$this = t0;
      this.hashField = t1;
    },
    _FieldSet__hashCode_hashEachField_closure: function _FieldSet__hashCode_hashEachField_closure(t0) {
      this.$this = t0;
    },
    _FieldSet__hashCode_hashEachField_closure0: function _FieldSet__hashCode_hashEachField_closure0(t0, t1) {
      this.$this = t0;
      this.hashField = t1;
    },
    _FieldSet__hashCode_hashEachField_closure1: function _FieldSet__hashCode_hashEachField_closure1(t0, t1) {
      this.$this = t0;
      this.hashField = t1;
    },
    _FieldSet_writeString_renderValue: function _FieldSet_writeString_renderValue(t0, t1) {
      this.out = t0;
      this.indent = t1;
    },
    _FieldSet_writeString_writeFieldValue: function _FieldSet_writeString_writeFieldValue(t0) {
      this.renderValue = t0;
    },
    _FieldSet_writeString_closure: function _FieldSet_writeString_closure(t0, t1) {
      this.$this = t0;
      this.writeFieldValue = t1;
    },
    _FieldSet_writeString_closure0: function _FieldSet_writeString_closure0(t0, t1) {
      this.$this = t0;
      this.writeFieldValue = t1;
    },
    GeneratedMessage: function GeneratedMessage() {
    },
    GeneratedMessage__createDefaultMakerFor_defaultMaker: function GeneratedMessage__createDefaultMakerFor_defaultMaker(t0, t1, t2) {
      this._box_0 = t0;
      this.createFn = t1;
      this.T = t2;
    },
    PackageName: function PackageName(t0) {
      this.name = t0;
    },
    FrozenPbList: function FrozenPbList(t0, t1, t2) {
      this._wrappedList = t0;
      this.check = t1;
      this.$ti = t2;
    },
    PbList: function PbList(t0, t1, t2) {
      this._wrappedList = t0;
      this.check = t1;
      this.$ti = t2;
    },
    PbListBase: function PbListBase() {
    },
    ProtobufEnum: function ProtobufEnum() {
    },
    UnknownFieldSet: function UnknownFieldSet(t0) {
      this._fields = t0;
      this._isReadOnly = false;
    },
    UnknownFieldSet__getField_closure: function UnknownFieldSet__getField_closure() {
    },
    UnknownFieldSet_hashCode_closure: function UnknownFieldSet_hashCode_closure(t0) {
      this._box_0 = t0;
    },
    UnknownFieldSet__markReadOnly_closure: function UnknownFieldSet__markReadOnly_closure() {
    },
    UnknownFieldSetField: function UnknownFieldSetField(t0, t1, t2, t3, t4) {
      var _ = this;
      _._lengthDelimited = t0;
      _._varints = t1;
      _._fixed32s = t2;
      _._fixed64s = t3;
      _._groups = t4;
      _._isReadOnly = false;
    },
    UnknownFieldSetField_writeTo_write: function UnknownFieldSetField_writeTo_write(t0, t1) {
      this.output = t0;
      this.fieldNumber = t1;
    },
    _areMapsEqual_closure: function _areMapsEqual_closure(t0, t1) {
      this.lhs = t0;
      this.rhs = t1;
    },
    _areByteDataEqual_asBytes: function _areByteDataEqual_asBytes() {
    },
    _HashUtils__hashObjects_closure: function _HashUtils__hashObjects_closure() {
    }
  },
  F = {
    UnknownMessageException$: function(requestedType) {
      return new F.UnknownMessageException(requestedType);
    },
    encode: function(message, $T) {
      var out, t1, result,
        type = C.Map_KZ7NE.$index(0, H.createRuntimeType($T));
      if (type != null) {
        out = new M.CodedBufferWriter([], []);
        out._commitChunk$1(true);
        t1 = message.__fieldSet;
        t1.toString;
        M._writeToCodedBufferWriter(t1, out);
        t1 = out._bytesTotal;
        result = new Uint8Array(t1);
        out.writeTo$1(result);
        return new D.ProtobufPacket(type, result);
      } else
        throw H.wrapException(F.UnknownMessageException$(H.createRuntimeType($T)));
    },
    decode: function(packet) {
      var t1 = packet.type,
        builder = $.$get$_builders().$index(0, t1);
      if (builder != null)
        return builder.call$1(packet.data);
      else
        throw H.wrapException(F.UnknownMessageException$(t1));
    },
    _builders_closure: function _builders_closure() {
    },
    _builders_closure0: function _builders_closure0() {
    },
    _builders_closure1: function _builders_closure1() {
    },
    _builders_closure2: function _builders_closure2() {
    },
    _builders_closure3: function _builders_closure3() {
    },
    _builders_closure4: function _builders_closure4() {
    },
    _builders_closure5: function _builders_closure5() {
    },
    _builders_closure6: function _builders_closure6() {
    },
    _builders_closure7: function _builders_closure7() {
    },
    _builders_closure8: function _builders_closure8() {
    },
    _builders_closure9: function _builders_closure9() {
    },
    _builders_closure10: function _builders_closure10() {
    },
    _builders_closure11: function _builders_closure11() {
    },
    _builders_closure12: function _builders_closure12() {
    },
    _builders_closure13: function _builders_closure13() {
    },
    _builders_closure14: function _builders_closure14() {
    },
    _builders_closure15: function _builders_closure15() {
    },
    _builders_closure16: function _builders_closure16() {
    },
    _builders_closure17: function _builders_closure17() {
    },
    _builders_closure18: function _builders_closure18() {
    },
    _builders_closure19: function _builders_closure19() {
    },
    _builders_closure20: function _builders_closure20() {
    },
    _builders_closure21: function _builders_closure21() {
    },
    _builders_closure22: function _builders_closure22() {
    },
    _builders_closure23: function _builders_closure23() {
    },
    _builders_closure24: function _builders_closure24() {
    },
    _builders_closure25: function _builders_closure25() {
    },
    UnknownMessageException: function UnknownMessageException(t0) {
      this.requestedType = t0;
    }
  },
  X = {
    Permission$fromInt: function(value) {
      return new X.Permission((value & 1) !== 0, (value & 2) !== 0, (value & 4) !== 0, (value & 8) !== 0, (value & 16) !== 0, (value & 32) !== 0, (value & 64) !== 0, (value & 128) !== 0, (value & 256) !== 0, (value & 512) !== 0, (value & 1024) !== 0, (value & 2048) !== 0, (value & 65536) !== 0, (value & 131072) !== 0, (value & 262144) !== 0, (value & 524288) !== 0, (value & 1048576) !== 0, value);
    },
    Permission: function Permission(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17) {
      var _ = this;
      _.write = t0;
      _.traverse = t1;
      _.enter = t2;
      _.speak = t3;
      _.muteDeafen = t4;
      _.move = t5;
      _.makeChannel = t6;
      _.linkChannel = t7;
      _.whisper = t8;
      _.textMessage = t9;
      _.makeTempChannel = t10;
      _.listen = t11;
      _.kick = t12;
      _.ban = t13;
      _.register = t14;
      _.selfRegister = t15;
      _.resetUserContent = t16;
      _.intValue = t17;
    },
    _Permission_Object_JsonString: function _Permission_Object_JsonString() {
    },
    ProtobufStreamTransformer: function ProtobufStreamTransformer() {
    },
    DataLeftException: function DataLeftException() {
    }
  },
  K = {
    registeredUserFromProto: function(user, channel) {
      var t1, t2;
      if (user.__fieldSet._$has$1(0)) {
        t1 = user.__fieldSet._$getIZ$1(0);
        t2 = user.__fieldSet._$has$1(1) ? user.__fieldSet._$getSZ$1(1) : null;
        return new K.RegisteredUser(t1, t2, user.__fieldSet._$has$1(2) && user.__fieldSet._$getSZ$1(2).length !== 0 ? P.DateTime_parse(user.__fieldSet._$getSZ$1(2)) : null, channel);
      } else
        throw H.wrapException(T.ProtocolException$("Required field userId not set in proto message!"));
    },
    RegisteredUser: function RegisteredUser(t0, t1, t2, t3) {
      var _ = this;
      _.userId = t0;
      _.name = t1;
      _.lastSeen = t2;
      _.lastChannel = t3;
    },
    _RegisteredUser_Object_JsonString: function _RegisteredUser_Object_JsonString() {
    }
  },
  Y = {
    packetStatsFromProto: function(stats) {
      var _null = null,
        t1 = stats.__fieldSet._$has$1(0) ? stats.__fieldSet._$getIZ$1(0) : _null,
        t2 = stats.__fieldSet._$has$1(1) ? stats.__fieldSet._$getIZ$1(1) : _null,
        t3 = stats.__fieldSet._$has$1(2) ? stats.__fieldSet._$getIZ$1(2) : _null;
      return new Y.PacketStats(t1, t2, t3, stats.get$info_().hasRequiredFields ? stats.__fieldSet._$getIZ$1(3) : _null);
    },
    versionInformationFromProto: function(version) {
      var _null = null,
        t1 = version.__fieldSet._$has$1(2) ? version.__fieldSet._$getSZ$1(2) : _null,
        t2 = version.__fieldSet._$has$1(3) ? version.__fieldSet._$getSZ$1(3) : _null,
        t3 = version.__fieldSet._$has$1(1) ? version.__fieldSet._$getSZ$1(1) : _null;
      return new Y.VersionInformation(version.__fieldSet._$has$1(0) ? version.__fieldSet._$getIZ$1(0) : _null, t3, t1, t2);
    },
    PacketStats: function PacketStats(t0, t1, t2, t3) {
      var _ = this;
      _.goodPacketCount = t0;
      _.latePacketCount = t1;
      _.lostPacketCount = t2;
      _.resync = t3;
    },
    VersionInformation: function VersionInformation(t0, t1, t2, t3) {
      var _ = this;
      _.version = t0;
      _.release = t1;
      _.os = t2;
      _.osVersion = t3;
    },
    PingStats: function PingStats(t0, t1, t2, t3) {
      var _ = this;
      _.udpPingAverage = t0;
      _.udpPingVariance = t1;
      _.tcpPingAverage = t2;
      _.tcpPingVariance = t3;
    },
    _PacketStats_Object_JsonString: function _PacketStats_Object_JsonString() {
    },
    _PingStats_Object_JsonString: function _PingStats_Object_JsonString() {
    },
    _VersionInformation_Object_JsonString: function _VersionInformation_Object_JsonString() {
    }
  },
  L = {PlatformOptions: function PlatformOptions() {
    }, _PlatformOptions_Object_JsonString: function _PlatformOptions_Object_JsonString() {
    }},
  B = {PlatformOptionsWeb: function PlatformOptionsWeb(t0) {
      this.uri = t0;
    },
    adjustNetworkBandwidth: function(bitspersec) {
      var bitrate, _48000 = 48000;
      if (bitspersec === 0)
        return _48000;
      else {
        if (B.getNetworkBandwidth(_48000, 1) > bitspersec) {
          bitrate = _48000;
          while (true) {
            if (!(bitrate > 8000 && 48 * C.JSInt_methods.ceil$0(800) + bitrate > bitspersec))
              break;
            bitrate -= 1000;
          }
        } else
          bitrate = _48000;
        return bitrate;
      }
    },
    getNetworkBandwidth: function(bitrate, $frames) {
      return (35 + $frames + 12) * C.JSNumber_methods.ceil$0(800 / $frames) + bitrate;
    },
    IP_asIPv6Bytes: function(address) {
      var asV6;
      if (C.JSString_methods.contains$1(address, ":"))
        return B._asIPv6Bytes(address);
      else if (C.JSString_methods.contains$1(address, ".")) {
        asV6 = new Uint8Array(16);
        asV6[10] = 255;
        asV6[11] = 255;
        C.NativeUint8List_methods.setAll$2(asV6, 12, B._parseIPv4(address));
        return asV6;
      } else
        throw H.wrapException(P.ArgumentError$("Could not decide if IPv4 or IPv6!"));
    },
    IP_possibleAsIPv4: function(ipv6) {
      var t1 = ipv6.length;
      if (t1 === 16) {
        if (0 >= t1)
          return H.ioore(ipv6, 0);
        if (ipv6[0] === 0) {
          if (1 >= t1)
            return H.ioore(ipv6, 1);
          if (ipv6[1] === 0) {
            if (2 >= t1)
              return H.ioore(ipv6, 2);
            if (ipv6[2] === 0) {
              if (3 >= t1)
                return H.ioore(ipv6, 3);
              if (ipv6[3] === 0) {
                if (4 >= t1)
                  return H.ioore(ipv6, 4);
                if (ipv6[4] === 0) {
                  if (5 >= t1)
                    return H.ioore(ipv6, 5);
                  if (ipv6[5] === 0) {
                    if (6 >= t1)
                      return H.ioore(ipv6, 6);
                    if (ipv6[6] === 0) {
                      if (7 >= t1)
                        return H.ioore(ipv6, 7);
                      if (ipv6[7] === 0) {
                        if (8 >= t1)
                          return H.ioore(ipv6, 8);
                        if (ipv6[8] === 0) {
                          if (9 >= t1)
                            return H.ioore(ipv6, 9);
                          if (ipv6[9] === 0) {
                            if (10 >= t1)
                              return H.ioore(ipv6, 10);
                            if (ipv6[10] === 255) {
                              if (11 >= t1)
                                return H.ioore(ipv6, 11);
                              t1 = ipv6[11] === 255;
                            } else
                              t1 = false;
                          } else
                            t1 = false;
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      } else
        throw H.wrapException(P.ArgumentError$("The parameter ipv6 must be 16 bytes long!"));
    },
    IP_fromBytes: function(bytes, asIPv4IfPossible) {
      var t2, t3, combined, i, t4,
        t1 = bytes.length;
      if (t1 === 4)
        return C.NativeUint8List_methods.join$1(bytes, ".");
      else if (t1 === 16)
        if (asIPv4IfPossible && B.IP_possibleAsIPv4(bytes))
          return B.IP_fromBytes(H.NativeUint8List_NativeUint8List$view(bytes.buffer, bytes.byteOffset + 12, 4), false);
        else {
          for (t2 = type$.JSArray_int, t3 = type$.HexCodec._eval$1("Codec.S"), combined = "", i = 0; i < 16; ++i) {
            if (i >= t1)
              return H.ioore(bytes, i);
            t4 = t3._as(H.setRuntimeTypeInfo([bytes[i]], t2));
            combined += C.JSString_methods.padLeft$2(C.C_HexCodec.get$encoder().convert$1(t4), 2, "0");
            if (C.JSInt_methods.$mod(i, 2) === 1 && i !== 15)
              combined += ":";
          }
          return combined;
        }
      else
        throw H.wrapException(P.ArgumentError$("There must be either 4 bytes (for IPv4) or 16 bytes (for IPv6)!"));
    },
    FilterNullList_filterNull: function(_this, $T) {
      var copy = P.List_List$from(_this, true, $T._eval$1("0?")),
        t1 = H._arrayInstanceType(copy),
        t2 = t1._eval$1("bool(1)")._as(new B.FilterNullList_filterNull_closure($T));
      if (!!copy.fixed$length)
        H.throwExpression(P.UnsupportedError$("retainWhere"));
      C.JSArray_methods._removeWhere$2(copy, t2, false);
      return new H.CastList(copy, t1._eval$1("@<1>")._bind$1($T)._eval$1("CastList<1,2>"));
    },
    _parseIPv4: function(address) {
      var ipv4,
        parts = address.split("."),
        t1 = address.length;
      if (t1 <= 15 && t1 >= 7 && parts.length === 4) {
        ipv4 = new Uint8Array(4);
        t1 = parts.length;
        if (0 >= t1)
          return H.ioore(parts, 0);
        ipv4[0] = P.int_parse(parts[0]);
        if (1 >= t1)
          return H.ioore(parts, 1);
        ipv4[1] = P.int_parse(parts[1]);
        if (2 >= t1)
          return H.ioore(parts, 2);
        ipv4[2] = P.int_parse(parts[2]);
        if (3 >= t1)
          return H.ioore(parts, 3);
        ipv4[3] = P.int_parse(parts[3]);
        return ipv4;
      } else
        throw H.wrapException(P.ArgumentError$("Invalid length for an IPv4!"));
    },
    _asIPv6Bytes: function(address) {
      var j, i, i0, t2,
        t1 = B._asFullIPv6(address),
        sequence = H.stringReplaceAllUnchecked(t1, ":", ""),
        ip = new Uint8Array(16);
      for (t1 = type$.HexCodec._eval$1("Codec.T"), j = 0, i = 0; i <= 30; i = i0) {
        i0 = i + 2;
        t2 = t1._as(C.JSString_methods.substring$2(sequence, i, i0));
        t2 = C.C_HexCodec.get$decoder().convert$1(t2);
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        t2 = t2[0];
        if (j >= 16)
          return H.ioore(ip, j);
        ip[j] = t2;
        ++j;
      }
      return ip;
    },
    _asFullIPv6: function(address) {
      var blocks, containsIPv4Notation, emptyBlockValue, blocksReconstructed, j, i, last, t1, t2, t3, t4, _s1_ = "0";
      if (address === "::")
        return "0000:0000:0000:0000:0000:0000:0000:0000";
      else {
        if (C.JSString_methods.startsWith$1(address, "::") || C.JSString_methods.endsWith$1(address, "::"))
          address = H.stringReplaceAllUnchecked(address, "::", ":");
        blocks = address.split(":");
        containsIPv4Notation = J.contains$1$asx(C.JSArray_methods.get$last(blocks), ".");
        emptyBlockValue = 8 - blocks.length;
        if (containsIPv4Notation)
          emptyBlockValue -= 2;
        blocksReconstructed = P.List_List$filled(8, "0000", false, type$.String);
        for (j = 0, i = 0; i < blocks.length - 1; ++i)
          if (J.get$length$asx(blocks[i]) === 0)
            j = j + emptyBlockValue + 1;
          else {
            if (i >= blocks.length)
              return H.ioore(blocks, i);
            C.JSArray_methods.$indexSet(blocksReconstructed, j, J.padLeft$2$s(blocks[i], 4, _s1_));
            ++j;
          }
        if (containsIPv4Notation) {
          last = B._parseIPv4(C.JSArray_methods.get$last(blocks));
          t1 = type$.JSArray_int;
          t2 = type$.HexCodec._eval$1("Codec.S");
          t3 = t2._as(H.setRuntimeTypeInfo([last[0]], t1));
          t3 = C.JSString_methods.padLeft$2(C.C_HexCodec.get$encoder().convert$1(t3), 2, _s1_);
          t4 = t2._as(H.setRuntimeTypeInfo([last[1]], t1));
          C.JSArray_methods.$indexSet(blocksReconstructed, 6, t3 + C.JSString_methods.padLeft$2(C.C_HexCodec.get$encoder().convert$1(t4), 2, _s1_));
          t4 = t2._as(H.setRuntimeTypeInfo([last[2]], t1));
          t4 = C.JSString_methods.padLeft$2(C.C_HexCodec.get$encoder().convert$1(t4), 2, _s1_);
          t1 = t2._as(H.setRuntimeTypeInfo([last[3]], t1));
          C.JSArray_methods.$indexSet(blocksReconstructed, 7, t4 + C.JSString_methods.padLeft$2(C.C_HexCodec.get$encoder().convert$1(t1), 2, _s1_));
        } else
          C.JSArray_methods.$indexSet(blocksReconstructed, j, J.padLeft$2$s(C.JSArray_methods.get$last(blocks), 4, _s1_));
        return C.JSArray_methods.join$1(blocksReconstructed, ":");
      }
    },
    JsonString: function JsonString() {
    },
    FilterNullList_filterNull_closure: function FilterNullList_filterNull_closure(t0) {
      this.T = t0;
    }
  },
  Z = {
    VarIntExtension_getVarInt: function(_this, index) {
      var value, lengthInBytes, t1, recursive,
        msb = _this.getUint8(index);
      if ((msb & 128) === 0) {
        value = msb;
        lengthInBytes = 1;
      } else if ((msb & 192) === 128) {
        value = ((msb & 63) << 8 | _this.getUint8(index + 1)) >>> 0;
        lengthInBytes = 2;
      } else if ((msb & 224) === 192) {
        value = ((msb & 31) << 16 | C.NativeByteData_methods._getUint16$2(_this, index + 1, false)) >>> 0;
        lengthInBytes = 3;
      } else if ((msb & 240) === 224) {
        value = ((msb & 15) << 24 | C.NativeByteData_methods._getUint16$2(_this, index + 1, false) << 8 | _this.getUint8(index + 3)) >>> 0;
        lengthInBytes = 4;
      } else {
        t1 = msb & 252;
        if (t1 === 240) {
          value = C.NativeByteData_methods._getUint32$2(_this, index + 1, false);
          lengthInBytes = 5;
        } else if (t1 === 244) {
          value = C.NativeByteData_methods.getUint64$1(_this, index + 1);
          lengthInBytes = null;
        } else if (t1 === 248) {
          recursive = Z.VarIntExtension_getVarInt(_this, index + 1);
          value = -1 * recursive.value;
          lengthInBytes = 1 + recursive.lengthInBytes;
        } else {
          if (t1 === 252)
            value = ~t1 >>> 0;
          else
            throw H.wrapException(P.ArgumentError$("No valid VarInt found at index " + index + "!"));
          lengthInBytes = 1;
        }
      }
      return new Z.VarIntResult(value, lengthInBytes);
    },
    VarIntResult: function VarIntResult(t0, t1) {
      this.value = t0;
      this.lengthInBytes = t1;
    }
  },
  O = {
    UdpTransportImp_withRemoteHostLookup: function(cryptStateProvider, pingIntervall, platformOptions, timeout) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_UdpTransport),
        $async$returnValue;
      var $async$UdpTransportImp_withRemoteHostLookup = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$UdpTransportImp_withRemoteHostLookup, $async$completer);
    }
  };
  var holders = [C, H, J, P, W, N, A, R, D, U, S, V, Q, T, G, M, F, X, K, Y, L, B, Z, O];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $and: function(receiver, other) {
      H._asBool(other);
      return other && receiver;
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1: function(receiver, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    _removeWhere$2: function(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      H._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (H.boolConversionCheck(test.call$1(element)))
          retained.push(element);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1: function(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H._arrayInstanceType(receiver);
      return new H.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    join$1: function(receiver, separator) {
      var i,
        list = P.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    take$1: function(receiver, n) {
      return H.SubListIterable$(receiver, 0, H.checkNotNullable(n, "count", type$.int), H._arrayInstanceType(receiver)._precomputed1);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, H._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      H._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("setRange"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    sort$1: function(receiver, compare) {
      var t2,
        t1 = H._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      t2 = compare == null ? J._interceptors_JSArray__compareAny$closure() : compare;
      H.Sort_sort(receiver, t2, t1._precomputed1);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, H._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        H._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asInt(index);
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this.$ti._precomputed1._as(this._current);
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current: function(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      H._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    ceil$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".ceil()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    toRadixString$1: function(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        H.throwExpression(P.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return H.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return H.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + C.JSString_methods.$mul("0", exponent);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mul: function(receiver, other) {
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || false)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    $shl: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $and: function(receiver, other) {
      return (receiver & other) >>> 0;
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSNumNotInt.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    startsWith$1: function(receiver, pattern) {
      var otherLength = pattern.length;
      if (otherLength > receiver.length)
        return false;
      return pattern === receiver.substring(0, otherLength);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2: function(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    contains$1: function(receiver, other) {
      return H.stringContainsUnchecked(receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      H._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >= receiver.length || false)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  H._CastIterableBase.prototype = {
    get$iterator: function(_) {
      var t1 = H._instanceType(this);
      return new H.CastIterator(J.get$iterator$ax(this.get$_source()), t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("CastIterator<1,2>"));
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1: function(_, count) {
      var t1 = H._instanceType(this);
      return H.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    take$1: function(_, count) {
      var t1 = H._instanceType(this);
      return H.CastIterable_CastIterable(J.take$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1: function(_, index) {
      return H._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    toString$0: function(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  H.CastIterator.prototype = {
    moveNext$0: function() {
      return this._source.moveNext$0();
    },
    get$current: function() {
      return this.$ti._rest[1]._as(this._source.get$current());
    },
    $isIterator: 1
  };
  H.CastIterable.prototype = {
    get$_source: function() {
      return this._source;
    }
  };
  H._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  H._CastListBase.prototype = {
    $index: function(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, index));
    },
    $indexSet: function(_, index, value) {
      var t1 = this.$ti;
      J.$indexSet$ax(this._source, H._asInt(index), t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    set$length: function(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    add$1: function(_, value) {
      var t1 = this.$ti;
      J.add$1$ax(this._source, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    addAll$1: function(_, values) {
      var t1 = this.$ti;
      J.addAll$1$ax(this._source, H.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(values), t1._rest[1], t1._precomputed1));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      var t1 = this.$ti;
      J.setRange$4$ax(this._source, start, end, H.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(iterable), t1._rest[1], t1._precomputed1), skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  H.CastList.prototype = {
    get$_source: function() {
      return this._source;
    }
  };
  H.LateError.prototype = {
    toString$0: function(_) {
      var t1 = "LateInitializationError: " + this._message;
      return t1;
    }
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return this.__internal$_string.length;
    },
    $index: function(_, i) {
      return C.JSString_methods.codeUnitAt$1(this.__internal$_string, i);
    }
  };
  H.nullFuture_closure.prototype = {
    call$0: function() {
      var t1 = new P._Future($.Zone__current, type$._Future_Null);
      t1._asyncComplete$1(null);
      return t1;
    },
    $signature: 47
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), H._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    forEach$1: function(_, action) {
      var $length, i, _this = this;
      H._instanceType(_this)._eval$1("~(ListIterable.E)")._as(action);
      $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        action.call$1(_this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    every$1: function(_, test) {
      var $length, i, _this = this;
      H._instanceType(_this)._eval$1("bool(ListIterable.E)")._as(test);
      $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (!H.boolConversionCheck(test.call$1(_this.elementAt$1(0, i))))
          return false;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return true;
    },
    map$1$1: function(_, f, $T) {
      var t1 = H._instanceType(this);
      return new H.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(f), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      $T._as(initialValue);
      H._instanceType(_this)._bind$1($T)._eval$1("1(1,ListIterable.E)")._as(combine);
      $length = _this.get$length(_this);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return value;
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, H._instanceType(this)._eval$1("ListIterable.E"));
    },
    take$1: function(_, count) {
      return H.SubListIterable$(this, 0, H.checkNotNullable(count, "count", type$.int), H._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$of(this, true, H._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.SubListIterable.prototype = {
    get$_endIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1: function(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1: function(_, count) {
      var newStart, endOrLength, _this = this;
      P.RangeError_checkNotNegative(count, "count");
      newStart = _this.__internal$_start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new H.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return H.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    take$1: function(_, count) {
      var endOrLength, t1, newEnd, _this = this;
      P.RangeError_checkNotNegative(count, "count");
      endOrLength = _this._endOrLength;
      t1 = _this.__internal$_start;
      newEnd = t1 + count;
      if (endOrLength == null)
        return H.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      else {
        if (endOrLength < newEnd)
          return _this;
        return H.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      }
    },
    toList$1$growable: function(_, growable) {
      var $length, result, i, _this = this,
        start = _this.__internal$_start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = J.JSArray_JSArray$fixed(0, _this.$ti._precomputed1);
        return t1;
      }
      result = P.List_List$filled($length, t2.elementAt$1(t1, start), false, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  H.ListIterator.prototype = {
    get$current: function() {
      return this.$ti._precomputed1._as(this.__internal$_current);
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      var t1 = H._instanceType(this);
      return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function() {
      return this.$ti._rest[1]._as(this.__internal$_current);
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return new H.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1: function(_, f, $T) {
      var t1 = this.$ti;
      return new H.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (H.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.TakeIterable.prototype = {
    get$iterator: function(_) {
      var t1 = this.__internal$_iterable;
      return new H.TakeIterator(t1.get$iterator(t1), this._takeCount, H._instanceType(this)._eval$1("TakeIterator<1>"));
    }
  };
  H.EfficientLengthTakeIterable.prototype = {
    get$length: function(_) {
      var t1 = this.__internal$_iterable,
        iterableLength = t1.get$length(t1);
      t1 = this._takeCount;
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  H.TakeIterator.prototype = {
    moveNext$0: function() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current: function() {
      if (this._remaining < 0)
        return this.$ti._precomputed1._as(null);
      return this._iterator.get$current();
    }
  };
  H.SkipIterable.prototype = {
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return new H.SkipIterable(this.__internal$_iterable, this._skipCount + count, H._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator: function(_) {
      var t1 = this.__internal$_iterable;
      return new H.SkipIterator(t1.get$iterator(t1), this._skipCount, H._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length: function(_) {
      var t1 = this.__internal$_iterable,
        $length = t1.get$length(t1) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return new H.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  H.SkipIterator.prototype = {
    moveNext$0: function() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.EmptyIterable.prototype = {
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    forEach$1: function(_, action) {
      this.$ti._eval$1("~(1)")._as(action);
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    elementAt$1: function(_, index) {
      throw H.wrapException(P.RangeError$range(index, 0, 0, "index", null));
    },
    map$1$1: function(_, f, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(f);
      return new H.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      $T._as(initialValue);
      this.$ti._bind$1($T)._eval$1("1(1,2)")._as(combine);
      return initialValue;
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return this;
    },
    take$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return this;
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  H.FixedLengthListMixin.prototype = {
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      H.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1: function(receiver, iterable) {
      H.instanceType(receiver)._eval$1("Iterable<FixedLengthListMixin.E>")._as(iterable);
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  };
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H._asInt(index);
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    addAll$1: function(_, iterable) {
      H._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      H._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    }
  };
  H.UnmodifiableListBase.prototype = {};
  H.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  H.ConstantMapView.prototype = {};
  H.ConstantMap.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    get$entries: function() {
      return this.entries$body$ConstantMap(H._instanceType(this)._eval$1("MapEntry<1,2>"));
    },
    entries$body$ConstantMap: function($async$type) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, key, t3;
        return function $async$get$entries($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.get$keys(), t1 = t1.get$iterator(t1), t2 = H._instanceType($async$self), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("MapEntry<1,2>");
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current();
                t3 = $async$self.$index(0, key);
                t3.toString;
                $async$goto = 4;
                return new P.MapEntry(key, t3, t2);
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, $async$type);
    },
    map$2$1: function(_, transform, K2, V2) {
      var result = P.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      this.forEach$1(0, new H.ConstantMap_map_closure(this, H._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), result));
      return result;
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    $isMap: 1
  };
  H.ConstantMap_map_closure.prototype = {
    call$2: function(key, value) {
      var t1 = H._instanceType(this.$this),
        entry = this.transform.call$2(t1._precomputed1._as(key), t1._rest[1]._as(value));
      this.result.$indexSet(0, entry.key, entry.value);
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    containsKey$1: function(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[H._asString(key)];
    },
    forEach$1: function(_, f) {
      var keys, t2, i, key,
        t1 = H._instanceType(this);
      t1._eval$1("~(1,2)")._as(f);
      keys = this._keys;
      for (t2 = keys.length, t1 = t1._rest[1], i = 0; i < t2; ++i) {
        key = keys[i];
        f.call$2(key, t1._as(this._fetch$1(key)));
      }
    },
    get$keys: function() {
      return new H._ConstantMapKeyIterable(this, H._instanceType(this)._eval$1("_ConstantMapKeyIterable<1>"));
    }
  };
  H.ConstantProtoMap.prototype = {
    containsKey$1: function(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return true;
      return this._jsObject.hasOwnProperty(key);
    },
    _fetch$1: function(key) {
      return "__proto__" === key ? this._protoValue : this._jsObject[H._asString(key)];
    }
  };
  H._ConstantMapKeyIterable.prototype = {
    get$iterator: function(_) {
      var t1 = this._map._keys;
      return new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    get$length: function(_) {
      return this._map._keys.length;
    }
  };
  H.GeneralConstantMap.prototype = {
    _getMap$0: function() {
      var t1, _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        t1 = _this.$ti;
        backingMap = new H.JsLinkedHashMap(t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("JsLinkedHashMap<1,2>"));
        H.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    $index: function(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1: function(_, f) {
      this.$ti._eval$1("~(1,2)")._as(f);
      this._getMap$0().forEach$1(0, f);
    },
    get$keys: function() {
      return this._getMap$0().get$keys();
    },
    get$length: function(_) {
      var t1 = this._getMap$0();
      return t1.get$length(t1);
    }
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + this.__js_helper$_message;
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.NullThrownFromJavaScriptException.prototype = {
    toString$0: function(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  H.ExceptionAndStackTrace.prototype = {};
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(type$.Object._as(receiver)) + "'");
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + this.message;
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$keys: function() {
      return new H.LinkedHashMapKeyIterable(this, H._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values: function() {
      var t1 = H._instanceType(this);
      return H.MappedIterable_MappedIterable(this.get$keys(), new H.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1: function(key) {
      var nums;
      if ((key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return this._containsTableEntry$2(nums, key);
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return false;
      return _this.internalFindBucketIndex$2(_this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)), key) >= 0;
    },
    addAll$1: function(_, other) {
      H._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (typeof key == "string") {
        strings = _this._strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(key))
        return t1._rest[1]._as(_this.$index(0, key));
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      if (typeof key == "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this.internalRemove$1(key);
    },
    internalRemove$1: function(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        _this._deleteTableEntry$2(rest, hash);
      return cell.hashMapCellValue;
    },
    clear$0: function(_) {
      var _this = this;
      if (_this.__js_helper$_length > 0) {
        _this._strings = _this._nums = _this.__js_helper$_rest = _this._first = _this._last = null;
        _this.__js_helper$_length = 0;
        _this._modified$0();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = this._getTableCell$2(table, key);
      if (cell == null)
        return null;
      this._unlinkCell$1(cell);
      this._deleteTableEntry$2(table, key);
      return cell.hashMapCellValue;
    },
    _modified$0: function() {
      this._modifications = this._modifications + 1 & 67108863;
    },
    _newLinkedCell$2: function(key, value) {
      var _this = this,
        t1 = H._instanceType(_this),
        cell = new H.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this,
        t2 = H._instanceType(t1);
      return t2._rest[1]._as(t1.$index(0, t2._precomputed1._as(each)));
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  H.JsLinkedHashMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this,
        t2 = H._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      this.$ti._eval$1("~(1)")._as(f);
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.hashMapCellKey);
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function() {
      return this.$ti._precomputed1._as(this.__js_helper$_current);
    },
    moveNext$0: function() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 10
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 37
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H._asString(tag));
    },
    $signature: 34
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion: function() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1: function(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new H._MatchImplementation(m);
    },
    _execGlobal$2: function(string, start) {
      var match,
        regexp = type$.Object._as(this.get$_nativeGlobalVersion());
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new H._MatchImplementation(match);
    },
    $isPattern: 1
  };
  H._MatchImplementation.prototype = {
    get$end: function() {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    group$1: function(index) {
      var t1 = this._match;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $index: function(_, index) {
      var t1 = this._match;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  H._AllMatchesIterator.prototype = {
    get$current: function() {
      return type$.RegExpMatch._as(this.__js_helper$_current);
    },
    moveNext$0: function() {
      var t1, t2, t3, match, nextIndex, _this = this,
        string = _this._string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end();
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t3 = t1 + 1;
              if (t3 < t2) {
                t1 = C.JSString_methods.codeUnitAt$1(string, t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  t1 = C.JSString_methods.codeUnitAt$1(string, t3);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  H.NativeByteBuffer.prototype = {$isByteBuffer: 1};
  H.NativeTypedData.prototype = {
    _invalidPosition$3: function(receiver, position, $length, $name) {
      var t1 = P.RangeError$range(position, 0, $length, $name, null);
      throw H.wrapException(t1);
    },
    _checkPosition$3: function(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isTypedData: 1
  };
  H.NativeByteData.prototype = {
    _getFloat32$2: function(receiver, byteOffset, littleEndian) {
      return receiver.getFloat32(byteOffset, littleEndian);
    },
    _getFloat64$2: function(receiver, byteOffset, littleEndian) {
      return receiver.getFloat64(byteOffset, littleEndian);
    },
    _getInt32$2: function(receiver, byteOffset, littleEndian) {
      return receiver.getInt32(byteOffset, littleEndian);
    },
    _getUint16$2: function(receiver, byteOffset, littleEndian) {
      return receiver.getUint16(byteOffset, littleEndian);
    },
    _getUint32$2: function(receiver, byteOffset, littleEndian) {
      return receiver.getUint32(byteOffset, littleEndian);
    },
    getUint64$2: function(receiver, byteOffset, endian) {
      throw H.wrapException(P.UnsupportedError$("Uint64 accessor not supported by dart2js."));
    },
    getUint64$1: function($receiver, byteOffset) {
      return this.getUint64$2($receiver, byteOffset, C.C_Endian0);
    },
    _setFloat32$3: function(receiver, byteOffset, value, littleEndian) {
      return receiver.setFloat32(byteOffset, value, littleEndian);
    },
    _setFloat64$3: function(receiver, byteOffset, value, littleEndian) {
      return receiver.setFloat64(byteOffset, value, littleEndian);
    },
    _setInt32$3: function(receiver, byteOffset, value, littleEndian) {
      return receiver.setInt32(byteOffset, value, littleEndian);
    },
    _setUint16$3: function(receiver, byteOffset, value, littleEndian) {
      return receiver.setUint16(byteOffset, value, littleEndian);
    },
    _setUint32$3: function(receiver, byteOffset, value, littleEndian) {
      return receiver.setUint32(byteOffset, value, littleEndian);
    },
    setUint8$2: function(receiver, byteOffset, value) {
      return receiver.setUint8(byteOffset, value);
    },
    $isByteData: 1
  };
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asInt(index);
      H._asDouble(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      type$.Iterable_double._as(iterable);
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H._asInt(index);
      H._asInt(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.NativeInt16List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt32List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt8List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint16List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint32List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8ClampedList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8List.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isUint8List: 1
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H.Rti.prototype = {
    _eval$1: function(recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1: function(typeOrTuple) {
      return H._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  H._FunctionParameters.prototype = {};
  H._Type.prototype = {
    toString$0: function(_) {
      return H._rtiToString(this._rti, null);
    },
    $isType: 1
  };
  H._Error.prototype = {
    toString$0: function(_) {
      return this.__rti$_message;
    }
  };
  H._TypeError.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 11
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 76
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 4
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 4
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    },
    cancel$0: function() {
      if (self.setTimeout != null) {
        var t1 = this._handle;
        if (t1 == null)
          return;
        self.clearTimeout(t1);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    }
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.$this._handle = null;
      this.callback.call$0();
    },
    $signature: 0
  };
  P._AsyncAwaitCompleter.prototype = {
    complete$1: function(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(t1._precomputed1._as(value));
      }
    },
    completeError$2: function(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    $isCompleter: 1
  };
  P._awaitOnObject_closure.prototype = {
    call$1: function(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 7
  };
  P._awaitOnObject_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 78
  };
  P._wrapJsFunctionForAsync_closure.prototype = {
    call$2: function(errorCode, result) {
      this.$protected(H._asInt(errorCode), result);
    },
    $signature: 79
  };
  P._asyncStarHelper_closure.prototype = {
    call$0: function() {
      var t1 = this.controller,
        t2 = t1.get$controller(),
        t3 = t2._state;
      if ((t3 & 1) !== 0 ? (t2.get$_subscription()._state & 4) !== 0 : (t3 & 2) === 0) {
        t1.isSuspended = true;
        return;
      }
      this.bodyFunction.call$2(0, null);
    },
    $signature: 0
  };
  P._asyncStarHelper_closure0.prototype = {
    call$1: function(_) {
      var errorCode = this.controller.cancelationFuture != null ? 2 : 0;
      this.bodyFunction.call$2(errorCode, null);
    },
    $signature: 11
  };
  P._AsyncStarStreamController.prototype = {
    get$controller: function() {
      var t1 = this.___AsyncStarStreamController_controller;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("controller")) : t1;
    },
    _AsyncStarStreamController$1: function(body, $T) {
      var _this = this,
        t1 = new P._AsyncStarStreamController__resumeBody(body);
      _this.set$___AsyncStarStreamController_controller(_this.$ti._eval$1("StreamController<1>")._as(P.StreamController_StreamController(new P._AsyncStarStreamController_closure(_this, body), new P._AsyncStarStreamController_closure0(t1), new P._AsyncStarStreamController_closure1(_this, t1), false, $T)));
    },
    set$___AsyncStarStreamController_controller: function(___AsyncStarStreamController_controller) {
      this.___AsyncStarStreamController_controller = this.$ti._eval$1("StreamController<1>?")._as(___AsyncStarStreamController_controller);
    }
  };
  P._AsyncStarStreamController__resumeBody.prototype = {
    call$0: function() {
      P.scheduleMicrotask(new P._AsyncStarStreamController__resumeBody_closure(this.body));
    },
    $signature: 4
  };
  P._AsyncStarStreamController__resumeBody_closure.prototype = {
    call$0: function() {
      this.body.call$2(0, null);
    },
    $signature: 0
  };
  P._AsyncStarStreamController_closure0.prototype = {
    call$0: function() {
      this._resumeBody.call$0();
    },
    $signature: 0
  };
  P._AsyncStarStreamController_closure1.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (t1.isSuspended) {
        t1.isSuspended = false;
        this._resumeBody.call$0();
      }
    },
    $signature: 0
  };
  P._AsyncStarStreamController_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if ((t1.get$controller()._state & 4) === 0) {
        t1.cancelationFuture = new P._Future($.Zone__current, type$._Future_dynamic);
        if (t1.isSuspended) {
          t1.isSuspended = false;
          P.scheduleMicrotask(new P._AsyncStarStreamController__closure(this.body));
        }
        return t1.cancelationFuture;
      }
    },
    $signature: 80
  };
  P._AsyncStarStreamController__closure.prototype = {
    call$0: function() {
      this.body.call$2(2, null);
    },
    $signature: 0
  };
  P._IterationMarker.prototype = {
    toString$0: function(_) {
      return "IterationMarker(" + this.state + ", " + H.S(this.value) + ")";
    },
    get$value: function() {
      return this.value;
    }
  };
  P._SyncStarIterator.prototype = {
    get$current: function() {
      var nested = this._nestedIterator;
      if (nested == null)
        return this.$ti._precomputed1._as(this._async$_current);
      return nested.get$current();
    },
    moveNext$0: function() {
      var t1, t2, value, state, suspendedBodies, inner, _this = this;
      for (t1 = _this.$ti._eval$1("Iterator<1>"); true;) {
        t2 = _this._nestedIterator;
        if (t2 != null)
          if (t2.moveNext$0())
            return true;
          else
            _this.set$_nestedIterator(null);
        value = function(body, SUCCESS, ERROR) {
          var errorValue,
            errorCode = SUCCESS;
          while (true)
            try {
              return body(errorCode, errorValue);
            } catch (error) {
              errorValue = error;
              errorCode = ERROR;
            }
        }(_this._body, 0, 1);
        if (value instanceof P._IterationMarker) {
          state = value.state;
          if (state === 2) {
            suspendedBodies = _this._suspendedBodies;
            if (suspendedBodies == null || suspendedBodies.length === 0) {
              _this.set$_async$_current(null);
              return false;
            }
            if (0 >= suspendedBodies.length)
              return H.ioore(suspendedBodies, -1);
            _this._body = suspendedBodies.pop();
            continue;
          } else {
            t2 = value.value;
            if (state === 3)
              throw t2;
            else {
              inner = t1._as(J.get$iterator$ax(t2));
              if (inner instanceof P._SyncStarIterator) {
                t2 = _this._suspendedBodies;
                if (t2 == null)
                  t2 = _this._suspendedBodies = [];
                C.JSArray_methods.add$1(t2, _this._body);
                _this._body = inner._body;
                continue;
              } else {
                _this.set$_nestedIterator(inner);
                continue;
              }
            }
          }
        } else {
          _this.set$_async$_current(value);
          return true;
        }
      }
      return false;
    },
    set$_async$_current: function(_current) {
      this._async$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_nestedIterator: function(_nestedIterator) {
      this._nestedIterator = this.$ti._eval$1("Iterator<1>?")._as(_nestedIterator);
    },
    $isIterator: 1
  };
  P._SyncStarIterable.prototype = {
    get$iterator: function(_) {
      return new P._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1,
    get$stackTrace: function() {
      return this.stackTrace;
    }
  };
  P._BroadcastStream.prototype = {
    get$isBroadcast: function() {
      return true;
    }
  };
  P._BroadcastSubscription.prototype = {
    _onPause$0: function() {
    },
    _onResume$0: function() {
    },
    set$_async$_next: function(_next) {
      this._async$_next = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_next);
    },
    set$_async$_previous: function(_previous) {
      this._async$_previous = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_previous);
    }
  };
  P._BroadcastStreamController.prototype = {
    set$onPause: function(onPauseHandler) {
      type$.nullable_void_Function._as(onPauseHandler);
      throw H.wrapException(P.UnsupportedError$(string$.Broadc));
    },
    set$onResume: function(onResumeHandler) {
      type$.nullable_void_Function._as(onResumeHandler);
      throw H.wrapException(P.UnsupportedError$(string$.Broadc));
    },
    get$stream: function(_) {
      return new P._BroadcastStream(this, H._instanceType(this)._eval$1("_BroadcastStream<1>"));
    },
    get$_mayAddEvent: function() {
      return this._state < 4;
    },
    _removeListener$1: function(subscription) {
      var previous, next;
      H._instanceType(this)._eval$1("_BroadcastSubscription<1>")._as(subscription);
      previous = subscription._async$_previous;
      next = subscription._async$_next;
      if (previous == null)
        this.set$_firstSubscription(next);
      else
        previous.set$_async$_next(next);
      if (next == null)
        this.set$_lastSubscription(previous);
      else
        next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var t2, t3, t4, subscription, oldLast, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 4) !== 0) {
        t1 = new P._DoneStreamSubscription($.Zone__current, onDone, t1._eval$1("_DoneStreamSubscription<1>"));
        t1._schedule$0();
        return t1;
      }
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = t1._eval$1("_BroadcastSubscription<1>");
      subscription = new P._BroadcastSubscription(_this, P._BufferingStreamSubscription__registerDataHandler(t2, onData, t1._precomputed1), P._BufferingStreamSubscription__registerErrorHandler(t2, onError), P._BufferingStreamSubscription__registerDoneHandler(t2, onDone), t2, t3, t4);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
      t4._as(subscription);
      subscription._eventState = _this._state & 1;
      oldLast = _this._lastSubscription;
      _this.set$_lastSubscription(subscription);
      subscription.set$_async$_next(null);
      subscription.set$_async$_previous(oldLast);
      if (oldLast == null)
        _this.set$_firstSubscription(subscription);
      else
        oldLast.set$_async$_next(subscription);
      if (_this._firstSubscription == _this._lastSubscription)
        P._runGuarded(_this.onListen);
      return subscription;
    },
    _recordCancel$1: function(sub) {
      var _this = this,
        t1 = H._instanceType(_this);
      sub = t1._eval$1("_BroadcastSubscription<1>")._as(t1._eval$1("StreamSubscription<1>")._as(sub));
      if (sub._async$_next === sub)
        return null;
      t1 = sub._eventState;
      if ((t1 & 2) !== 0)
        sub._eventState = t1 | 4;
      else {
        _this._removeListener$1(sub);
        if ((_this._state & 2) === 0 && _this._firstSubscription == null)
          _this._callOnCancel$0();
      }
      return null;
    },
    _recordPause$1: function(subscription) {
      H._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _recordResume$1: function(subscription) {
      H._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _addEventError$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add new events after calling close");
      return new P.StateError("Cannot add new events while doing an addStream");
    },
    add$1: function(_, data) {
      var _this = this;
      H._instanceType(_this)._precomputed1._as(data);
      if (!_this.get$_mayAddEvent())
        throw H.wrapException(_this._addEventError$0());
      _this._sendData$1(data);
    },
    close$0: function(_) {
      var t1, doneFuture, _this = this;
      if ((_this._state & 4) !== 0) {
        t1 = _this._doneFuture;
        t1.toString;
        return t1;
      }
      if (!_this.get$_mayAddEvent())
        throw H.wrapException(_this._addEventError$0());
      _this._state |= 4;
      doneFuture = _this._doneFuture;
      if (doneFuture == null)
        doneFuture = _this._doneFuture = new P._Future($.Zone__current, type$._Future_void);
      _this._sendDone$0();
      return doneFuture;
    },
    _addError$2: function(error, stackTrace) {
      this._sendError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    _forEachListener$1: function(action) {
      var t1, subscription, id, next, _this = this;
      H._instanceType(_this)._eval$1("~(_BufferingStreamSubscription<1>)")._as(action);
      t1 = _this._state;
      if ((t1 & 2) !== 0)
        throw H.wrapException(P.StateError$(string$.Cannot));
      subscription = _this._firstSubscription;
      if (subscription == null)
        return;
      id = t1 & 1;
      _this._state = t1 ^ 3;
      for (; subscription != null;) {
        t1 = subscription._eventState;
        if ((t1 & 1) === id) {
          subscription._eventState = t1 | 2;
          action.call$1(subscription);
          t1 = subscription._eventState ^= 1;
          next = subscription._async$_next;
          if ((t1 & 4) !== 0)
            _this._removeListener$1(subscription);
          subscription._eventState &= 4294967293;
          subscription = next;
        } else
          subscription = subscription._async$_next;
      }
      _this._state &= 4294967293;
      if (_this._firstSubscription == null)
        _this._callOnCancel$0();
    },
    _callOnCancel$0: function() {
      if ((this._state & 4) !== 0) {
        var doneFuture = this._doneFuture;
        if (doneFuture._state === 0)
          doneFuture._asyncComplete$1(null);
      }
      P._runGuarded(this.onCancel);
    },
    set$onListen: function(onListen) {
      this.onListen = type$.nullable_void_Function._as(onListen);
    },
    set$onCancel: function(onCancel) {
      this.onCancel = type$.nullable_void_Function._as(onCancel);
    },
    set$_firstSubscription: function(_firstSubscription) {
      this._firstSubscription = H._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_firstSubscription);
    },
    set$_lastSubscription: function(_lastSubscription) {
      this._lastSubscription = H._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_lastSubscription);
    },
    $isEventSink: 1,
    $isStreamSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._SyncBroadcastStreamController.prototype = {
    get$_mayAddEvent: function() {
      return P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
    },
    _addEventError$0: function() {
      if ((this._state & 2) !== 0)
        return new P.StateError(string$.Cannot);
      return this.super$_BroadcastStreamController$_addEventError();
    },
    _sendData$1: function(data) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(data);
      t2 = _this._firstSubscription;
      if (t2 == null)
        return;
      if (t2 === _this._lastSubscription) {
        _this._state |= 2;
        t1._eval$1("_BroadcastSubscription<1>")._as(t2)._add$1(data);
        _this._state &= 4294967293;
        if (_this._firstSubscription == null)
          _this._callOnCancel$0();
        return;
      }
      _this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(_this, data));
    },
    _sendError$2: function(error, stackTrace) {
      if (this._firstSubscription == null)
        return;
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
    },
    _sendDone$0: function() {
      var _this = this;
      if (_this._firstSubscription != null)
        _this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(_this));
      else
        _this._doneFuture._asyncComplete$1(null);
    }
  };
  P._SyncBroadcastStreamController__sendData_closure.prototype = {
    call$1: function(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._add$1(this.data);
    },
    $signature: function() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  P._SyncBroadcastStreamController__sendError_closure.prototype = {
    call$1: function(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._addError$2(this.error, this.stackTrace);
    },
    $signature: function() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  P._SyncBroadcastStreamController__sendDone_closure.prototype = {
    call$1: function(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._close$0();
    },
    $signature: function() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  P._AsyncBroadcastStreamController.prototype = {
    _sendData$1: function(data) {
      var subscription,
        t1 = this.$ti;
      t1._precomputed1._as(data);
      for (subscription = this._firstSubscription, t1 = t1._eval$1("_DelayedData<1>"); subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new P._DelayedData(data, t1));
    },
    _sendError$2: function(error, stackTrace) {
      var subscription;
      for (subscription = this._firstSubscription; subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new P._DelayedError(error, stackTrace));
    },
    _sendDone$0: function() {
      var subscription = this._firstSubscription;
      if (subscription != null)
        for (; subscription != null; subscription = subscription._async$_next)
          subscription._addPending$1(C.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  };
  P.Future_Future$delayed_closure.prototype = {
    call$0: function() {
      this.result._complete$1(this.T._as(null));
    },
    $signature: 0
  };
  P.Future_wait__error_set.prototype = {
    call$1: function(t1) {
      return this._box_0._error = t1;
    },
    $signature: 99
  };
  P.Future_wait__stackTrace_set.prototype = {
    call$1: function(t1) {
      return this._box_0._stackTrace = type$.StackTrace._as(t1);
    },
    $signature: 27
  };
  P.Future_wait__error_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._error;
      return t1 == null ? H.throwExpression(H.LateError$localNI("error")) : t1;
    },
    $signature: 28
  };
  P.Future_wait__stackTrace_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._stackTrace;
      return t1 == null ? H.throwExpression(H.LateError$localNI("stackTrace")) : t1;
    },
    $signature: 29
  };
  P.Future_wait_handleError.prototype = {
    call$2: function(theError, theStackTrace) {
      var t1, t2, _this = this;
      type$.Object._as(theError);
      type$.StackTrace._as(theStackTrace);
      t1 = _this._box_0;
      t2 = --t1.remaining;
      if (t1.values != null) {
        t1.values = null;
        if (t1.remaining === 0 || _this.eagerError)
          _this._future._completeError$2(theError, theStackTrace);
        else {
          _this._error_set.call$1(theError);
          _this._stackTrace_set.call$1(theStackTrace);
        }
      } else if (t2 === 0 && !_this.eagerError)
        _this._future._completeError$2(_this._error_get.call$0(), _this._stackTrace_get.call$0());
    },
    $signature: 3
  };
  P.Future_wait_closure.prototype = {
    call$1: function(value) {
      var valueList, t2, _this = this,
        t1 = _this.T;
      t1._as(value);
      t2 = _this._box_0;
      --t2.remaining;
      valueList = t2.values;
      if (valueList != null) {
        J.$indexSet$ax(valueList, _this.pos, value);
        if (t2.remaining === 0)
          _this._future._completeWithValue$1(P.List_List$from(valueList, true, t1));
      } else if (t2.remaining === 0 && !_this.eagerError)
        _this._future._completeError$2(_this._error_get.call$0(), _this._stackTrace_get.call$0());
    },
    $signature: function() {
      return this.T._eval$1("Null(0)");
    }
  };
  P.Future_any_onValue.prototype = {
    call$1: function(value) {
      var t1;
      this.T._as(value);
      t1 = this.completer;
      if (t1.future._state === 0)
        t1.complete$1(value);
    },
    $signature: function() {
      return this.T._eval$1("~(0)");
    }
  };
  P.Future_any_onError.prototype = {
    call$2: function(error, stack) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stack);
      t1 = this.completer;
      if (t1.future._state === 0)
        t1.completeError$2(error, stack);
    },
    $signature: 3
  };
  P.TimeoutException.prototype = {
    toString$0: function(_) {
      var result = "TimeoutException after " + this.duration.toString$0(0);
      result = result + ": " + this.message;
      return result;
    }
  };
  P._Completer.prototype = {
    completeError$2: function(error, stackTrace) {
      H.checkNotNullable(error, "error", type$.Object);
      if (this.future._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      if (stackTrace == null)
        stackTrace = P.AsyncError_defaultStackTrace(error);
      this._completeError$2(error, stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  P._AsyncCompleter.prototype = {
    complete$1: function(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if (t2._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    complete$0: function() {
      return this.complete$1(null);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  };
  P._SyncCompleter.prototype = {
    complete$1: function(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if (t2._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t2._complete$1(t1._eval$1("1/")._as(value));
    },
    _completeError$2: function(error, stackTrace) {
      this.future._completeError$2(error, stackTrace);
    }
  };
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = this.$ti._eval$1("2/"),
        t5 = this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        return t4._as(t5.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace));
      else
        return t4._as(t5.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2));
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = new P._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    then$1: function(f) {
      return this.then$1$2$onError(f, null, type$.dynamic);
    },
    _thenAwait$1$2: function(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new P._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new P._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    whenComplete$1: function(action) {
      var t1, result;
      type$.dynamic_Function._as(action);
      t1 = this.$ti;
      result = new P._Future($.Zone__current, t1);
      this._addListener$1(new P._FutureListener(result, 8, action, null, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 1) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 1) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0: function() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1: function(source) {
      var e, s, exception, _this = this;
      _this._state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(_this), new P._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1: function(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          P._Future__chainCoreFuture(value, _this);
        else
          _this._chainForeignFuture$1(value);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 4;
        _this._resultOrListeners = value;
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 4;
      _this._resultOrListeners = value;
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, t1, _this = this;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      listeners = _this._removeListeners$0();
      t1 = P.AsyncError$(error, stackTrace);
      _this._state = 8;
      _this._resultOrListeners = t1;
      P._Future__propagateToListeners(_this, listeners);
    },
    _asyncComplete$1: function(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1: function(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state = 1;
      P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        if (value._state === 8) {
          _this._state = 1;
          P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__chainFuture_closure(_this, value)));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._state = 1;
      P._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new P._Future__asyncCompleteError_closure(this, error, stackTrace)));
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state = 0;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 11
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 18
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  P._Future__asyncCompleteWithValue_closure.prototype = {
    call$0: function() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof P._Future && completeResult._state >= 4) {
        if (completeResult._state === 8) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 72
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = P.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    get$isBroadcast: function() {
      return false;
    },
    map$1$1: function(_, convert, $S) {
      var t1 = H._instanceType(this);
      return new P._MapStream(t1._bind$1($S)._eval$1("1(Stream.T)")._as(convert), this, t1._eval$1("@<Stream.T>")._bind$1($S)._eval$1("_MapStream<1,2>"));
    },
    map$1: function($receiver, convert) {
      return this.map$1$1($receiver, convert, type$.dynamic);
    },
    forEach$1: function(_, action) {
      var future, subscription;
      H._instanceType(this)._eval$1("~(Stream.T)")._as(action);
      future = new P._Future($.Zone__current, type$._Future_dynamic);
      subscription = this.listen$4$cancelOnError$onDone$onError(null, true, new P.Stream_forEach_closure(future), future.get$_completeError());
      subscription.onData$1(new P.Stream_forEach_closure0(this, action, subscription, future));
      return future;
    },
    get$length: function(_) {
      var t1 = {},
        future = new P._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty: function(_) {
      var future = new P._Future($.Zone__current, type$._Future_bool),
        subscription = this.listen$4$cancelOnError$onDone$onError(null, true, new P.Stream_isEmpty_closure(future), future.get$_completeError());
      subscription.onData$1(new P.Stream_isEmpty_closure0(this, subscription, future));
      return future;
    },
    timeout$2$onTimeout: function(timeLimit, onTimeout) {
      var t3, zone, _this = this, _null = null, t1 = {},
        t2 = H._instanceType(_this);
      t2._eval$1("~(EventSink<Stream.T>)?")._as(onTimeout);
      t1.controller = null;
      t3 = _this.get$isBroadcast() ? t1.controller = new P._SyncBroadcastStreamController(_null, _null, t2._eval$1("_SyncBroadcastStreamController<Stream.T>")) : t1.controller = new P._SyncStreamController(_null, _null, _null, _null, t2._eval$1("_SyncStreamController<Stream.T>"));
      zone = $.Zone__current;
      t1.timeoutCallback = null;
      t1.timeoutCallback = new P.Stream_timeout_closure(t1, _this, new P._ControllerEventSinkWrapper(_null, t2._eval$1("_ControllerEventSinkWrapper<Stream.T>")), zone, type$.$env_1_1_void._bind$1(t2._eval$1("EventSink<Stream.T>"))._eval$1("1(2)")._as(onTimeout));
      t3.set$onListen(new P.Stream_timeout_closure0(t1, _this, zone, timeLimit));
      t1 = t1.controller;
      return t1.get$stream(t1);
    }
  };
  P.Stream_forEach_closure.prototype = {
    call$0: function() {
      this.future._complete$1(null);
    },
    $signature: 0
  };
  P.Stream_forEach_closure0.prototype = {
    call$1: function(element) {
      var _this = this;
      P._runUserCode(new P.Stream_forEach__closure(_this.action, H._instanceType(_this.$this)._eval$1("Stream.T")._as(element)), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(_this.subscription, _this.future), type$.void);
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  P.Stream_forEach__closure.prototype = {
    call$0: function() {
      return this.action.call$1(this.element);
    },
    $signature: 0
  };
  P.Stream_forEach__closure0.prototype = {
    call$1: function(_) {
    },
    $signature: 73
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      H._instanceType(this.$this)._eval$1("Stream.T")._as(_);
      ++this._box_0.count;
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  P.Stream_isEmpty_closure.prototype = {
    call$0: function() {
      this.future._complete$1(true);
    },
    $signature: 0
  };
  P.Stream_isEmpty_closure0.prototype = {
    call$1: function(_) {
      H._instanceType(this.$this)._eval$1("Stream.T")._as(_);
      P._cancelAndValue(this.subscription, this.future, false);
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  P.Stream_timeout_closure.prototype = {
    call$0: function() {
      var _this = this,
        t1 = _this.wrapper;
      t1._async$_sink = _this._box_1.controller;
      _this.zone.runUnaryGuarded$1$2(_this.registeredOnTimeout, t1, H._instanceType(_this.$this)._eval$1("_ControllerEventSinkWrapper<Stream.T>"));
      t1._async$_sink = null;
    },
    $signature: 0
  };
  P.Stream_timeout_closure0.prototype = {
    call$0: function() {
      var t4, subscription, t5, _this = this, t1 = {},
        t2 = _this.timeLimit,
        t3 = _this._box_1;
      t1.timer = P.Timer__createTimer(t2, type$.void_Function._as(t3.timeoutCallback));
      t4 = _this.$this;
      subscription = t4.listen$1(null);
      t5 = _this.zone;
      subscription.onData$1(new P.Stream_timeout__closure(t1, t3, t4, t5, t2));
      subscription.onError$1(0, new P.Stream_timeout__closure0(t1, t3, t5, t2));
      subscription.onDone$1(new P.Stream_timeout__closure1(t1, t3));
      t3.controller.set$onCancel(new P.Stream_timeout__closure2(t1, subscription));
      if (!t4.get$isBroadcast()) {
        t4 = t3.controller;
        t4.set$onPause(new P.Stream_timeout__closure3(t1, subscription));
        t4.set$onResume(new P.Stream_timeout__closure4(t1, t3, subscription, t5, t2));
      }
    },
    $signature: 0
  };
  P.Stream_timeout__closure.prototype = {
    call$1: function($event) {
      var t1, t2, _this = this;
      H._instanceType(_this.$this)._eval$1("Stream.T")._as($event);
      t1 = _this._box_0;
      t1.timer.cancel$0();
      t2 = _this._box_1;
      t1.timer = P.Timer__createTimer(_this.timeLimit, type$.void_Function._as(t2.timeoutCallback));
      t2.controller.add$1(0, $event);
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  P.Stream_timeout__closure0.prototype = {
    call$2: function(error, stackTrace) {
      var t1, t2;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this._box_0;
      t1.timer.cancel$0();
      t2 = this._box_1;
      t1.timer = P.Timer__createTimer(this.timeLimit, type$.void_Function._as(t2.timeoutCallback));
      t2.controller._addError$2(error, stackTrace);
    },
    $signature: 18
  };
  P.Stream_timeout__closure1.prototype = {
    call$0: function() {
      this._box_0.timer.cancel$0();
      this._box_1.controller.close$0(0);
    },
    $signature: 0
  };
  P.Stream_timeout__closure2.prototype = {
    call$0: function() {
      this._box_0.timer.cancel$0();
      return this.subscription.cancel$0();
    },
    $signature: 74
  };
  P.Stream_timeout__closure3.prototype = {
    call$0: function() {
      this._box_0.timer.cancel$0();
      this.subscription.pause$0();
    },
    $signature: 0
  };
  P.Stream_timeout__closure4.prototype = {
    call$0: function() {
      var _this = this;
      _this.subscription.resume$0();
      _this._box_0.timer = P.Timer__createTimer(_this.timeLimit, type$.void_Function._as(_this._box_1.timeoutCallback));
    },
    $signature: 0
  };
  P.StreamSubscription.prototype = {};
  P.StreamView.prototype = {
    get$isBroadcast: function() {
      return this._stream.get$isBroadcast();
    },
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._stream.listen$4$cancelOnError$onDone$onError(H._instanceType(this)._eval$1("~(StreamView.T)?")._as(onData), cancelOnError, type$.nullable_void_Function._as(onDone), onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }
  };
  P.StreamSink.prototype = {$isEventSink: 1};
  P.StreamTransformerBase.prototype = {$isStreamTransformer: 1};
  P._ControllerEventSinkWrapper.prototype = {$isEventSink: 1};
  P._StreamController.prototype = {
    get$stream: function(_) {
      return new P._ControllerStream(this, H._instanceType(this)._eval$1("_ControllerStream<1>"));
    },
    get$_pendingEvents: function() {
      var t1, _this = this;
      if ((_this._state & 8) === 0)
        return H._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(_this._varData);
      t1 = H._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>?")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).varData);
    },
    _ensurePendingEvents$0: function() {
      var events, t1, state, _this = this;
      if ((_this._state & 8) === 0) {
        events = _this._varData;
        if (events == null)
          events = _this._varData = new P._StreamImplEvents(H._instanceType(_this)._eval$1("_StreamImplEvents<1>"));
        return H._instanceType(_this)._eval$1("_StreamImplEvents<1>")._as(events);
      }
      t1 = H._instanceType(_this);
      state = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      events = state.varData;
      if (events == null)
        events = state.varData = new P._StreamImplEvents(t1._eval$1("_StreamImplEvents<1>"));
      return t1._eval$1("_StreamImplEvents<1>")._as(events);
    },
    get$_subscription: function() {
      var varData = this._varData;
      if ((this._state & 8) !== 0)
        varData = type$._StreamControllerAddStreamState_nullable_Object._as(varData).varData;
      return H._instanceType(this)._eval$1("_ControllerSubscription<1>")._as(varData);
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    addStream$2$cancelOnError: function(source, cancelOnError) {
      var t2, t3, t4, t5, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("Stream<1>")._as(source);
      t2 = _this._state;
      if (t2 >= 4)
        throw H.wrapException(_this._badEventState$0());
      if ((t2 & 2) !== 0) {
        t1 = new P._Future($.Zone__current, type$._Future_dynamic);
        t1._asyncComplete$1(null);
        return t1;
      }
      t2 = _this._varData;
      t3 = new P._Future($.Zone__current, type$._Future_dynamic);
      t4 = source.listen$4$cancelOnError$onDone$onError(_this.get$_add(), false, _this.get$_close(), _this.get$_addError());
      t5 = _this._state;
      if ((t5 & 1) !== 0 ? (_this.get$_subscription()._state & 4) !== 0 : (t5 & 2) === 0)
        t4.pause$0();
      _this._varData = new P._StreamControllerAddStreamState(t2, t3, t4, t1._eval$1("_StreamControllerAddStreamState<1>"));
      _this._state |= 8;
      return t3;
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new P._Future($.Zone__current, type$._Future_void);
      return t1;
    },
    add$1: function(_, value) {
      var _this = this;
      H._instanceType(_this)._precomputed1._as(value);
      if (_this._state >= 4)
        throw H.wrapException(_this._badEventState$0());
      _this._add$1(value);
    },
    addError$2: function(error, stackTrace) {
      var t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      H.checkNotNullable(error, "error", t1);
      if (this._state >= 4)
        throw H.wrapException(this._badEventState$0());
      if (stackTrace == null)
        stackTrace = P.AsyncError_defaultStackTrace(error);
      this._addError$2(error, stackTrace);
    },
    addError$1: function(error) {
      return this.addError$2(error, null);
    },
    close$0: function(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw H.wrapException(_this._badEventState$0());
      t1 = _this._state = t1 | 4;
      if ((t1 & 1) !== 0)
        _this._sendDone$0();
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      return _this._ensureDoneFuture$0();
    },
    _add$1: function(value) {
      var t2, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(value);
      t2 = _this._state;
      if ((t2 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t2 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, t1._eval$1("_DelayedData<1>")));
    },
    _addError$2: function(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace));
    },
    _close$0: function() {
      var _this = this,
        addState = H._instanceType(_this)._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      _this._varData = addState.varData;
      _this._state &= 4294967287;
      addState.addStreamFuture._asyncComplete$1(null);
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var subscription, pendingEvents, t2, addState, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      subscription = P._ControllerSubscription$(_this, onData, onError, onDone, cancelOnError, t1._precomputed1);
      pendingEvents = _this.get$_pendingEvents();
      t2 = _this._state |= 1;
      if ((t2 & 8) !== 0) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState.varData = subscription;
        addState.addSubscription.resume$0();
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var result, onCancel, cancelResult, e, s, exception, result0, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if ((_this._state & 8) !== 0)
        result = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).cancel$0();
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (type$.Future_void._is(cancelResult))
              result = cancelResult;
          } catch (exception) {
            e = H.unwrapException(exception);
            s = H.getTraceFromException(exception);
            result0 = new P._Future($.Zone__current, type$._Future_void);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new P._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1: function(subscription) {
      var _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).addSubscription.pause$0();
      P._runGuarded(_this.onPause);
    },
    _recordResume$1: function(subscription) {
      var _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).addSubscription.resume$0();
      P._runGuarded(_this.onResume);
    },
    set$onListen: function(onListen) {
      this.onListen = type$.nullable_void_Function._as(onListen);
    },
    set$onPause: function(onPause) {
      this.onPause = type$.nullable_void_Function._as(onPause);
    },
    set$onResume: function(onResume) {
      this.onResume = type$.nullable_void_Function._as(onResume);
    },
    set$onCancel: function(onCancel) {
      this.onCancel = type$.nullable_void_Function._as(onCancel);
    },
    $isEventSink: 1,
    $isStreamSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._StreamController__subscribe_closure.prototype = {
    call$0: function() {
      P._runGuarded(this.$this.onListen);
    },
    $signature: 0
  };
  P._StreamController__recordCancel_complete.prototype = {
    call$0: function() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && doneFuture._state === 0)
        doneFuture._asyncComplete$1(null);
    },
    $signature: 0
  };
  P._SyncStreamControllerDispatch.prototype = {
    _sendData$1: function(data) {
      this.$ti._precomputed1._as(data);
      this.get$_subscription()._add$1(data);
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0: function() {
      this.get$_subscription()._close$0();
    }
  };
  P._AsyncStreamControllerDispatch.prototype = {
    _sendData$1: function(data) {
      var t1 = this.$ti;
      t1._precomputed1._as(data);
      this.get$_subscription()._addPending$1(new P._DelayedData(data, t1._eval$1("_DelayedData<1>")));
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  };
  P._AsyncStreamController.prototype = {};
  P._SyncStreamController.prototype = {};
  P._ControllerStream.prototype = {
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof P._ControllerStream && other._async$_controller === this._async$_controller;
    }
  };
  P._ControllerSubscription.prototype = {
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: function() {
      this._async$_controller._recordPause$1(this);
    },
    _onResume$0: function() {
      this._async$_controller._recordResume$1(this);
    }
  };
  P._AddStreamState.prototype = {
    cancel$0: function() {
      var cancel = this.addSubscription.cancel$0();
      return cancel.whenComplete$1(new P._AddStreamState_cancel_closure(this));
    }
  };
  P._AddStreamState_cancel_closure.prototype = {
    call$0: function() {
      this.$this.addStreamFuture._asyncComplete$1(null);
    },
    $signature: 4
  };
  P._StreamControllerAddStreamState.prototype = {};
  P._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1: function(pendingEvents) {
      var _this = this;
      H._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(pendingEvents);
      if (pendingEvents == null)
        return;
      _this.set$_pending(pendingEvents);
      if (pendingEvents.lastPendingEvent != null) {
        _this._state = (_this._state | 64) >>> 0;
        pendingEvents.schedule$1(_this);
      }
    },
    onData$1: function(handleData) {
      var t1 = H._instanceType(this);
      this.set$_onData(P._BufferingStreamSubscription__registerDataHandler(this._zone, t1._eval$1("~(_BufferingStreamSubscription.T)?")._as(handleData), t1._eval$1("_BufferingStreamSubscription.T")));
    },
    onError$1: function(_, handleError) {
      this._onError = P._BufferingStreamSubscription__registerErrorHandler(this._zone, handleError);
    },
    onDone$1: function(handleDone) {
      this.set$_async$_onDone(P._BufferingStreamSubscription__registerDoneHandler(this._zone, type$.nullable_void_Function._as(handleDone)));
    },
    pause$0: function() {
      var t2, t3, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 128 | 4) >>> 0;
      _this._state = t2;
      if (t1 < 128) {
        t3 = _this._pending;
        if (t3 != null)
          if (t3._state === 1)
            t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 32) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    resume$0: function() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 = _this._state = t1 - 128;
        if (t1 < 128)
          if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent != null)
            _this._pending.schedule$1(_this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 32) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
      }
    },
    cancel$0: function() {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    _cancel$0: function() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 64) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        _this.set$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _add$1: function(data) {
      var t2, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("_BufferingStreamSubscription.T")._as(data);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 32)
        _this._sendData$1(data);
      else
        _this._addPending$1(new P._DelayedData(data, t1._eval$1("_DelayedData<_BufferingStreamSubscription.T>")));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace));
    },
    _close$0: function() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 32)
        _this._sendDone$0();
      else
        _this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: function() {
    },
    _onResume$0: function() {
    },
    _onCancel$0: function() {
      return null;
    },
    _addPending$1: function($event) {
      var _this = this,
        t1 = H._instanceType(_this),
        pending = t1._eval$1("_StreamImplEvents<_BufferingStreamSubscription.T>?")._as(_this._pending);
      if (pending == null)
        pending = new P._StreamImplEvents(t1._eval$1("_StreamImplEvents<_BufferingStreamSubscription.T>"));
      _this.set$_pending(pending);
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        _this._state = t1;
        if (t1 < 128)
          pending.schedule$1(_this);
      }
    },
    _sendData$1: function(data) {
      var t2, _this = this,
        t1 = H._instanceType(_this)._eval$1("_BufferingStreamSubscription.T");
      t1._as(data);
      t2 = _this._state;
      _this._state = (t2 | 32) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._onData, data, t1);
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var cancelFuture, _this = this,
        t1 = _this._state,
        t2 = new P._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._cancel$0();
        cancelFuture = _this._cancelFuture;
        if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
          cancelFuture.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var cancelFuture, _this = this,
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1, _this = this;
      type$.void_Function._as(callback);
      t1 = _this._state;
      _this._state = (t1 | 32) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t2, isInputPaused, _this = this,
        t1 = _this._state;
      if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent == null) {
        t1 = _this._state = (t1 & 4294967231) >>> 0;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = _this._pending;
            t2 = t2 == null ? null : t2.lastPendingEvent == null;
            t2 = t2 !== false;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          _this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = (_this._state & 4294967263) >>> 0;
        _this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        _this._pending.schedule$1(_this);
    },
    set$_onData: function(_onData) {
      this._onData = H._instanceType(this)._eval$1("~(_BufferingStreamSubscription.T)")._as(_onData);
    },
    set$_async$_onDone: function(_onDone) {
      this._async$_onDone = type$.void_Function._as(_onDone);
    },
    set$_pending: function(_pending) {
      this._pending = H._instanceType(this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(_pending);
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0: function() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = type$.Object;
      t4 = t1._zone;
      if (type$.void_Function_Object_StackTrace._is(onError))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, type$.StackTrace);
      else
        t4.runUnaryGuarded$1$2(type$.void_Function_Object._as(onError), t2, t3);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  P._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._async$_onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  P._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = H._instanceType(this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return this._async$_controller._subscribe$4(t1._eval$1("~(1)?")._as(onData), onError, onDone, cancelOnError === true);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }
  };
  P._DelayedEvent.prototype = {
    set$next: function(next) {
      this.next = type$.nullable__DelayedEvent_dynamic._as(next);
    },
    get$next: function() {
      return this.next;
    }
  };
  P._DelayedData.prototype = {
    perform$1: function(dispatch) {
      this.$ti._eval$1("_EventDispatch<1>")._as(dispatch)._sendData$1(this.value);
    },
    get$value: function() {
      return this.value;
    }
  };
  P._DelayedError.prototype = {
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  };
  P._DelayedDone.prototype = {
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return null;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1
  };
  P._PendingEvents.prototype = {
    schedule$1: function(dispatch) {
      var t1, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    }
  };
  P._PendingEvents_schedule_closure.prototype = {
    call$0: function() {
      var t2, $event, nextEvent,
        t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t2 = t1.$ti._eval$1("_EventDispatch<1>")._as(this.dispatch);
      $event = t1.firstPendingEvent;
      nextEvent = $event.get$next();
      t1.firstPendingEvent = nextEvent;
      if (nextEvent == null)
        t1.lastPendingEvent = null;
      $event.perform$1(t2);
    },
    $signature: 0
  };
  P._StreamImplEvents.prototype = {
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var _this = this,
        lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next($event);
        _this.lastPendingEvent = $event;
      }
    }
  };
  P._DoneStreamSubscription.prototype = {
    _schedule$0: function() {
      var _this = this;
      if ((_this._state & 2) !== 0)
        return;
      P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(_this.get$_sendDone()));
      _this._state = (_this._state | 2) >>> 0;
    },
    onData$1: function(handleData) {
      this.$ti._eval$1("~(1)?")._as(handleData);
    },
    onError$1: function(_, handleError) {
    },
    onDone$1: function(handleDone) {
      this.set$_async$_onDone(type$.nullable_void_Function._as(handleDone));
    },
    pause$0: function() {
      this._state += 4;
    },
    resume$0: function() {
      var t1 = this._state;
      if (t1 >= 4) {
        t1 = this._state = t1 - 4;
        if (t1 < 4 && (t1 & 1) === 0)
          this._schedule$0();
      }
    },
    cancel$0: function() {
      return $.$get$Future__nullFuture();
    },
    _sendDone$0: function() {
      var doneHandler, _this = this,
        t1 = _this._state = (_this._state & 4294967293) >>> 0;
      if (t1 >= 4)
        return;
      _this._state = (t1 | 1) >>> 0;
      doneHandler = _this._async$_onDone;
      if (doneHandler != null)
        _this._zone.runGuarded$1(doneHandler);
    },
    set$_async$_onDone: function(_onDone) {
      this._async$_onDone = type$.nullable_void_Function._as(_onDone);
    },
    $isStreamSubscription: 1
  };
  P._StreamIterator.prototype = {
    get$current: function() {
      var _this = this;
      if (_this._async$_hasValue)
        return _this.$ti._precomputed1._as(_this._stateData);
      return _this.$ti._precomputed1._as(null);
    },
    moveNext$0: function() {
      var future, _this = this,
        subscription = _this._subscription;
      if (subscription != null) {
        if (_this._async$_hasValue) {
          future = new P._Future($.Zone__current, type$._Future_bool);
          _this._stateData = future;
          _this._async$_hasValue = false;
          subscription.resume$0();
          return future;
        }
        throw H.wrapException(P.StateError$("Already waiting for next."));
      }
      return _this._initializeOrDone$0();
    },
    _initializeOrDone$0: function() {
      var future, subscription, _this = this,
        stateData = _this._stateData;
      if (stateData != null) {
        _this.$ti._eval$1("Stream<1>")._as(stateData);
        future = new P._Future($.Zone__current, type$._Future_bool);
        _this._stateData = future;
        subscription = stateData.listen$4$cancelOnError$onDone$onError(_this.get$_onData(), true, _this.get$_async$_onDone(), _this.get$_onError());
        if (_this._stateData != null)
          _this.set$_subscription(subscription);
        return future;
      }
      return $.$get$Future__falseFuture();
    },
    cancel$0: function() {
      var _this = this,
        subscription = _this._subscription,
        stateData = _this._stateData;
      _this._stateData = null;
      if (subscription != null) {
        _this.set$_subscription(null);
        if (!_this._async$_hasValue)
          type$._Future_bool._as(stateData)._asyncComplete$1(false);
        else
          _this._async$_hasValue = false;
        return subscription.cancel$0();
      }
      return $.$get$Future__nullFuture();
    },
    _onData$1: function(data) {
      var moveNextFuture, t1, _this = this;
      _this.$ti._precomputed1._as(data);
      if (_this._subscription == null)
        return;
      moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this._stateData = data;
      _this._async$_hasValue = true;
      moveNextFuture._complete$1(true);
      if (_this._async$_hasValue) {
        t1 = _this._subscription;
        if (t1 != null)
          t1.pause$0();
      }
    },
    _onError$2: function(error, stackTrace) {
      var subscription, moveNextFuture, _this = this;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      subscription = _this._subscription;
      moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this.set$_subscription(null);
      _this._stateData = null;
      if (subscription != null)
        moveNextFuture._completeError$2(error, stackTrace);
      else
        moveNextFuture._asyncCompleteError$2(error, stackTrace);
    },
    _async$_onDone$0: function() {
      var _this = this,
        subscription = _this._subscription,
        moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this.set$_subscription(null);
      _this._stateData = null;
      if (subscription != null)
        moveNextFuture._completeWithValue$1(false);
      else
        moveNextFuture._asyncCompleteWithValue$1(false);
    },
    set$_subscription: function(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  P._cancelAndError_closure.prototype = {
    call$0: function() {
      return this.future._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  P._cancelAndErrorClosure_closure.prototype = {
    call$2: function(error, stackTrace) {
      P._cancelAndError(this.subscription, this.future, error, type$.StackTrace._as(stackTrace));
    },
    $signature: 3
  };
  P._cancelAndValue_closure.prototype = {
    call$0: function() {
      return this.future._complete$1(this.value);
    },
    $signature: 0
  };
  P._ForwardingStream.prototype = {
    get$isBroadcast: function() {
      return this._async$_source.get$isBroadcast();
    },
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t2, t3, t4,
        t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      t2 = t1._rest[1];
      t3 = $.Zone__current;
      t4 = cancelOnError === true ? 1 : 0;
      t2 = new P._ForwardingStreamSubscription(this, P._BufferingStreamSubscription__registerDataHandler(t3, onData, t2), P._BufferingStreamSubscription__registerErrorHandler(t3, onError), P._BufferingStreamSubscription__registerDoneHandler(t3, onDone), t3, t4, t1._eval$1("@<1>")._bind$1(t2)._eval$1("_ForwardingStreamSubscription<1,2>"));
      t2.set$_subscription(this._async$_source.listen$3$onDone$onError(t2.get$_handleData(), t2.get$_handleDone(), t2.get$_handleError()));
      return t2;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }
  };
  P._ForwardingStreamSubscription.prototype = {
    _add$1: function(data) {
      this.$ti._rest[1]._as(data);
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_add(data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _onPause$0: function() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.pause$0();
    },
    _onResume$0: function() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.resume$0();
    },
    _onCancel$0: function() {
      var subscription = this._subscription;
      if (subscription != null) {
        this.set$_subscription(null);
        return subscription.cancel$0();
      }
      return null;
    },
    _handleData$1: function(data) {
      this._stream._handleData$2(this.$ti._precomputed1._as(data), this);
    },
    _handleError$2: function(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      type$.Object._as(error);
      this._stream.$ti._eval$1("_EventSink<2>")._as(this)._addError$2(error, stackTrace);
    },
    _handleDone$0: function() {
      this._stream.$ti._eval$1("_EventSink<2>")._as(this)._close$0();
    },
    set$_subscription: function(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  P._MapStream.prototype = {
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception,
        t1 = this.$ti;
      t1._precomputed1._as(inputEvent);
      t1._eval$1("_EventSink<2>")._as(sink);
      outputEvent = null;
      try {
        outputEvent = this._transform.call$1(inputEvent);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        sink._addError$2(e, s);
        return;
      }
      sink._add$1(outputEvent);
    }
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error = type$.Object._as(H.wrapException(this.error));
      error.stack = this.stackTrace.toString$0(0);
      throw error;
    },
    $signature: 0
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      type$.void_Function._as(f);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, type$.void);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3: function(f, arg1, arg2, T1, T2) {
      var e, s, exception, _null = null;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        P._rootRunBinary(_null, _null, this, f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    $index: function(_, key) {
      return null;
    },
    run$1$1: function(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature: function() {
      return this.T._eval$1("~(0)");
    }
  };
  P.IterableBase.prototype = {};
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 12
  };
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), H.instanceType(receiver)._eval$1("ListIterator<ListMixin.E>"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      H.instanceType(receiver)._eval$1("~(ListMixin.E)")._as(action);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    join$1: function(receiver, separator) {
      var t1;
      if (this.get$length(receiver) === 0)
        return "";
      t1 = P.StringBuffer__writeAll("", receiver, separator);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.instanceType(receiver);
      return new H.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListMixin.E)")._as(f), t1._eval$1("@<ListMixin.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      H.instanceType(receiver)._bind$1($T)._eval$1("1(1,ListMixin.E)")._as(combine);
      $length = this.get$length(receiver);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    take$1: function(receiver, count) {
      return H.SubListIterable$(receiver, 0, H.checkNotNullable(count, "count", type$.int), H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    add$1: function(receiver, element) {
      var t1;
      H.instanceType(receiver)._eval$1("ListMixin.E")._as(element);
      t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    addAll$1: function(receiver, iterable) {
      var i, t1;
      H.instanceType(receiver)._eval$1("Iterable<ListMixin.E>")._as(iterable);
      i = this.get$length(receiver);
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
        this.add$1(receiver, t1.get$current());
        ++i;
      }
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = H.instanceType(receiver);
      t1._eval$1("Iterable<ListMixin.E>")._as(iterable);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    setAll$2: function(receiver, index, iterable) {
      this.setRange$3(receiver, index, index + 4, H.instanceType(receiver)._eval$1("Iterable<ListMixin.E>")._as(iterable));
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 13
  };
  P.MapMixin.prototype = {
    forEach$1: function(_, action) {
      var t2, key,
        t1 = H._instanceType(this);
      t1._eval$1("~(MapMixin.K,MapMixin.V)")._as(action);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current();
        action.call$2(key, t1._as(this.$index(0, key)));
      }
    },
    get$entries: function() {
      return this.get$keys().map$1$1(0, new P.MapMixin_entries_closure(this), H._instanceType(this)._eval$1("MapEntry<MapMixin.K,MapMixin.V>"));
    },
    map$2$1: function(_, transform, K2, V2) {
      var result, t2, key, entry,
        t1 = H._instanceType(this);
      t1._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(MapMixin.K,MapMixin.V)")._as(transform);
      result = P.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current();
        entry = transform.call$2(key, t1._as(this.$index(0, key)));
        result.$indexSet(0, entry.key, entry.value);
      }
      return result;
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    get$length: function(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    get$isEmpty: function(_) {
      var t1 = this.get$keys();
      return t1.get$isEmpty(t1);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P.MapMixin_entries_closure.prototype = {
    call$1: function(key) {
      var t3,
        t1 = this.$this,
        t2 = H._instanceType(t1);
      t2._eval$1("MapMixin.K")._as(key);
      t3 = t2._eval$1("MapMixin.V");
      return new P.MapEntry(key, t3._as(t1.$index(0, key)), t2._eval$1("@<MapMixin.K>")._bind$1(t3)._eval$1("MapEntry<1,2>"));
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("MapEntry<MapMixin.K,MapMixin.V>(MapMixin.K)");
    }
  };
  P._UnmodifiableMapMixin.prototype = {};
  P.MapView.prototype = {
    $index: function(_, key) {
      return this._collection$_map.$index(0, key);
    },
    forEach$1: function(_, action) {
      this._collection$_map.forEach$1(0, this.$ti._eval$1("~(1,2)")._as(action));
    },
    get$isEmpty: function(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$length: function(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$keys: function() {
      return this._collection$_map.get$keys();
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this._collection$_map);
    },
    get$entries: function() {
      return this._collection$_map.get$entries();
    },
    map$2$1: function(_, transform, K2, V2) {
      return this._collection$_map.map$2$1(0, this.$ti._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), K2, V2);
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {};
  P._ListBase_Object_ListMixin.prototype = {};
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  P.Utf8Decoder__decoder_closure.prototype = {
    call$0: function() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return null;
    },
    $signature: 14
  };
  P.Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0: function() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return null;
    },
    $signature: 14
  };
  P.Codec.prototype = {};
  P.Converter.prototype = {};
  P.Encoding.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var offset, i, charCode, t1, t2, _this = this,
        $length = s.length;
      for (offset = 0, i = 0; i < $length; ++i) {
        charCode = C.JSString_methods._codeUnitAt$1(s, i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t1 = charCode & 64512;
            if (t1 === 55296) {
              t2 = i + 1;
              t2 = !(t2 < $length && (C.JSString_methods._codeUnitAt$1(s, t2) & 64512) === 56320);
            } else
              t2 = false;
            if (!t2)
              if (t1 === 56320) {
                t1 = i - 1;
                t1 = !(t1 >= 0 && (C.JSString_methods.codeUnitAt$1(s, t1) & 64512) === 55296);
              } else
                t1 = false;
            else
              t1 = true;
            if (t1) {
              if (i > offset)
                _this.writeStringSlice$3(s, offset, i);
              offset = i + 1;
              _this.writeCharCode$1(92);
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(100);
              t1 = charCode >>> 8 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        _this.writeString$1(s);
      else if (offset < $length)
        _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null));
      }
      C.JSArray_methods.add$1(t1, object);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1("true");
        return true;
      } else if (object === false) {
        _this.writeString$1("false");
        return true;
      } else if (object == null) {
        _this.writeString$1("null");
        return true;
      } else if (typeof object == "string") {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1: function(list) {
      var t1, i, _this = this;
      _this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isNotEmpty(list)) {
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",");
          _this.writeObject$1(t1.$index(list, i));
        }
      }
      _this.writeString$1("]");
    },
    writeMap$1: function(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = P.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{");
      for (separator = '"'; i < t1; i += 2, separator = ',"') {
        _this.writeString$1(separator);
        _this.writeStringContent$1(H._asString(keyValueList[i]));
        _this.writeString$1('":');
        t2 = i + 1;
        if (t2 >= t1)
          return H.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("}");
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 13
  };
  P._JsonPrettyPrintMixin.prototype = {
    writeList$1: function(list) {
      var i, _this = this,
        t1 = J.getInterceptor$asx(list);
      if (t1.get$isEmpty(list))
        _this.writeString$1("[]");
      else {
        _this.writeString$1("[\n");
        _this.writeIndentation$1(++_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",\n");
          _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
          _this.writeObject$1(t1.$index(list, i));
        }
        _this.writeString$1("\n");
        _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1("]");
      }
    },
    writeMap$1: function(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = P.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonPrettyPrintMixin_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{\n");
      ++_this._JsonPrettyPrintMixin__indentLevel;
      for (separator = ""; i < t1; i += 2, separator = ",\n") {
        _this.writeString$1(separator);
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1('"');
        _this.writeStringContent$1(H._asString(keyValueList[i]));
        _this.writeString$1('": ');
        t2 = i + 1;
        if (t2 >= t1)
          return H.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("\n");
      _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
      _this.writeString$1("}");
      return true;
    }
  };
  P._JsonPrettyPrintMixin_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 13
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink;
      return t1 instanceof P.StringBuffer ? t1.toString$0(0) : null;
    },
    writeNumber$1: function(number) {
      this._sink.write$1(C.JSNumber_methods.toString$0(number));
    },
    writeString$1: function(string) {
      this._sink.write$1(string);
    },
    writeStringSlice$3: function(string, start, end) {
      this._sink.write$1(C.JSString_methods.substring$2(string, start, end));
    },
    writeCharCode$1: function(charCode) {
      this._sink.writeCharCode$1(charCode);
    }
  };
  P._JsonStringStringifierPretty.prototype = {
    writeIndentation$1: function(count) {
      var t1, t2, i;
      for (t1 = this._indent, t2 = this._sink, i = 0; i < count; ++i)
        t2.write$1(t1);
    }
  };
  P.Utf8Codec.prototype = {
    get$encoder: function() {
      return C.C_Utf8Encoder;
    }
  };
  P.Utf8Encoder.prototype = {
    convert$1: function(string) {
      var end, $length, t1, encoder;
      H._asString(string);
      end = P.RangeError_checkValidRange(0, null, string.length);
      $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new P._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        C.JSString_methods.codeUnitAt$1(string, end - 1);
        encoder._writeReplacementCharacter$0();
      }
      return C.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    }
  };
  P._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0: function() {
      var _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1,
        t4 = t1.length;
      if (t2 >= t4)
        return H.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (t3 >= t4)
        return H.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (t2 >= t4)
        return H.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
      if (start !== end && (C.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = _this._buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = C.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2)
            break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else {
          t3 = codeUnit & 64512;
          if (t3 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (_this._writeSurrogate$2(codeUnit, C.JSString_methods._codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (t3 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t3 = _this._bufferIndex;
            t4 = t3 + 1;
            if (t4 >= t2)
              break;
            _this._bufferIndex = t4;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit & 63 | 128;
          } else {
            t3 = _this._bufferIndex;
            if (t3 + 2 >= t2)
              break;
            t4 = _this._bufferIndex = t3 + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3] = codeUnit >>> 12 | 224;
            t3 = _this._bufferIndex = t4 + 1;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t3 + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  P.Utf8Decoder.prototype = {
    convert$1: function(codeUnits) {
      var t1, result;
      type$.List_int._as(codeUnits);
      t1 = this._allowMalformed;
      result = P.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
      if (result != null)
        return result;
      return new P._Utf8Decoder(t1).convertGeneral$4(codeUnits, 0, null, true);
    }
  };
  P._Utf8Decoder.prototype = {
    convertGeneral$4: function(codeUnits, start, maybeEnd, single) {
      var end, result, t1, message, _this = this;
      type$.List_int._as(codeUnits);
      end = P.RangeError_checkValidRange(start, maybeEnd, codeUnits.length);
      if (start === end)
        return "";
      result = _this._convertRecursive$4(codeUnits, start, end, single);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = P._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw H.wrapException(P.FormatException$(message, codeUnits, _this._charOrIndex));
      }
      return result;
    },
    _convertRecursive$4: function(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = C.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._convertRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._convertRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4: function(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this, _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new P.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (start < 0 || start >= t1)
        return H.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            type = C.JSString_methods._codeUnitAt$1("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE", byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            state = C.JSString_methods._codeUnitAt$1(" \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA", state + type);
            if (state === 0) {
              buffer._contents += H.Primitives_stringFromCharCode(char);
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    buffer._contents += H.Primitives_stringFromCharCode(_65533);
                    break;
                  case 65:
                    buffer._contents += H.Primitives_stringFromCharCode(_65533);
                    --i;
                    break;
                  default:
                    t3 = buffer._contents += H.Primitives_stringFromCharCode(_65533);
                    buffer._contents = t3 + H.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (i < 0 || i >= t1)
              return H.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (i < 0 || i >= t1)
            return H.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (i0 < 0 || i0 >= t1)
                return H.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (m >= t1)
                  return H.ioore(bytes, m);
                buffer._contents += H.Primitives_stringFromCharCode(bytes[m]);
              }
            else
              buffer._contents += P.String_String$fromCharCodes(bytes, i, markEnd);
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2)
          buffer._contents += H.Primitives_stringFromCharCode(_65533);
        else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin.prototype = {};
  P.DateTime.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._value === other._value && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._value, type$.DateTime._as(other)._value);
    },
    get$hashCode: function(_) {
      var t1 = this._value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toUtc$0: function() {
      if (this.isUtc)
        return this;
      return P.DateTime$_withValue(this._value, true);
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this));
      if (_this.isUtc)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    toIso8601String$0: function() {
      var _this = this,
        y = H.Primitives_getYear(_this) >= -9999 && H.Primitives_getYear(_this) <= 9999 ? P.DateTime__fourDigits(H.Primitives_getYear(_this)) : P.DateTime__sixDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this));
      if (_this.isUtc)
        return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms;
    },
    $isComparable: 1
  };
  P.DateTime_parse_parseIntOrZero.prototype = {
    call$1: function(matched) {
      if (matched == null)
        return 0;
      return P.int_parse(matched);
    },
    $signature: 20
  };
  P.DateTime_parse_parseMilliAndMicroseconds.prototype = {
    call$1: function(matched) {
      var t1, result, i;
      if (matched == null)
        return 0;
      for (t1 = matched.length, result = 0, i = 0; i < 6; ++i) {
        result *= 10;
        if (i < t1)
          result += C.JSString_methods._codeUnitAt$1(matched, i) ^ 48;
      }
      return result;
    },
    $signature: 20
  };
  P.Duration.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0: function(_) {
      var twoDigitMinutes, twoDigitSeconds, sixDigitUs,
        t1 = new P.Duration_toString_twoDigits(),
        t2 = this._duration;
      if (t2 < 0)
        return "-" + new P.Duration(0 - t2).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 60000000) % 60);
      twoDigitSeconds = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 1000000) % 60);
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + twoDigitMinutes + ":" + twoDigitSeconds + "." + sixDigitUs;
    },
    $isComparable: 1
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 21
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 21
  };
  P.Error.prototype = {
    get$stackTrace: function() {
      return H.getTraceFromException(this.$thrownJsError);
    }
  };
  P.AssertionError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + P.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  P.TypeError.prototype = {};
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var explanation, errorValue, _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + H.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + H.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + H.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + H.S(start) + ".." + H.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + H.S(start);
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      if (H._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = "UnimplementedError: " + this.message;
      return t1;
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = "Reading static variable '" + this.variableName + "' during its initialization";
      return t1;
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    }
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var t1, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix, slice,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = C.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(source, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = source.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(source, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(source, start, end);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
    }
  };
  P.Iterable.prototype = {
    map$1$1: function(_, f, $T) {
      var t1 = H._instanceType(this);
      return H.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(f), t1._eval$1("Iterable.E"), $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    forEach$1: function(_, f) {
      var t1;
      H._instanceType(this)._eval$1("~(Iterable.E)")._as(f);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var t1, value;
      $T._as(initialValue);
      H._instanceType(this)._bind$1($T)._eval$1("1(1,Iterable.E)")._as(combine);
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    every$1: function(_, test) {
      var t1;
      H._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (!H.boolConversionCheck(test.call$1(t1.get$current())))
          return false;
      return true;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$of(this, growable, H._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    take$1: function(_, count) {
      return H.TakeIterable_TakeIterable(this, count, H._instanceType(this)._eval$1("Iterable.E"));
    },
    skip$1: function(_, count) {
      return H.SkipIterable_SkipIterable(this, count, H._instanceType(this)._eval$1("Iterable.E"));
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Iterator.prototype = {};
  P.MapEntry.prototype = {
    toString$0: function(_) {
      return "MapEntry(" + H.S(this.key) + ": " + H.S(this.value) + ")";
    },
    get$value: function() {
      return this.value;
    }
  };
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(C.JSNull_methods, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P._StringStackTrace.prototype = {
    toString$0: function(_) {
      return "";
    },
    $isStackTrace: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    write$1: function(obj) {
      this._contents += H.S(obj);
    },
    writeCharCode$1: function(charCode) {
      this._contents += H.Primitives_stringFromCharCode(charCode);
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$isEmpty: function(_) {
      return this._contents.length === 0;
    },
    $isStringSink: 1
  };
  W.CloseEvent.prototype = {$isCloseEvent: 1};
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.Event.prototype = {$isEvent: 1};
  W.EventTarget.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      type$.nullable_dynamic_Function_Event._as(listener);
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, false);
    },
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(type$.nullable_dynamic_Function_Event._as(listener), 1), false);
    },
    _removeEventListener$3: function(receiver, type, listener, options) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(type$.nullable_dynamic_Function_Event._as(listener), 1), false);
    },
    $isEventTarget: 1
  };
  W.MessageEvent.prototype = {$isMessageEvent: 1};
  W.WebSocket.prototype = {$isWebSocket: 1};
  W.EventStreamProvider.prototype = {};
  W._EventStream.prototype = {
    get$isBroadcast: function() {
      return true;
    },
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return W._EventStreamSubscription$(this._html$_target, this._eventType, onData, false, t1._precomputed1);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }
  };
  W._EventStreamSubscription.prototype = {
    cancel$0: function() {
      var _this = this;
      if (_this._html$_target == null)
        return $.$get$nullFuture();
      _this._unlisten$0();
      _this._html$_target = null;
      _this.set$_html$_onData(null);
      return $.$get$nullFuture();
    },
    onData$1: function(handleData) {
      var t1, _this = this;
      _this.$ti._eval$1("~(1)?")._as(handleData);
      if (_this._html$_target == null)
        throw H.wrapException(P.StateError$("Subscription has been canceled."));
      _this._unlisten$0();
      t1 = W._wrapZone(new W._EventStreamSubscription_onData_closure(handleData), type$.Event);
      _this.set$_html$_onData(t1);
      _this._tryResume$0();
    },
    onError$1: function(_, handleError) {
    },
    onDone$1: function(handleDone) {
      type$.nullable_void_Function._as(handleDone);
    },
    pause$0: function() {
      if (this._html$_target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    resume$0: function() {
      var _this = this;
      if (_this._html$_target == null || _this._pauseCount <= 0)
        return;
      --_this._pauseCount;
      _this._tryResume$0();
    },
    _tryResume$0: function() {
      var t2, _this = this,
        t1 = _this._html$_onData;
      if (t1 != null && _this._pauseCount <= 0) {
        t2 = _this._html$_target;
        t2.toString;
        C.WebSocket_methods.addEventListener$3(t2, _this._eventType, t1, false);
      }
    },
    _unlisten$0: function() {
      var t2,
        t1 = this._html$_onData;
      if (t1 != null) {
        t2 = this._html$_target;
        t2.toString;
        C.WebSocket_methods._removeEventListener$3(t2, this._eventType, type$.nullable_dynamic_Function_Event._as(t1), false);
      }
    },
    set$_html$_onData: function(_onData) {
      this._html$_onData = type$.nullable_dynamic_Function_Event._as(_onData);
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(type$.Event._as(e));
    },
    $signature: 22
  };
  W._EventStreamSubscription_onData_closure.prototype = {
    call$1: function(e) {
      return this.handleData.call$1(type$.Event._as(e));
    },
    $signature: 22
  };
  P._AcceptStructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var millisSinceEpoch, t1, proto, slot, copy, t2, l, $length, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (H._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      if (e instanceof Date) {
        millisSinceEpoch = e.getTime();
        if (Math.abs(millisSinceEpoch) <= 864e13)
          t1 = false;
        else
          t1 = true;
        if (t1)
          H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + millisSinceEpoch));
        H.checkNotNullable(true, "isUtc", type$.bool);
        return new P.DateTime(millisSinceEpoch, true);
      }
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (typeof Promise != "undefined" && e instanceof Promise)
        return P.promiseToFuture(e, type$.dynamic);
      proto = Object.getPrototypeOf(e);
      if (proto === Object.prototype || proto === null) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = _box_0.copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = type$.dynamic;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        _box_0.copy = copy;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        _this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (e instanceof Array) {
        l = e;
        slot = _this.findSlot$1(l);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = J.getInterceptor$asx(l);
        $length = t2.get$length(l);
        copy = _this.mustCopy ? new Array($length) : l;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        for (t1 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
          t1.$indexSet(copy, i, _this.walk$1(t2.$index(l, i)));
        return copy;
      }
      return e;
    }
  };
  P._AcceptStructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    $signature: 30
  };
  P._AcceptStructuredCloneDart2Js.prototype = {
    forEachJsField$2: function(object, action) {
      var t1, t2, _i, key;
      type$.dynamic_Function_dynamic_dynamic._as(action);
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P.NullRejectionException.prototype = {
    toString$0: function(_) {
      return "Promise was rejected with a value of `" + (this.isUndefined ? "undefined" : "null") + "`.";
    }
  };
  P.promiseToFuture_closure.prototype = {
    call$1: function(r) {
      return this.completer.complete$1(this.T._eval$1("0/?")._as(r));
    },
    $signature: 7
  };
  P.promiseToFuture_closure0.prototype = {
    call$1: function(e) {
      if (e == null)
        return this.completer.completeError$1(new P.NullRejectionException(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 7
  };
  P.Endian.prototype = {};
  N.HexCodec.prototype = {
    get$encoder: function() {
      return C.C_HexEncoder;
    },
    get$decoder: function() {
      return C.C_HexDecoder;
    }
  };
  A.HexDecoder.prototype = {
    convert$1: function(string) {
      var t2, bytes,
        t1 = string.length;
      if ((t1 & 1) !== 0)
        throw H.wrapException(P.FormatException$("Invalid input length, must be even.", string, t1));
      t2 = C.JSInt_methods._tdivFast$1(t1, 2);
      bytes = new Uint8Array(t2);
      A._decode(new H.CodeUnits(string), 0, t1, bytes, 0);
      return bytes;
    }
  };
  R.HexEncoder.prototype = {
    convert$1: function(bytes) {
      type$.List_int._as(bytes);
      return R._convert(bytes, 0, J.get$length$asx(bytes));
    }
  };
  D.AudioFrame.prototype = {
    jsonMap$0: function() {
      var t1 = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      t1.$indexSet(0, "frame", this.frame);
      t1.$indexSet(0, "sequenceNumber", this.sequenceNumber);
      t1.$indexSet(0, "position", J.toString$0$(this.positionalInformation));
      return t1;
    }
  };
  D.AudioClient.prototype = {};
  D.AudioClientBase.prototype = {
    AudioClientBase$3: function(_client, _udpTransport, incomingAudioStreamTimeout) {
    },
    close$0: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, _i, closeFutures;
      var $async$close$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              closeFutures = H.setRuntimeTypeInfo([], type$.JSArray_Future_dynamic);
              for (t1 = $async$self._streams, t2 = t1.get$values(), t2 = t2.get$iterator(t2), t3 = type$._AudioFrameStream; t2.moveNext$0();)
                C.JSArray_methods.add$1(closeFutures, t3._as(t2.get$current())._controller.close$0(0));
              t1.clear$0(0);
              for (t1 = $async$self._sinks, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
                C.JSArray_methods.add$1(closeFutures, t1[_i].close$1$gracefully(0, false));
              C.JSArray_methods.set$length(t1, 0);
              C.JSArray_methods.set$length($async$self._overUdp, 0);
              $async$goto = 2;
              return P._asyncAwait(P.Future_wait(closeFutures, type$.dynamic), $async$close$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$close$0, $async$completer);
    },
    feed$2: function(packet, fromUdp) {
      var user, t3, t4, t5, t6, sequenceNumber, _i, frame, _this = this, _box_0 = {},
        t1 = _this._streams,
        t2 = packet.sessionId,
        stream = t1.$index(0, t2);
      _box_0.stream = stream;
      if (stream == null) {
        if (_this.Notifier__listeners.length === 0)
          return;
        stream = D._AudioFrameStream$_(t2, _this.incomingAudioStreamTimeout, new P._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_AudioFrame), new D.AudioClientBase_feed_closure(_box_0, _this));
        _box_0.stream = stream;
        t1.$indexSet(0, t2, stream);
        if (fromUdp)
          C.JSArray_methods.add$1(_this._overUdp, _box_0.stream);
        user = P.LinkedHashMap_LinkedHashMap$of(_this._audio_client$_client._users, type$.int, type$.User).$index(0, t2);
        for (t2 = _this.get$listeners(), t2 = new P._SyncStarIterator(t2._outerHelper(), t2.$ti._eval$1("_SyncStarIterator<1>")), t3 = packet.codec, t4 = packet.target; t2.moveNext$0();) {
          t5 = t2.get$current();
          t6 = _box_0.stream;
          if (t4 >= 3)
            return H.ioore(C.List_GN8, t4);
          t5.onAudioReceived$4(t6, t3, user, C.List_GN8[t4]);
        }
      }
      sequenceNumber = packet.sequenceNumber;
      for (t2 = packet.frames, t3 = t2.length, t4 = packet.positionalInformation, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        frame = t2[_i];
        t5 = _box_0.stream._controller;
        t6 = H._instanceType(t5)._precomputed1._as(new D.AudioFrame(frame, sequenceNumber, t4));
        if (!t5.get$_mayAddEvent())
          H.throwExpression(t5._addEventError$0());
        t5._sendData$1(t6);
        ++sequenceNumber;
      }
      if (packet.endOfTransmission) {
        t2 = type$._AudioFrameStream._as(_box_0.stream);
        t2._controller.close$0(0);
        t1.remove$1(0, t2.userId);
      }
    }
  };
  D.AudioClientBase_feed_closure.prototype = {
    call$0: function() {
      var t1 = this._box_0.stream;
      t1._controller.close$0(0);
      this.$this._streams.remove$1(0, t1.userId);
      return null;
    },
    $signature: 0
  };
  D._UdpErrorReceiver.prototype = {};
  D._AudioFrameStream.prototype = {};
  D._AudioFrameStream$__closure.prototype = {
    call$1: function(sink) {
      type$.EventSink_AudioFrame._as(sink);
      this.onTimeout.call$0();
    },
    $signature: 31
  };
  D._AudioClient_Object_Notifier.prototype = {};
  D._AudioFrame_Object_JsonString.prototype = {};
  D.__AudioFrameStream_StreamView__UdpErrorReceiver.prototype = {};
  N.PingPacket.prototype = {
    jsonMap$0: function() {
      var map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      map.$indexSet(0, "pingTimestamp", this.pingTimestamp);
      map.$indexSet(0, "incoming", true);
      return map;
    }
  };
  N.IncomingAudioPacket.prototype = {
    jsonMap$0: function() {
      var t1, _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      map.$indexSet(0, "codec", _this.codec._audio$_name);
      map.$indexSet(0, "target", _this.target);
      map.$indexSet(0, "sessionId", _this.sessionId);
      map.$indexSet(0, "sequenceNumber", _this.sequenceNumber);
      map.$indexSet(0, "endOfTransmission", _this.endOfTransmission);
      t1 = _this.positionalInformation;
      if (t1 != null)
        map.$indexSet(0, "positionalInformation", t1.toString$0(0));
      t1 = _this.frames;
      map.$indexSet(0, "frameCount", t1.length);
      map.$indexSet(0, "totalFramesSize", C.JSArray_methods.fold$1$2(t1, 0, new N.IncomingAudioPacket_jsonMap_closure(), type$.int));
      return map;
    }
  };
  N.IncomingAudioPacket_jsonMap_closure.prototype = {
    call$2: function(size, frame) {
      return H._asInt(size) + type$.Uint8List._as(frame).byteLength;
    },
    $signature: 32
  };
  N.AudioPacket.prototype = {};
  N._AudioPacket_Object_JsonString.prototype = {};
  U.MumbleClient.prototype = {};
  U.ServerInfo.prototype = {
    jsonMap$0: function() {
      var _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object),
        t1 = _this.version;
      if (t1 != null)
        map.$indexSet(0, "version", t1.jsonMap$0());
      t1 = _this.config;
      if (t1 != null)
        map.$indexSet(0, "config", t1.jsonMap$0());
      t1 = _this.connectionStats;
      if (t1 != null)
        map.$indexSet(0, "connectionStats", t1.jsonMap$0());
      t1 = _this.suggestedClientConfig;
      if (t1 != null)
        map.$indexSet(0, "suggestedClientConfig", t1.jsonMap$0());
      t1 = _this.codecVersion;
      if (t1 != null)
        map.$indexSet(0, "codecVersion", t1.jsonMap$0());
      return map;
    }
  };
  U._ServerInfo_Object_JsonString.prototype = {};
  S.MumbleClientBase.prototype = {
    _pingRoutine$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t3, t4, t5, t6, t7, t8, _result, t9, t10, difference, start, t1, t2, waitDuration;
      var $async$_pingRoutine$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              start = new P.DateTime(Date.now(), false);
              t1 = $async$self.options.pingTimeout;
              t2 = t1._duration;
              waitDuration = new P.Duration(C.JSNumber_methods.round$0(t2 * 0.25));
              t3 = $async$self._pinging.future, t4 = type$.dynamic, t5 = type$.JSArray_Future_dynamic, t6 = type$.Ping, t7 = type$.GeneratedMessage, t8 = $async$self._connection._out;
            case 2:
              // for condition
              if (!(t3._state === 0)) {
                // goto after for
                $async$goto = 3;
                break;
              }
              _result = G.Ping_create();
              t9 = V.Int64_Int64(Date.now());
              _result.__fieldSet._$set$2(0, t9);
              H.checkTypeBound(t6, t7, "T", "writeMessage");
              if (!$async$self._closed) {
                H.checkTypeBound(t6, t7, "T", "writeMessage");
                t8.add$1(0, F.encode(_result, t6));
              }
              $async$goto = 4;
              return P._asyncAwait(P.Future_any(H.setRuntimeTypeInfo([P.Future_Future$delayed(waitDuration, t4), t3], t5), t4), $async$_pingRoutine$0);
            case 4:
              // returning from await.
              if (t3._state === 0) {
                t9 = Date.now();
                t10 = $async$self._lastMessageReceived;
                t9 = 1000 * (t9 - (t10 == null ? start : t10)._value);
                difference = new P.Duration(t9);
                if (t9 >= t2)
                  throw H.wrapException(P.TimeoutException$("Received last message " + difference.toString$0(0) + " ago", t1));
              }
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_pingRoutine$0, $async$completer);
    },
    close$0: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$close$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = !$async$self._closed ? 2 : 3;
              break;
            case 2:
              // then
              $async$self._closed = true;
              t1 = $async$self._lateAudio;
              $async$goto = 4;
              return P._asyncAwait(t1 == null ? null : t1.close$0(0), $async$close$0);
            case 4:
              // returning from await.
              t1 = $async$self._pinging;
              if (t1.future._state === 0)
                t1.complete$0();
              $async$self._connection._webSocket.close();
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$close$0, $async$completer);
    },
    _client_base$_onError$2: function(error, stackTrace) {
      var _this = this;
      if (!_this._closed) {
        _this.close$0(0);
        if (_this.Notifier__listeners.length !== 0)
          _this.get$listeners().forEach$1(0, new S.MumbleClientBase__onError_closure(error, stackTrace));
        else
          throw H.wrapException(new T.UnhandeledError(stackTrace, error));
      }
    },
    _onDone$0: function() {
      if (!this._closed) {
        this.close$0(0);
        this.get$listeners().forEach$1(0, new S.MumbleClientBase__onDone_closure());
      }
    },
    _onMessage$1: function(message) {
      var t1, ping, t2, t3, t4, t5, t6, t7, t8, t9, codec, stats, user, channel, audio, rti, config, suggested, denied, query, entries, users, queryResult, map, _this = this, _null = null, _box_0 = {};
      _this._lastMessageReceived = new P.DateTime(Date.now(), false);
      t1 = message.type;
      switch (t1) {
        case 15:
          _this._lateCryptState = M.cryptStateFromProto(type$.CryptSetup._as(F.decode(message)), _this._lateCryptState);
          _this.get$listeners().forEach$1(0, new S.MumbleClientBase__onMessage_closure());
          break;
        case 3:
          ping = type$.Ping._as(F.decode(message));
          t1 = ping.__fieldSet._$has$1(1) ? ping.__fieldSet._$getIZ$1(1) : _null;
          t2 = ping.__fieldSet._$has$1(2) ? ping.__fieldSet._$getIZ$1(2) : _null;
          t3 = ping.__fieldSet._$has$1(3) ? ping.__fieldSet._$getIZ$1(3) : _null;
          t4 = ping.__fieldSet._$has$1(4) ? ping.__fieldSet._$getIZ$1(4) : _null;
          t5 = ping.__fieldSet._$has$1(6) ? ping.__fieldSet._$getIZ$1(6) : _null;
          t6 = ping.__fieldSet._$has$1(5) ? ping.__fieldSet._$getIZ$1(5) : _null;
          t7 = ping.__fieldSet._$has$1(9) ? H._asDouble(ping.__fieldSet._$getND$1(9)) : _null;
          if (ping.__fieldSet._$has$1(10))
            H._asDouble(ping.__fieldSet._$getND$1(10));
          t8 = ping.__fieldSet._$has$1(7) ? H._asDouble(ping.__fieldSet._$getND$1(7)) : _null;
          t9 = ping.__fieldSet._$has$1(7) ? H._asDouble(ping.__fieldSet._$getND$1(8)) : _null;
          _this._serverInfo.connectionStats = new G.ServerConnectionStats(new Y.PacketStats(t1, t2, t3, t4), t5, t6, new Y.PingStats(t8, t9, t7, t7));
          break;
        case 21:
          codec = type$.CodecVersion._as(F.decode(message));
          if (!codec.__fieldSet._$has$1(0))
            H.throwExpression(T.ProtocolException$("The proto message does not contain the required field 'alpha' and is thus invalid!"));
          if (!codec.__fieldSet._$has$1(1))
            H.throwExpression(T.ProtocolException$("The proto message does not contain the required field 'beta' and is thus invalid!"));
          if (!codec.__fieldSet._$has$1(2))
            H.throwExpression(T.ProtocolException$("The proto message does not contain the required field 'preferAlpha' and is thus invalid!"));
          t1 = codec.__fieldSet._$getIZ$1(0);
          t2 = codec.__fieldSet._$getIZ$1(1);
          t3 = codec.__fieldSet._$getB$2(2, true);
          t4 = codec.__fieldSet._$has$1(3) ? codec.__fieldSet._$getBF$1(3) : _null;
          _this._serverInfo.codecVersion = new G.ServerCodecVersion(t1, t2, t3, t4);
          break;
        case 22:
          stats = type$.UserStats._as(F.decode(message));
          user = _this._getUserOrSelf$2(stats.__fieldSet._$has$1(0), stats.__fieldSet._$getIZ$1(0));
          if (user != null)
            user._reportUserStats$1$stats(A.userStatsFromProto(stats));
          break;
        case 9:
          _this._handleUserState$1(type$.UserState._as(F.decode(message)));
          break;
        case 8:
          t1 = type$.UserRemove._as(F.decode(message));
          if (_this.get$self().session === t1.__fieldSet._$getIZ$1(0)) {
            t2 = _this.get$self();
            t3 = _this._getUserOrSelf$2(t1.__fieldSet._$has$1(1), t1.__fieldSet._$getIZ$1(1));
            t4 = t1.__fieldSet._$getSZ$1(2);
            t2._notifyUserRemoved$3$actor$ban$reason(t3, t1.__fieldSet._$getBF$1(3), t4);
          } else {
            user = _this._users.remove$1(0, t1.__fieldSet._$getIZ$1(0));
            if (user != null) {
              t2 = _this._getUserOrSelf$2(t1.__fieldSet._$has$1(1), t1.__fieldSet._$getIZ$1(1));
              t3 = t1.__fieldSet._$getSZ$1(2);
              user._notifyUserRemoved$3$actor$ban$reason(t2, t1.__fieldSet._$getBF$1(3), t3);
            }
          }
          break;
        case 7:
          _this._handleChannelState$1(type$.ChannelState._as(F.decode(message)));
          break;
        case 6:
          t1 = type$.ChannelRemove._as(F.decode(message));
          if (t1.__fieldSet._$has$1(0))
            if (t1.__fieldSet._$getIZ$1(0) !== 0) {
              channel = _this._channels.remove$1(0, t1.__fieldSet._$getIZ$1(0));
              if (channel != null)
                channel._notifyChannelRemoved$0();
            } else
              H.throwExpression(P.ArgumentError$("Can not remove the root channel!"));
          else
            H.throwExpression(T.ProtocolException$("Bad message, channel id missing!"));
          break;
        case 11:
          _this._handleTextMessage$1(type$.TextMessage._as(F.decode(message)));
          break;
        case 1:
          audio = N.decodeIncoming(message.data);
          if (audio instanceof N.IncomingAudioPacket) {
            t1 = _this._lateAudio;
            if (t1 != null)
              t1.feed$2(audio, false);
          } else {
            rti = H._isClosure(audio) ? H.closureFunctionType(audio) : _null;
            H.throwExpression(T.ProtocolException$("Did not expect a packet here that is NOT of type IncomingAudioPacket!" + ("Actual type was " + H.createRuntimeType(rti == null ? H.instanceType(audio) : rti).toString$0(0))));
          }
          break;
        case 0:
          _this._serverInfo.version = Y.versionInformationFromProto(type$.Version._as(F.decode(message)));
          break;
        case 24:
          config = type$.ServerConfig._as(F.decode(message));
          t1 = config.__fieldSet._$has$1(2) ? config.__fieldSet._$getBF$1(2) : _null;
          t2 = config.__fieldSet._$has$1(4) ? config.__fieldSet._$getIZ$1(4) : _null;
          t3 = config.__fieldSet._$has$1(3) ? config.__fieldSet._$getIZ$1(3) : _null;
          t4 = config.__fieldSet._$has$1(5) ? config.__fieldSet._$getIZ$1(5) : _null;
          t5 = config.__fieldSet._$has$1(0) ? config.__fieldSet._$getIZ$1(0) : _null;
          t6 = config.__fieldSet._$has$1(1) ? config.__fieldSet._$getSZ$1(1) : _null;
          t7 = config.__fieldSet._$has$1(0) ? B.adjustNetworkBandwidth(config.__fieldSet._$getIZ$1(0)) : _null;
          _this._serverInfo.config = new G.ServerConfig(t1, t3, t2, t4, t7, t5, t6);
          break;
        case 25:
          suggested = type$.SuggestConfig._as(F.decode(message));
          t1 = suggested.__fieldSet._$has$1(0) ? suggested.__fieldSet._$getIZ$1(0) : _null;
          t2 = suggested.__fieldSet._$has$1(1) ? suggested.__fieldSet._$getBF$1(1) : _null;
          t3 = suggested.__fieldSet._$has$1(2) ? suggested.__fieldSet._$getBF$1(2) : _null;
          _this._serverInfo.suggestedClientConfig = new G.ServerSuggestedClientConfig(t1, t2, t3);
          break;
        case 4:
          throw H.wrapException(N.rejectExceptionFromProto(type$.Reject._as(F.decode(message))));
        case 12:
          denied = type$.PermissionDenied._as(F.decode(message));
          if (!denied.__fieldSet._$has$1(4))
            H.throwExpression(T.ProtocolException$("Expected field type not set!"));
          t1 = type$.PermissionDenied_DenyType._as(denied.__fieldSet._$getND$1(4)).value;
          if (t1 >= 14)
            return H.ioore(C.List_yvr, t1);
          t1 = C.List_yvr[t1];
          t2 = denied.__fieldSet._$has$1(0) ? X.Permission$fromInt(denied.__fieldSet._$getIZ$1(0)) : _null;
          t3 = denied.__fieldSet._$has$1(5) ? denied.__fieldSet._$getSZ$1(5) : _null;
          t4 = denied.__fieldSet._$has$1(3) ? denied.__fieldSet._$getSZ$1(3) : _null;
          t5 = denied.__fieldSet._$has$1(1) ? denied.__fieldSet._$getIZ$1(1) : _null;
          t6 = denied.__fieldSet._$has$1(2) ? denied.__fieldSet._$getIZ$1(2) : _null;
          _this.get$listeners().forEach$1(0, new S.MumbleClientBase__onMessage_closure0(new N.PermissionDeniedException(t1, t2, t5, t6, t4, t3)));
          break;
        case 20:
          query = type$.PermissionQuery._as(F.decode(message));
          if (query.__fieldSet._$has$1(2) && query.__fieldSet._$getBF$1(2))
            _this.get$listeners().forEach$1(0, new S.MumbleClientBase__onMessage_closure1());
          else {
            t1 = query.__fieldSet._$has$1(0);
            t2 = query.__fieldSet._$getIZ$1(0);
            t1 = t1 ? _this._channels.$index(0, t2) : _null;
            if (t1 != null)
              t1._notifyChannelPermissions$1$permissions(X.Permission$fromInt(query.__fieldSet._$getIZ$1(1)));
          }
          break;
        case 10:
          entries = P.List_List$unmodifiable(J.map$1$1$ax(type$.BanList._as(F.decode(message)).__fieldSet._$getList$1$1(0, type$.BanList_BanEntry), T.ban__banEntryFromProto$closure(), type$.dynamic), type$.BanEntry);
          _this.get$listeners().forEach$1(0, new S.MumbleClientBase__onMessage_closure2(entries));
          break;
        case 18:
          t1 = type$.RegisteredUser;
          users = P.List_List$unmodifiable(J.map$1$1$ax(type$.UserList._as(F.decode(message)).__fieldSet._$getList$1$1(0, type$.UserList_User), new S.MumbleClientBase__onMessage_closure3(_this), t1).toList$0(0), t1);
          _this.get$listeners().forEach$1(0, new S.MumbleClientBase__onMessage_closure4(users));
          break;
        case 14:
          queryResult = type$.QueryUsers._as(F.decode(message));
          t1 = type$.int;
          t2 = queryResult.__fieldSet._$getList$1$1(0, t1);
          t3 = type$.String;
          t4 = queryResult.__fieldSet._$getList$1$1(1, t3);
          map = P.LinkedHashMap_LinkedHashMap(t1, t3);
          P.MapBase__fillMapWithIterables(map, t2, t4);
          _box_0.idsToNames = map;
          _box_0.idsToNames = H.ConstantMap_ConstantMap$from(map, t1, t3);
          _this.get$listeners().forEach$1(0, new S.MumbleClientBase__onMessage_closure5(_box_0));
          break;
        default:
          P.print("Unhandeld message of type " + t1);
          break;
      }
    },
    writeMessage$1$1: function(message, $T) {
      var _s12_ = "writeMessage",
        t1 = type$.GeneratedMessage;
      H.checkTypeBound($T, t1, "T", _s12_);
      $T._as(message);
      if (!this._closed) {
        H.checkTypeBound($T, t1, "T", _s12_);
        this._connection._out.add$1(0, F.encode(message, $T));
      }
    },
    _handleTextMessage$1: function(message) {
      var _this = this,
        t1 = _this._getUserOrSelf$2(message.__fieldSet._$has$1(0), message.__fieldSet._$getIZ$1(0)),
        t2 = message.__fieldSet._$getSZ$1(4),
        t3 = type$.int,
        t4 = type$.User,
        t5 = B.FilterNullList_filterNull(J.map$1$1$ax(message.__fieldSet._$getList$1$1(1, t3), new S.MumbleClientBase__handleTextMessage_closure(_this), type$.nullable_User).toList$0(0), t4),
        t6 = type$.nullable_Channel,
        t7 = type$.Channel,
        t8 = B.FilterNullList_filterNull(J.map$1$1$ax(message.__fieldSet._$getList$1$1(2, t3), new S.MumbleClientBase__handleTextMessage_closure0(_this), t6).toList$0(0), t7);
      t6 = B.FilterNullList_filterNull(J.map$1$1$ax(message.__fieldSet._$getList$1$1(3, t3), new S.MumbleClientBase__handleTextMessage_closure1(_this), t6).toList$0(0), t7);
      t3 = P.List_List$from(t5, true, t4);
      t4 = P.List_List$from(t8, true, t7);
      t5 = P.List_List$from(t6, true, t7);
      _this.get$listeners().forEach$1(0, new S.MumbleClientBase__handleTextMessage_closure2(new Q.IncomingTextMessage(t1, t3, t4, t5, t2)));
    },
    _handleChannelState$1: function(message) {
      var t1, t2, channel, created, t3, t4, t5, links, change, result, t6, t7, t8, _this = this, _box_0 = {};
      if (!message.__fieldSet._$has$1(0))
        throw H.wrapException(T.ProtocolException$("Bad message, channel id missing!"));
      _box_0.channel = null;
      t1 = _this._channels;
      t2 = t1.$index(0, message.__fieldSet._$getIZ$1(0));
      if (t2 == null) {
        t2 = message.__fieldSet._$getIZ$1(0);
        channel = _box_0.channel = new N.Channel(_this, t2, H.setRuntimeTypeInfo([], type$.JSArray_Channel), H.setRuntimeTypeInfo([], type$.JSArray_ChannelListener));
        t1.$indexSet(0, message.__fieldSet._$getIZ$1(0), channel);
        if (t2 === 0)
          _this._lateRootChannel = channel;
        t2 = channel;
        created = true;
      } else {
        _box_0.channel = t2;
        created = false;
      }
      t3 = message.__fieldSet._$has$1(1);
      t4 = message.__fieldSet._$getIZ$1(1);
      t3 = t3 ? t1.$index(0, t4) : null;
      t4 = type$.int;
      if (J.get$isNotEmpty$asx(message.__fieldSet._$getList$1$1(6, t4))) {
        t5 = type$.Channel;
        links = P.List_List$unmodifiable(t2._links, t5);
        change = H.setRuntimeTypeInfo([], type$.JSArray_Channel);
        for (t2 = J.get$iterator$ax(message.__fieldSet._$getList$1$1(6, t4)); t2.moveNext$0();) {
          t4 = t1.$index(0, t2.get$current());
          if (t4 != null) {
            result = P.List_List$from(t4._links, false, t5);
            result.fixed$length = Array;
            result.immutable$list = Array;
            C.JSArray_methods.remove$1(result, _box_0.channel);
            C.JSArray_methods.remove$1(links, t4);
            C.JSArray_methods.add$1(change, t4);
            t4._notifyChannelUpdate$1$changes(C.ChannelChanges_mlz);
          }
        }
      } else if (J.get$isNotEmpty$asx(message.__fieldSet._$getList$1$1(5, t4))) {
        t5 = type$.Channel;
        links = P.List_List$unmodifiable(t2._links, t5);
        change = H.setRuntimeTypeInfo([], type$.JSArray_Channel);
        for (t2 = J.get$iterator$ax(message.__fieldSet._$getList$1$1(5, t4)); t2.moveNext$0();) {
          t4 = t1.$index(0, t2.get$current());
          if (t4 != null) {
            result = P.List_List$from(t4._links, false, t5);
            result.fixed$length = Array;
            result.immutable$list = Array;
            C.JSArray_methods.add$1(result, _box_0.channel);
            C.JSArray_methods.add$1(links, t4);
            C.JSArray_methods.add$1(change, t4);
            t4._notifyChannelUpdate$1$changes(C.ChannelChanges_mlz);
          }
        }
      } else if (J.get$isNotEmpty$asx(message.__fieldSet._$getList$1$1(3, t4))) {
        links = H.setRuntimeTypeInfo([], type$.JSArray_Channel);
        for (t2 = J.get$iterator$ax(message.__fieldSet._$getList$1$1(3, t4)); t2.moveNext$0();) {
          t4 = t1.$index(0, t2.get$current());
          if (t4 != null)
            C.JSArray_methods.add$1(links, t4);
        }
      } else
        links = null;
      t1 = _box_0.channel;
      t2 = t3 != null;
      if (t2)
        t1._parent = t3;
      t3 = links != null;
      if (t3)
        t1.set$_links(links);
      if (message.__fieldSet._$has$1(2))
        t1._channel$_name = message.__fieldSet._$getSZ$1(2);
      if (message.__fieldSet._$has$1(4))
        t1._description = message.__fieldSet._$getSZ$1(4);
      if (message.__fieldSet._$has$1(7))
        t1._temporary = message.__fieldSet._$getBF$1(7);
      if (message.__fieldSet._$has$1(8))
        t1._position = message.__fieldSet._$getIZ$1(8);
      if (message.__fieldSet._$has$1(11))
        message.__fieldSet._$getBF$1(11);
      if (message.__fieldSet._$has$1(12))
        message.__fieldSet._$getBF$1(12);
      if (message.__fieldSet._$has$1(9))
        t1._descriptionHash = new Uint8Array(H._ensureNativeList(type$.List_int._as(message.__fieldSet._$getND$1(9))));
      if (message.__fieldSet._$has$1(10))
        t1._maxUsers = message.__fieldSet._$getIZ$1(10);
      t1 = message.__fieldSet._$has$1(4);
      t4 = message.__fieldSet._$has$1(7);
      t5 = message.__fieldSet._$has$1(8);
      t6 = message.__fieldSet._$has$1(9);
      t7 = message.__fieldSet._$has$1(10);
      t8 = message.__fieldSet._$has$1(2);
      message.__fieldSet._$has$1(12);
      message.__fieldSet._$has$1(11);
      if (created)
        _this.get$listeners().forEach$1(0, new S.MumbleClientBase__handleChannelState_closure(_box_0));
      else
        _box_0.channel._notifyChannelUpdate$1$changes(new N.ChannelChanges(t2, t3, t8, t1, t4, t5, t6, t7));
    },
    get$self: function() {
      var t1 = this._lateSelf;
      if (t1 != null)
        return t1;
      else
        throw H.wrapException(P.StateError$("Accessing this property is not allowed until the connect function returned!\r\nHow were you even able to access it?!"));
    },
    _getUserOrSelf$2: function(hasUser, session) {
      var t1;
      if (hasUser) {
        t1 = this._lateSelf;
        if (t1 != null)
          if (t1.session === session)
            return t1;
        return this._users.$index(0, session);
      } else
        return null;
    },
    _handleUserState$1: function(message) {
      var t2, t3, channel, userOrNull, user, created, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, _this = this, t1 = {};
      if (!message.__fieldSet._$has$1(0))
        throw H.wrapException(T.ProtocolException$("Bad message, session id missing!"));
      t2 = message.__fieldSet._$has$1(4);
      t3 = message.__fieldSet._$getIZ$1(4);
      channel = t2 ? _this._channels.$index(0, t3) : null;
      t1.user = null;
      userOrNull = _this._getUserOrSelf$2(true, message.__fieldSet._$getIZ$1(0));
      if (userOrNull == null) {
        if (channel == null)
          channel = _this._lateRootChannel;
        if (channel == null)
          throw H.wrapException(T.ProtocolException$("Channel is null for a new user and there is no root channel! This should never happen!"));
        user = t1.user = new N.User(_this, message.__fieldSet._$getIZ$1(0), channel, H.setRuntimeTypeInfo([], type$.JSArray_UserListener));
        _this._users.$indexSet(0, message.__fieldSet._$getIZ$1(0), user);
        t2 = user;
        created = true;
      } else {
        t1.user = userOrNull;
        t2 = userOrNull;
        created = false;
      }
      if (message.__fieldSet._$has$1(2))
        t2._user$_name = message.__fieldSet._$getSZ$1(2);
      if (message.__fieldSet._$has$1(3))
        t2._userId = message.__fieldSet._$getIZ$1(3);
      t3 = channel != null;
      if (t3)
        t2._channel = channel;
      if (message.__fieldSet._$has$1(5))
        t2._mute = message.__fieldSet._$getBF$1(5);
      if (message.__fieldSet._$has$1(6))
        t2._deaf = message.__fieldSet._$getBF$1(6);
      if (message.__fieldSet._$has$1(7))
        t2._suppress = message.__fieldSet._$getBF$1(7);
      if (message.__fieldSet._$has$1(8))
        t2._selfMute = message.__fieldSet._$getBF$1(8);
      if (message.__fieldSet._$has$1(9))
        t2._selfDeaf = message.__fieldSet._$getBF$1(9);
      if (message.__fieldSet._$has$1(10))
        t2._texture = new Uint8Array(H._ensureNativeList(type$.List_int._as(message.__fieldSet._$getND$1(10))));
      if (message.__fieldSet._$has$1(13))
        t2._comment = message.__fieldSet._$getSZ$1(13);
      if (message.__fieldSet._$has$1(14))
        t2._hash = message.__fieldSet._$getSZ$1(14);
      if (message.__fieldSet._$has$1(15))
        t2._commentHash = new Uint8Array(H._ensureNativeList(type$.List_int._as(message.__fieldSet._$getND$1(15))));
      if (message.__fieldSet._$has$1(16))
        t2._textureHash = new Uint8Array(H._ensureNativeList(type$.List_int._as(message.__fieldSet._$getND$1(16))));
      if (message.__fieldSet._$has$1(17))
        t2._prioritySpeaker = message.__fieldSet._$getBF$1(17);
      if (message.__fieldSet._$has$1(18))
        t2._recording = message.__fieldSet._$getBF$1(18);
      t4 = message.__fieldSet._$has$1(2);
      t5 = message.__fieldSet._$has$1(3);
      t6 = message.__fieldSet._$has$1(5);
      t7 = message.__fieldSet._$has$1(6);
      t8 = message.__fieldSet._$has$1(7);
      t9 = message.__fieldSet._$has$1(8);
      t10 = message.__fieldSet._$has$1(9);
      t11 = message.__fieldSet._$has$1(10);
      t12 = message.__fieldSet._$has$1(13);
      t13 = message.__fieldSet._$has$1(14);
      t14 = message.__fieldSet._$has$1(15);
      t15 = message.__fieldSet._$has$1(16);
      t16 = message.__fieldSet._$has$1(17);
      t17 = message.__fieldSet._$has$1(18);
      if (created)
        _this.get$listeners().forEach$1(0, new S.MumbleClientBase__handleUserState_closure(t1));
      else
        t2._notifyUserUpdate$2$actor$changes(_this._getUserOrSelf$2(message.__fieldSet._$has$1(1), message.__fieldSet._$getIZ$1(1)), new N.UserChanges(t4, t5, t3, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17));
    },
    set$_lateAudio: function(_lateAudio) {
      this._lateAudio = type$.nullable_AudioClientBase._as(_lateAudio);
    }
  };
  S.MumbleClientBase_connect_closure.prototype = {
    call$2: function(e, stackTrace) {
      var t1, t2, t3;
      type$.StackTrace._as(stackTrace);
      t1 = this.syncCompleter;
      t2 = t1._base;
      t3 = t2.future._state === 0;
      if (!t3 && t1._completedWithoutError)
        this.client._client_base$_onError$2(type$.Object._as(e), stackTrace);
      else if (t3)
        t2.completeError$2(type$.Object._as(e), stackTrace);
    },
    $signature: 19
  };
  S.MumbleClientBase_connect_closure0.prototype = {
    call$1: function(message) {
      var e, stackTrace, t1, t2, t3, user, t4, $self, t5, t6, t7, t8, t9, t10, exception, _this = this, _null = null;
      type$.ProtobufPacket._as(message);
      if (message.type === 5) {
        t1 = _this.client;
        t2 = type$.ServerSync._as(F.decode(message));
        if (!t2.__fieldSet._$has$1(0))
          H.throwExpression(T.ProtocolException$("Bad message, session id missing!"));
        t3 = t1._users;
        user = t3.$index(0, t2.__fieldSet._$getIZ$1(0));
        if (user == null)
          H.throwExpression(T.ProtocolException$("A synced message was recevied, but not the own user object!"));
        t4 = user.session;
        $self = new N.Self(user._client, t4, user._channel, H.setRuntimeTypeInfo([], type$.JSArray_UserListener));
        $self._user$_name = user._user$_name;
        $self._userId = user._userId;
        $self._channel = user._channel;
        $self._mute = user._mute;
        $self._deaf = user._deaf;
        $self._suppress = user._suppress;
        $self._selfMute = user._selfMute;
        $self._selfDeaf = user._selfDeaf;
        $self._texture = user._texture;
        $self._comment = user._comment;
        $self._hash = user._hash;
        $self._commentHash = user._commentHash;
        $self._textureHash = user._textureHash;
        $self._prioritySpeaker = user._prioritySpeaker;
        $self._recording = user._recording;
        t1._lateSelf = $self;
        t3.remove$1(0, t4);
        t1 = t1._serverInfo;
        t4 = t1.config;
        t3 = t4 == null;
        t5 = t3 ? _null : t4.allowHtml;
        t6 = t3 ? _null : t4.maxImageMessageLength;
        t7 = t3 ? _null : t4.maxMessageLength;
        t8 = t3 ? _null : t4.maxUsers;
        if (t2.__fieldSet._$has$1(2))
          t9 = t2.__fieldSet._$getSZ$1(2);
        else
          t9 = t3 ? _null : t4.welcomeText;
        if (t2.__fieldSet._$has$1(1))
          t10 = t2.__fieldSet._$getIZ$1(1);
        else
          t10 = t3 ? _null : t4.maxBandwidth;
        if (t2.__fieldSet._$has$1(1))
          t2 = B.adjustNetworkBandwidth(t2.__fieldSet._$getIZ$1(1));
        else
          t2 = t3 ? _null : t4.suggestedOpusBitrate;
        t1.config = new G.ServerConfig(t5, t7, t6, t8, t2, t10, t9);
        _this.syncCompleter.complete$0();
      } else
        try {
          _this.client._onMessage$1(message);
        } catch (exception) {
          e = H.unwrapException(exception);
          stackTrace = H.getTraceFromException(exception);
          _this.handleError.call$2(e, stackTrace);
        }
    },
    $signature: 33
  };
  S.MumbleClientBase_connect_closure1.prototype = {
    call$0: function() {
      var t1 = this.syncCompleter,
        t2 = t1._base,
        t3 = t2.future._state === 0;
      if (!t3 && t1._completedWithoutError)
        this.client._onDone$0();
      else if (t3)
        t2.completeError$2(new T.ProtocolException("The mumble server closed the connection before syncing but without an error!"), null);
    },
    $signature: 0
  };
  S.MumbleClientBase__onError_closure.prototype = {
    call$1: function(listener) {
      type$.MumbleClientListener._as(listener);
      P.print("An error occured!");
      P.print(this.error);
      P.print(this.stackTrace);
      return null;
    },
    $signature: 1
  };
  S.MumbleClientBase__onDone_closure.prototype = {
    call$1: function(listener) {
      type$.MumbleClientListener._as(listener);
      P.print("onDone");
      return null;
    },
    $signature: 1
  };
  S.MumbleClientBase__onMessage_closure.prototype = {
    call$1: function(listener) {
      type$.MumbleClientListener._as(listener);
      return null;
    },
    $signature: 1
  };
  S.MumbleClientBase__onMessage_closure0.prototype = {
    call$1: function(listener) {
      type$.MumbleClientListener._as(listener);
      P.print("Permission denied!");
      P.print("This will occur if this example is run a second time, since it will try to create a channel that already exists!");
      P.print("The concrete exception was: " + this.permissionDeniedException.toString$0(0));
      return null;
    },
    $signature: 1
  };
  S.MumbleClientBase__onMessage_closure1.prototype = {
    call$1: function(listener) {
      type$.MumbleClientListener._as(listener);
      return null;
    },
    $signature: 1
  };
  S.MumbleClientBase__onMessage_closure2.prototype = {
    call$1: function(listener) {
      type$.MumbleClientListener._as(listener);
      type$.List_BanEntry._as(this.entries);
      return null;
    },
    $signature: 1
  };
  S.MumbleClientBase__onMessage_closure3.prototype = {
    call$1: function(user) {
      var t1, t2;
      type$.UserList_User._as(user);
      t1 = user.__fieldSet._$has$1(3);
      t2 = user.__fieldSet._$getIZ$1(3);
      return K.registeredUserFromProto(user, t1 ? this.$this._channels.$index(0, t2) : null);
    },
    $signature: 35
  };
  S.MumbleClientBase__onMessage_closure4.prototype = {
    call$1: function(listener) {
      type$.MumbleClientListener._as(listener);
      type$.List_RegisteredUser._as(this.users);
      return null;
    },
    $signature: 1
  };
  S.MumbleClientBase__onMessage_closure5.prototype = {
    call$1: function(listener) {
      type$.MumbleClientListener._as(listener);
      type$.Map_int_String._as(this._box_0.idsToNames);
      return null;
    },
    $signature: 1
  };
  S.MumbleClientBase__handleTextMessage_closure.prototype = {
    call$1: function(session) {
      return this.$this._getUserOrSelf$2(true, H._asInt(session));
    },
    $signature: 36
  };
  S.MumbleClientBase__handleTextMessage_closure0.prototype = {
    call$1: function(channel) {
      var t1 = this.$this._channels.$index(0, H._asInt(channel));
      return t1;
    },
    $signature: 23
  };
  S.MumbleClientBase__handleTextMessage_closure1.prototype = {
    call$1: function(channel) {
      var t1 = this.$this._channels.$index(0, H._asInt(channel));
      return t1;
    },
    $signature: 23
  };
  S.MumbleClientBase__handleTextMessage_closure2.prototype = {
    call$1: function(listener) {
      var t1, t2, t3;
      type$.MumbleClientListener._as(listener);
      t1 = this.msg;
      t2 = "[" + new P.DateTime(Date.now(), false).toString$0(0) + "] ";
      t3 = t1.actor;
      P.print(t2 + H.S(t3 == null ? null : t3._user$_name) + ": " + t1.message);
      return null;
    },
    $signature: 1
  };
  S.MumbleClientBase__handleChannelState_closure.prototype = {
    call$1: function(listener) {
      var t1, t2, msg;
      type$.MumbleClientListener._as(listener);
      t1 = this._box_0.channel;
      if (t1._channel$_name === "Dumble Test Channel") {
        t2 = listener.client.get$self();
        type$.nullable_List_String._as(null);
        msg = G.UserState_UserState();
        msg.$$_setUnsignedInt32$2(4, t1.channelId);
        msg.$$_setUnsignedInt32$2(0, t2.session);
        t2._client.writeMessage$1$1(msg, type$.UserState);
      }
      return null;
    },
    $signature: 1
  };
  S.MumbleClientBase__handleUserState_closure.prototype = {
    call$1: function(listener) {
      var t1;
      type$.MumbleClientListener._as(listener);
      t1 = this._box_0.user;
      C.JSArray_methods.add$1(t1.Notifier__listeners, H._instanceType(t1)._eval$1("Notifier.T")._as(listener));
      return null;
    },
    $signature: 1
  };
  S.ServerInfoBase.prototype = {};
  S._MumbleClientBase_MumbleClient_Notifier.prototype = {};
  V.Connection.prototype = {};
  N.ConnectionImp.prototype = {};
  N.ConnectionImp__asBinaryStream__sub_set.prototype = {
    call$1: function(t1) {
      return this._box_0._sub = t1;
    },
    $signature: 38
  };
  N.ConnectionImp__asBinaryStream__sub_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._sub;
      return t1 == null ? H.throwExpression(H.LateError$localNI("sub")) : t1;
    },
    $signature: 39
  };
  N.ConnectionImp__asBinaryStream_closure.prototype = {
    call$1: function($event) {
      var t1, t2, copy, _this = this;
      type$.Object._as($event);
      if ($event instanceof N._OpenEvent) {
        t1 = _this.open;
        if (t1.future._state === 0)
          t1.complete$0();
        else {
          t1 = _this.receive;
          t1.addError$1(new P._Exception("Received multiple open events!"));
          t1.close$0(0);
          _this._sub_get.call$0().cancel$0();
        }
      } else if (type$.CloseEvent._is($event)) {
        t1 = _this.open;
        if (t1.future._state === 0)
          t1.completeError$1($event);
        else {
          _this.receive.close$0(0);
          _this._sub_get.call$0().cancel$0();
        }
      } else if (type$.MessageEvent._is($event)) {
        t1 = $event.data;
        t2 = new P._AcceptStructuredCloneDart2Js([], []);
        t2.mustCopy = true;
        copy = t2.walk$1(t1);
        if (type$.List_int._is(copy))
          _this.receive.add$1(0, copy);
        else if (type$.TypedData._is(copy))
          _this.receive.add$1(0, H.NativeUint8List_NativeUint8List$view(copy.buffer, copy.byteOffset, copy.byteLength));
        else {
          t1 = _this.receive;
          if (type$.ByteBuffer._is(copy))
            t1.add$1(0, H.NativeUint8List_NativeUint8List$view(copy, 0, copy.byteLength));
          else {
            t1.addError$1(new P._Exception("Unrecognized data " + H.S(copy) + " in message event!"));
            t1.close$0(0);
            _this._sub_get.call$0().cancel$0();
          }
        }
      } else {
        t1 = _this.open;
        if (t1.future._state === 0)
          t1.completeError$1($event);
        else {
          t1 = _this.receive;
          t1.addError$1($event);
          t1.close$0(0);
          _this._sub_get.call$0().cancel$0();
        }
      }
    },
    $signature: 40
  };
  N.ConnectionImp__asBinaryStream_closure0.prototype = {
    call$0: function() {
      var t1 = this.open;
      if (t1.future._state === 0)
        t1.completeError$1(new P._Exception("onDone before onOpen!"));
      else
        this.receive.close$0(0);
    },
    $signature: 0
  };
  N.ConnectionImp__asBinaryStream_closure1.prototype = {
    call$2: function(error, trace) {
      var t1;
      type$.Object._as(error);
      type$.nullable_StackTrace._as(trace);
      t1 = this.open;
      if (t1.future._state === 0)
        t1.completeError$2(error, trace);
      else {
        t1 = this.receive;
        t1.addError$2(error, trace);
        t1.close$0(0);
      }
    },
    $signature: 41
  };
  N._AllStream_get_allEvents_closure.prototype = {
    call$0: function() {
      var t1 = this.subs,
        t2 = H._arrayInstanceType(t1);
      return P.Future_wait(new H.MappedListIterable(t1, t2._eval$1("Future<~>(1)")._as(new N._AllStream_get_allEvents__closure()), t2._eval$1("MappedListIterable<1,Future<~>>")), type$.void);
    },
    $signature: 42
  };
  N._AllStream_get_allEvents__closure.prototype = {
    call$1: function(e) {
      return type$.StreamSubscription_dynamic._as(e).cancel$0();
    },
    $signature: 43
  };
  N._AllStream_get_allEvents_closure0.prototype = {
    call$0: function() {
      if (--this._box_0.notDone === 0)
        this.controller.close$0(0);
    },
    $signature: 4
  };
  N._AllStream_get_allEvents_closure1.prototype = {
    call$1: function($event) {
      type$.Event._as($event);
      return new N._OpenEvent();
    },
    $signature: 44
  };
  N._OpenEvent.prototype = {};
  N._WebSocketDataSink.prototype = {
    add$1: function(_, $event) {
      this._ws.send(type$.List_int._as($event));
    }
  };
  Q.ConnectionOptions.prototype = {
    jsonMap$0: function() {
      var map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      map.$indexSet(0, "name", this.name);
      map.$indexSet(0, "tokens", C.List_empty0);
      map.$indexSet(0, "celtVersions", C.List_empty);
      map.$indexSet(0, "opus", true);
      map.$indexSet(0, "password", this.password);
      map.$indexSet(0, "incomingAudioStreamTimeout", C.Duration_500000);
      return map;
    }
  };
  Q._ConnectionOptions_Object_JsonString.prototype = {};
  T.ProtocolException.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  T.UnhandeledError.prototype = {
    toString$0: function(_) {
      var t1 = "UnhandeledError: An error occured in a MumlbeClient with no registered MumbleClientListeners.\nSince there is no one to report this error to, an UnhandeledError was thrown.\n\nThe error that caused this was:\n" + H.S(this.causeError) + "\n";
      return t1 + this.causeStackTrace.toString$0(0);
    }
  };
  G.Version.prototype = {
    get$info_: function() {
      return $.$get$Version__i();
    }
  };
  G.UDPTunnel.prototype = {
    get$info_: function() {
      return $.$get$UDPTunnel__i();
    }
  };
  G.Authenticate.prototype = {
    get$info_: function() {
      return $.$get$Authenticate__i();
    }
  };
  G.Ping.prototype = {
    get$info_: function() {
      return $.$get$Ping__i();
    }
  };
  G.Reject.prototype = {
    get$info_: function() {
      return $.$get$Reject__i();
    }
  };
  G.ServerSync.prototype = {
    get$info_: function() {
      return $.$get$ServerSync__i();
    }
  };
  G.ChannelRemove.prototype = {
    get$info_: function() {
      return $.$get$ChannelRemove__i();
    }
  };
  G.ChannelState.prototype = {
    get$info_: function() {
      return $.$get$ChannelState__i();
    }
  };
  G.UserRemove.prototype = {
    get$info_: function() {
      return $.$get$UserRemove__i();
    }
  };
  G.UserState.prototype = {
    get$info_: function() {
      return $.$get$UserState__i();
    }
  };
  G.BanList_BanEntry.prototype = {
    get$info_: function() {
      return $.$get$BanList_BanEntry__i();
    }
  };
  G.BanList.prototype = {
    get$info_: function() {
      return $.$get$BanList__i();
    }
  };
  G.TextMessage.prototype = {
    get$info_: function() {
      return $.$get$TextMessage__i();
    }
  };
  G.PermissionDenied.prototype = {
    get$info_: function() {
      return $.$get$PermissionDenied__i();
    }
  };
  G.ACL_ChanGroup.prototype = {
    get$info_: function() {
      return $.$get$ACL_ChanGroup__i();
    }
  };
  G.ACL_ChanACL.prototype = {
    get$info_: function() {
      return $.$get$ACL_ChanACL__i();
    }
  };
  G.ACL.prototype = {
    get$info_: function() {
      return $.$get$ACL__i();
    }
  };
  G.QueryUsers.prototype = {
    get$info_: function() {
      return $.$get$QueryUsers__i();
    }
  };
  G.CryptSetup.prototype = {
    get$info_: function() {
      return $.$get$CryptSetup__i();
    }
  };
  G.ContextActionModify.prototype = {
    get$info_: function() {
      return $.$get$ContextActionModify__i();
    }
  };
  G.ContextAction.prototype = {
    get$info_: function() {
      return $.$get$ContextAction__i();
    }
  };
  G.UserList_User.prototype = {
    get$info_: function() {
      return $.$get$UserList_User__i();
    }
  };
  G.UserList.prototype = {
    get$info_: function() {
      return $.$get$UserList__i();
    }
  };
  G.VoiceTarget_Target.prototype = {
    get$info_: function() {
      return $.$get$VoiceTarget_Target__i();
    }
  };
  G.VoiceTarget.prototype = {
    get$info_: function() {
      return $.$get$VoiceTarget__i();
    }
  };
  G.PermissionQuery.prototype = {
    get$info_: function() {
      return $.$get$PermissionQuery__i();
    }
  };
  G.CodecVersion.prototype = {
    get$info_: function() {
      return $.$get$CodecVersion__i();
    }
  };
  G.UserStats_Stats.prototype = {
    get$info_: function() {
      return $.$get$UserStats_Stats__i();
    }
  };
  G.UserStats0.prototype = {
    get$info_: function() {
      return $.$get$UserStats__i();
    }
  };
  G.RequestBlob.prototype = {
    get$info_: function() {
      return $.$get$RequestBlob__i();
    }
  };
  G.ServerConfig0.prototype = {
    get$info_: function() {
      return $.$get$ServerConfig__i();
    }
  };
  G.SuggestConfig.prototype = {
    get$info_: function() {
      return $.$get$SuggestConfig__i();
    }
  };
  G.PluginDataTransmission.prototype = {
    get$info_: function() {
      return $.$get$PluginDataTransmission__i();
    }
  };
  S.Reject_RejectType.prototype = {};
  S.PermissionDenied_DenyType.prototype = {};
  S.ContextActionModify_Operation.prototype = {};
  M.MumbleClientListener.prototype = {};
  M.UserListener.prototype = {};
  M.Notifier.prototype = {
    get$listeners: function() {
      return this.listeners$body$Notifier(H._instanceType(this)._eval$1("Notifier.T"));
    },
    listeners$body$Notifier: function($async$type) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError;
        return function $async$get$listeners($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._IterationMarker_yieldStar($async$self.Notifier__listeners);
              case 2:
                // after yield
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, $async$type);
    }
  };
  F._builders_closure.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.Version_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 45
  };
  F._builders_closure0.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.UDPTunnel_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 46
  };
  F._builders_closure1.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.Authenticate_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 26
  };
  F._builders_closure2.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.Ping_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 48
  };
  F._builders_closure3.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.Reject_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 49
  };
  F._builders_closure4.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.ServerSync_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 50
  };
  F._builders_closure5.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.ChannelRemove_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 51
  };
  F._builders_closure6.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.ChannelState_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 52
  };
  F._builders_closure7.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.UserRemove_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 53
  };
  F._builders_closure8.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.UserState_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 54
  };
  F._builders_closure9.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.BanList_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 55
  };
  F._builders_closure10.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.TextMessage_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 56
  };
  F._builders_closure11.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.PermissionDenied_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 57
  };
  F._builders_closure12.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.ACL_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 58
  };
  F._builders_closure13.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.QueryUsers_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 59
  };
  F._builders_closure14.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.CryptSetup_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 60
  };
  F._builders_closure15.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.ContextActionModify_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 61
  };
  F._builders_closure16.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.ContextAction_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 62
  };
  F._builders_closure17.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.UserList_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 63
  };
  F._builders_closure18.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.VoiceTarget_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 64
  };
  F._builders_closure19.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.PermissionQuery_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 65
  };
  F._builders_closure20.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.CodecVersion_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 66
  };
  F._builders_closure21.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.UserStats_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 67
  };
  F._builders_closure22.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.RequestBlob_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 68
  };
  F._builders_closure23.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.ServerConfig_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 69
  };
  F._builders_closure24.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.SuggestConfig_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 70
  };
  F._builders_closure25.prototype = {
    call$1: function(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = G.PluginDataTransmission_create();
      t1.mergeFromBuffer$2(bytes, C.C__EmptyExtensionRegistry);
      return t1;
    },
    $signature: 71
  };
  F.UnknownMessageException.prototype = {
    toString$0: function(_) {
      return "Tried to send or decode a message of unknown type " + H.S(this.requestedType);
    }
  };
  R.AudioCodec.prototype = {
    toString$0: function(_) {
      return this._audio$_name;
    }
  };
  R.TalkMode.prototype = {
    toString$0: function(_) {
      return this._audio$_name;
    }
  };
  R.PositionalInformation.prototype = {
    $index: function(_, index) {
      var _this = this;
      switch (index) {
        case 1:
          return _this.x;
        case 2:
          return _this.y;
        case 3:
          return _this.z;
        default:
          throw H.wrapException(P.IndexError$(index, _this, null, null, 3));
      }
    },
    toString$0: function(_) {
      return "PositionalInformation (" + H.S(this.x) + ", " + H.S(this.y) + ", " + H.S(this.z) + ")";
    }
  };
  T.BanEntry.prototype = {
    jsonMap$0: function() {
      var t1, t2, startString, _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      map.$indexSet(0, "address", _this.address);
      map.$indexSet(0, "_rawAddress", P.IterableBase_iterableToFullString(_this._rawAddress, "[", "]"));
      map.$indexSet(0, "mask", _this.mask);
      t1 = _this.name;
      if (t1 != null)
        map.$indexSet(0, "name", t1);
      t1 = _this.hash;
      t2 = t1 != null;
      if (t2)
        map.$indexSet(0, "hash", t1);
      if (t2) {
        t1 = _this.reason;
        t1.toString;
        map.$indexSet(0, "reason", t1);
      }
      t1 = _this.start;
      startString = t1 == null ? null : J.$add$ansx(C.JSArray_methods.get$first(t1.toIso8601String$0().split(".")), "Z");
      if (startString != null)
        map.$indexSet(0, "start", startString);
      t1 = _this.duration;
      if (t1 != null)
        map.$indexSet(0, "duration", C.JSInt_methods._tdivFast$1(t1._duration, 1000000));
      return map;
    }
  };
  T._BanEntry_Object_JsonString.prototype = {};
  N.ChannelChanges.prototype = {
    jsonMap$0: function() {
      var _this = this,
        t1 = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      t1.$indexSet(0, "parent", _this.parent);
      t1.$indexSet(0, "links", _this.links);
      t1.$indexSet(0, "name", _this.name);
      t1.$indexSet(0, "description", _this.description);
      t1.$indexSet(0, "temporary", _this.temporary);
      t1.$indexSet(0, "position", _this.position);
      t1.$indexSet(0, "descriptionHash", _this.descriptionHash);
      t1.$indexSet(0, "maxUsers", _this.maxUsers);
      return t1;
    }
  };
  N.Channel.prototype = {
    jsonMap$1$serializeParentRecursionDepth: function(serializeParentRecursionDepth) {
      var t1, t2, t3, _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      map.$indexSet(0, "channelId", _this.channelId);
      t1 = _this._parent;
      if (t1 != null)
        map.$indexSet(0, "parent", serializeParentRecursionDepth !== 0 ? t1.jsonMap$1$serializeParentRecursionDepth(serializeParentRecursionDepth - 1) : t1.channelId);
      t1 = type$.Channel;
      if (P.List_List$unmodifiable(_this._links, t1).length !== 0) {
        t1 = P.List_List$unmodifiable(_this._links, t1);
        t2 = H._arrayInstanceType(t1);
        t3 = t2._eval$1("MappedListIterable<1,int>");
        map.$indexSet(0, "links", P.List_List$of(new H.MappedListIterable(t1, t2._eval$1("int(1)")._as(new N.Channel_jsonMap_closure()), t3), true, t3._eval$1("ListIterable.E")));
      }
      t1 = _this._channel$_name;
      if (t1 != null)
        map.$indexSet(0, "name", t1);
      t1 = _this._description;
      if (t1 != null)
        map.$indexSet(0, "description", t1);
      t1 = _this._temporary;
      if (t1 != null)
        map.$indexSet(0, "temporary", t1);
      t1 = _this._position;
      if (t1 != null)
        map.$indexSet(0, "position", t1);
      t1 = _this._descriptionHash;
      if (t1 != null)
        map.$indexSet(0, "descriptionHash", t1);
      t1 = _this._maxUsers;
      if (t1 != null)
        map.$indexSet(0, "maxUsers", t1);
      return map;
    },
    jsonMap$0: function() {
      return this.jsonMap$1$serializeParentRecursionDepth(0);
    },
    _notifyChannelPermissions$1$permissions: function(permissions) {
      this.get$listeners().forEach$1(0, new N.Channel__notifyChannelPermissions_closure(this, permissions));
    },
    _notifyChannelUpdate$1$changes: function(changes) {
      this.get$listeners().forEach$1(0, new N.Channel__notifyChannelUpdate_closure(this, changes));
    },
    _notifyChannelRemoved$0: function() {
      this.get$listeners().forEach$1(0, new N.Channel__notifyChannelRemoved_closure(this));
    },
    set$_links: function(_links) {
      this._links = type$.List_Channel._as(_links);
    }
  };
  N.Channel_jsonMap_closure.prototype = {
    call$1: function(channel) {
      return type$.Channel._as(channel).channelId;
    },
    $signature: 8
  };
  N.Channel__notifyChannelPermissions_closure.prototype = {
    call$1: function(listener) {
      return type$.ChannelListener._as(listener).onChannelPermissionsReceived$2(this.$this, this.permissions);
    },
    $signature: 15
  };
  N.Channel__notifyChannelUpdate_closure.prototype = {
    call$1: function(listener) {
      return type$.ChannelListener._as(listener).onChannelChanged$2(this.$this, this.changes);
    },
    $signature: 15
  };
  N.Channel__notifyChannelRemoved_closure.prototype = {
    call$1: function(listener) {
      return type$.ChannelListener._as(listener).onChannelRemoved$1(this.$this);
    },
    $signature: 15
  };
  N._Channel_Object_Notifier.prototype = {};
  N._Channel_Object_Notifier_JsonString.prototype = {};
  N._ChannelChanges_Object_JsonString.prototype = {};
  M.CryptState.prototype = {
    jsonMap$0: function() {
      var t1 = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      t1.$indexSet(0, "key", this.key);
      t1.$indexSet(0, "clientNonce", this._clientNonce);
      t1.$indexSet(0, "serverNonce", this._serverNonce);
      return t1;
    }
  };
  M._CryptState_Object_JsonString.prototype = {};
  N.RejectType.prototype = {
    toString$0: function(_) {
      return this._model_exceptions$_name;
    }
  };
  N.RejectException.prototype = {
    toString$0: function(_) {
      var string = "RejectException (" + this.rejectType.toString$0(0) + ")" + (": " + this.reason);
      return string;
    }
  };
  N.DenyType.prototype = {
    toString$0: function(_) {
      return this._model_exceptions$_name;
    }
  };
  N.PermissionDeniedException.prototype = {
    toString$0: function(_) {
      var _this = this,
        t1 = _this.denyType,
        string = "PermissionDeniedException for user session " + H.S(_this.user) + " with reason " + t1.toString$0(0);
      switch (t1) {
        case C.DenyType_1:
          string = string + " in channel with id " + H.S(_this.channel) + " and denied permission " + H.S(_this.deniedPermission);
          break;
        case C.DenyType_8:
          string = string + "; tried using name " + H.S(_this.invalidUserName);
          break;
        default:
          break;
      }
      t1 = _this.reason;
      return t1 != null && t1.length !== 0 ? string + "\r\nReason: " + H.S(t1) : string;
    }
  };
  X.Permission.prototype = {
    get$hashCode: function(_) {
      return this.intValue;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other instanceof X.Permission)
        return (this.intValue | 134217728) >>> 0 === (other.intValue | 134217728) >>> 0;
      else
        return false;
    },
    jsonMap$0: function() {
      var _this = this,
        t1 = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      t1.$indexSet(0, "write", _this.write);
      t1.$indexSet(0, "traverse", _this.traverse);
      t1.$indexSet(0, "enter", _this.enter);
      t1.$indexSet(0, "speak", _this.speak);
      t1.$indexSet(0, "muteDeafen", _this.muteDeafen);
      t1.$indexSet(0, "move", _this.move);
      t1.$indexSet(0, "makeChannel", _this.makeChannel);
      t1.$indexSet(0, "linkChannel", _this.linkChannel);
      t1.$indexSet(0, "whisper", _this.whisper);
      t1.$indexSet(0, "textMessage", _this.textMessage);
      t1.$indexSet(0, "makeTempChannel", _this.makeTempChannel);
      t1.$indexSet(0, "listen", _this.listen);
      t1.$indexSet(0, "kick", _this.kick);
      t1.$indexSet(0, "ban", _this.ban);
      t1.$indexSet(0, "register", _this.register);
      t1.$indexSet(0, "selfRegister", _this.selfRegister);
      t1.$indexSet(0, "resetUserContent", _this.resetUserContent);
      return t1;
    }
  };
  X._Permission_Object_JsonString.prototype = {};
  K.RegisteredUser.prototype = {
    jsonMap$0: function() {
      var t1, _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      map.$indexSet(0, "userId", _this.userId);
      t1 = _this.name;
      if (t1 != null)
        map.$indexSet(0, "name", t1);
      t1 = _this.lastSeen;
      if (t1 != null)
        map.$indexSet(0, "lastSeen", t1.toIso8601String$0());
      t1 = _this.lastChannel;
      if (t1 != null) {
        t1 = t1.channelId;
        map.$indexSet(0, "channel", t1);
      }
      return map;
    }
  };
  K._RegisteredUser_Object_JsonString.prototype = {};
  G.ServerSuggestedClientConfig.prototype = {
    jsonMap$0: function() {
      var map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object),
        t1 = this.suggestedClientVersion;
      if (t1 != null)
        map.$indexSet(0, "suggestedClientVersion", t1);
      t1 = this.usePositionalAudio;
      if (t1 != null)
        map.$indexSet(0, "usePositionalAudio", t1);
      t1 = this.usePushToTalk;
      if (t1 != null)
        map.$indexSet(0, "usePushToTalk", t1);
      return map;
    }
  };
  G.ServerConfig.prototype = {
    jsonMap$0: function() {
      var _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object),
        t1 = _this.allowHtml;
      if (t1 != null)
        map.$indexSet(0, "allowHtml", t1);
      t1 = _this.maxMessageLength;
      if (t1 != null)
        map.$indexSet(0, "maxMessageLength", t1);
      t1 = _this.maxImageMessageLength;
      if (t1 != null)
        map.$indexSet(0, "maxImageMessageLength", t1);
      t1 = _this.maxUsers;
      if (t1 != null)
        map.$indexSet(0, "maxUsers", t1);
      t1 = _this.suggestedOpusBitrate;
      if (t1 != null)
        map.$indexSet(0, "suggestedOpusBitrate", t1);
      t1 = _this.maxBandwidth;
      if (t1 != null)
        map.$indexSet(0, "maxBandwidth", t1);
      t1 = _this.welcomeText;
      if (t1 != null)
        map.$indexSet(0, "welcomeText", t1);
      return map;
    }
  };
  G.ServerConnectionStats.prototype = {
    jsonMap$0: function() {
      var t1, _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      map.$indexSet(0, "packetStats", _this.packetStats.jsonMap$0());
      map.$indexSet(0, "pingStats", _this.pingStats.jsonMap$0());
      t1 = _this.tcpPacketCount;
      if (t1 != null)
        map.$indexSet(0, "tcpPacketCount", t1);
      t1 = _this.udpPacketCount;
      if (t1 != null)
        map.$indexSet(0, "udpPacketCount", t1);
      return map;
    }
  };
  G.ServerCodecVersion.prototype = {
    jsonMap$0: function() {
      var t1, _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      map.$indexSet(0, "celtAlphaVersion", _this.celtAlphaVersion);
      map.$indexSet(0, "celtBetaVersion", _this.celtBetaVersion);
      map.$indexSet(0, "preferAlpha", _this.preferAlpha);
      t1 = _this.opus;
      if (t1 != null)
        map.$indexSet(0, "opus", t1);
      return map;
    }
  };
  G._ServerCodecVersion_Object_JsonString.prototype = {};
  G._ServerConfig_Object_JsonString.prototype = {};
  G._ServerConnectionStats_Object_JsonString.prototype = {};
  G._ServerSuggestedClientConfig_Object_JsonString.prototype = {};
  Y.PacketStats.prototype = {
    jsonMap$0: function() {
      var _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object),
        t1 = _this.goodPacketCount;
      if (t1 != null)
        map.$indexSet(0, "goodPacketCount", t1);
      t1 = _this.latePacketCount;
      if (t1 != null)
        map.$indexSet(0, "latePacketCount", t1);
      t1 = _this.lostPacketCount;
      if (t1 != null)
        map.$indexSet(0, "lostPacketCount", t1);
      t1 = _this.resync;
      if (t1 != null)
        map.$indexSet(0, "resync", t1);
      return map;
    }
  };
  Y.VersionInformation.prototype = {
    jsonMap$0: function() {
      var _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object),
        t1 = _this.version;
      if (t1 != null)
        map.$indexSet(0, "version", t1);
      t1 = _this.release;
      if (t1 != null)
        map.$indexSet(0, "release", t1);
      t1 = _this.os;
      if (t1 != null)
        map.$indexSet(0, "os", t1);
      t1 = _this.osVersion;
      if (t1 != null)
        map.$indexSet(0, "osVersion", t1);
      return map;
    }
  };
  Y.PingStats.prototype = {
    jsonMap$0: function() {
      var _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object),
        t1 = _this.udpPingAverage;
      if (t1 != null)
        map.$indexSet(0, "udpPingAverage", t1);
      t1 = _this.udpPingVariance;
      if (t1 != null)
        map.$indexSet(0, "udpPingVariance", t1);
      t1 = _this.tcpPingAverage;
      if (t1 != null)
        map.$indexSet(0, "tcpPingAverage", t1);
      t1 = _this.tcpPingVariance;
      if (t1 != null)
        map.$indexSet(0, "tcpPingVariance", t1);
      return map;
    }
  };
  Y._PacketStats_Object_JsonString.prototype = {};
  Y._PingStats_Object_JsonString.prototype = {};
  Y._VersionInformation_Object_JsonString.prototype = {};
  Q.TextMessage0.prototype = {
    jsonMap$0: function() {
      var t1 = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object),
        t2 = this.channels,
        t3 = H._arrayInstanceType(t2);
      t1.$indexSet(0, "channels", new H.MappedListIterable(t2, t3._eval$1("int(1)")._as(new Q.TextMessage_jsonMap_closure()), t3._eval$1("MappedListIterable<1,int>")));
      t3 = this.trees;
      t2 = H._arrayInstanceType(t3);
      t1.$indexSet(0, "trees", new H.MappedListIterable(t3, t2._eval$1("int(1)")._as(new Q.TextMessage_jsonMap_closure0()), t2._eval$1("MappedListIterable<1,int>")));
      t1.$indexSet(0, "message", this.message);
      return t1;
    }
  };
  Q.TextMessage_jsonMap_closure.prototype = {
    call$1: function(channel) {
      return type$.Channel._as(channel).channelId;
    },
    $signature: 8
  };
  Q.TextMessage_jsonMap_closure0.prototype = {
    call$1: function(channel) {
      return type$.Channel._as(channel).channelId;
    },
    $signature: 8
  };
  Q.OutgoingTextMessage.prototype = {};
  Q.IncomingTextMessage.prototype = {
    jsonMap$0: function() {
      var map = this.super$TextMessage$jsonMap(),
        t1 = this.actor;
      if (t1 != null)
        map.$indexSet(0, "actor", t1.session);
      return map;
    }
  };
  Q._TextMessage_Object_JsonString.prototype = {};
  N.UserChanges.prototype = {
    jsonMap$0: function() {
      var _this = this,
        t1 = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      t1.$indexSet(0, "name", _this.name);
      t1.$indexSet(0, "userId", _this.userId);
      t1.$indexSet(0, "channel", _this.channel);
      t1.$indexSet(0, "mute", _this.mute);
      t1.$indexSet(0, "deaf", _this.deaf);
      t1.$indexSet(0, "supress", _this.supress);
      t1.$indexSet(0, "selfMute", _this.selfMute);
      t1.$indexSet(0, "selfDeaf", _this.selfDeaf);
      t1.$indexSet(0, "texture", _this.texture);
      t1.$indexSet(0, "comment", _this.comment);
      t1.$indexSet(0, "hash", _this.hash);
      t1.$indexSet(0, "commentHash", _this.commentHash);
      t1.$indexSet(0, "textureHash", _this.textureHash);
      t1.$indexSet(0, "prioritySpeaker", _this.prioritySpeaker);
      t1.$indexSet(0, "recording", _this.recording);
      return t1;
    }
  };
  N.Self.prototype = {};
  N.User.prototype = {
    jsonMap$0: function() {
      var t1, _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      map.$indexSet(0, "session", _this.session);
      t1 = _this._user$_name;
      if (t1 != null)
        map.$indexSet(0, "name", t1);
      t1 = _this._userId;
      if (t1 != null)
        map.$indexSet(0, "userId", t1);
      t1 = _this._channel;
      map.$indexSet(0, "channel", t1.channelId);
      t1 = _this._mute;
      if (t1 != null)
        map.$indexSet(0, "mute", t1);
      t1 = _this._deaf;
      if (t1 != null)
        map.$indexSet(0, "deaf", t1);
      t1 = _this._suppress;
      if (t1 != null)
        map.$indexSet(0, "suppress", t1);
      t1 = _this._selfMute;
      if (t1 != null)
        map.$indexSet(0, "selfMute", t1);
      t1 = _this._selfDeaf;
      if (t1 != null)
        map.$indexSet(0, "selfDeaf", t1);
      t1 = _this._texture;
      if (t1 != null)
        map.$indexSet(0, "texture", t1);
      t1 = _this._comment;
      if (t1 != null)
        map.$indexSet(0, "comment", t1);
      t1 = _this._hash;
      if (t1 != null)
        map.$indexSet(0, "hash", t1);
      t1 = _this._commentHash;
      if (t1 != null)
        map.$indexSet(0, "commentHash", t1);
      t1 = _this._textureHash;
      if (t1 != null)
        map.$indexSet(0, "textureHash", t1);
      t1 = _this._prioritySpeaker;
      if (t1 != null)
        map.$indexSet(0, "prioritySpeaker", t1);
      t1 = _this._recording;
      if (t1 != null)
        map.$indexSet(0, "recording", t1);
      return map;
    },
    _notifyUserUpdate$2$actor$changes: function(actor, changes) {
      this.get$listeners().forEach$1(0, new N.User__notifyUserUpdate_closure(this, actor, changes));
    },
    _notifyUserRemoved$3$actor$ban$reason: function(actor, ban, reason) {
      this.get$listeners().forEach$1(0, new N.User__notifyUserRemoved_closure(this, actor, reason, ban));
    },
    _reportUserStats$1$stats: function(stats) {
      this.get$listeners().forEach$1(0, new N.User__reportUserStats_closure(this, stats));
    }
  };
  N.User__notifyUserUpdate_closure.prototype = {
    call$1: function(listener) {
      var t1, t2, t3, msg, _result;
      type$.UserListener._as(listener);
      t1 = this.$this;
      t2 = this.changes;
      P.print("User " + t1.toString$0(0) + " changed " + t2.toString$0(0));
      if (t2.channel) {
        t2 = t1._channel;
        t3 = listener.client;
        if (t2 === t3.get$self()._channel) {
          t2 = t3.get$self()._channel;
          t1 = t1._user$_name;
          t1 = "Hello " + H.S(t1) + "!";
          msg = Q.OutgoingTextMessage$(H.setRuntimeTypeInfo([t2], type$.JSArray_Channel), t1, null);
          _result = G.TextMessage_create();
          _result.__fieldSet._$set$2(4, msg.message);
          t1 = msg.trees;
          if (t1.length !== 0) {
            t3 = H._arrayInstanceType(t1);
            J.addAll$1$ax(_result.__fieldSet._$getList$1$1(3, type$.int), new H.MappedListIterable(t1, t3._eval$1("int(1)")._as(S.client_base___channelToId$closure()), t3._eval$1("MappedListIterable<1,int>")));
          }
          t1 = msg.channels;
          if (t1.length !== 0) {
            t3 = H._arrayInstanceType(t1);
            J.addAll$1$ax(_result.__fieldSet._$getList$1$1(2, type$.int), new H.MappedListIterable(t1, t3._eval$1("int(1)")._as(S.client_base___channelToId$closure()), t3._eval$1("MappedListIterable<1,int>")));
          }
          t1 = msg.clients;
          if (t1.length !== 0) {
            t3 = H._arrayInstanceType(t1);
            J.addAll$1$ax(_result.__fieldSet._$getList$1$1(1, type$.int), new H.MappedListIterable(t1, t3._eval$1("int(1)")._as(S.client_base___userToId$closure()), t3._eval$1("MappedListIterable<1,int>")));
          }
          t2._channel$_client.writeMessage$1$1(_result, type$.TextMessage);
        }
      }
      return null;
    },
    $signature: 16
  };
  N.User__notifyUserRemoved_closure.prototype = {
    call$1: function(listener) {
      var t1, t2, t3, _this = this;
      type$.UserListener._as(listener);
      t1 = _this.$this;
      t2 = _this.actor;
      t3 = _this.reason;
      if (t2 == null)
        if (t1 === listener.client.get$self())
          P.print("We were removed from the server, reason: " + t3);
        else
          P.print(H.S(t1._user$_name) + " left the server");
      else {
        t1 = t1._user$_name;
        if (_this.ban)
          P.print(H.S(t1) + " was banned by " + H.S(t2._user$_name) + ", reason " + t3 + ".");
        else
          P.print(H.S(t1) + " was kicked by " + H.S(t2._user$_name) + ", reason " + t3 + ".");
      }
      return null;
    },
    $signature: 16
  };
  N.User__reportUserStats_closure.prototype = {
    call$1: function(listener) {
      type$.UserListener._as(listener);
      return null;
    },
    $signature: 16
  };
  N._User_Object_Notifier.prototype = {};
  N._User_Object_Notifier_JsonString.prototype = {};
  N._UserChanges_Object_JsonString.prototype = {};
  A.UserStats.prototype = {
    jsonMap$0: function() {
      var t1, _this = this,
        map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      map.$indexSet(0, "pingStats", _this.pingStats.jsonMap$0());
      t1 = _this.certificates.length;
      if (t1 !== 0)
        map.$indexSet(0, "certificates", t1);
      t1 = _this.fromServer;
      if (t1 != null)
        map.$indexSet(0, "fromServer", t1.jsonMap$0());
      map.$indexSet(0, "udpPacketCount", _this.udpPacketCount);
      map.$indexSet(0, "tcpPacketCount", _this.tcpPacketCount);
      t1 = _this.clientVersion;
      if (t1 != null)
        map.$indexSet(0, "clientVersion", t1.jsonMap$0());
      map.$indexSet(0, "celtVersions", _this.celtVersions);
      t1 = _this.address;
      if (t1 != null)
        map.$indexSet(0, "address", t1);
      map.$indexSet(0, "bandwidth", _this.bandwidth);
      t1 = _this.onlineTime;
      if (t1 != null)
        map.$indexSet(0, "onlineTime", t1.toString$0(0));
      t1 = _this.idleTime;
      if (t1 != null)
        map.$indexSet(0, "idleTime", t1.toString$0(0));
      map.$indexSet(0, "strongCertificate", _this.strongCertificate);
      map.$indexSet(0, "opus", _this.opus);
      return map;
    }
  };
  A._UserStats_Object_JsonString.prototype = {};
  L.PlatformOptions.prototype = {};
  L._PlatformOptions_Object_JsonString.prototype = {};
  B.PlatformOptionsWeb.prototype = {
    jsonMap$0: function() {
      var map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_String_Object);
      map.$indexSet(0, "uri", this.uri);
      return map;
    }
  };
  M.ProtobufHeaderPrepender.prototype = {
    add$1: function(_, $event) {
      var t1, t2,
        header = new DataView(new ArrayBuffer(6));
      C.NativeByteData_methods._setUint16$3(header, 0, $event.type, false);
      t1 = $event.data;
      C.NativeByteData_methods._setUint32$3(header, 2, t1.byteLength, false);
      t2 = this._wrapped;
      t2.add$1(0, H.NativeUint8List_NativeUint8List$view(header.buffer, 0, null));
      type$.StreamSink_List_int._as(t2).add$1(0, t1);
    }
  };
  D.ProtobufPacket.prototype = {
    get$length: function(_) {
      return this.data.byteLength;
    }
  };
  X.ProtobufStreamTransformer.prototype = {
    bind$1: function(stream) {
      return this.bind$body$ProtobufStreamTransformer(type$.Stream_Uint8List._as(stream));
    },
    bind$body$ProtobufStreamTransformer: function(stream) {
      var $async$bind$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        switch ($async$errorCode) {
          case 2:
            $async$next = $async$nextWhenCanceled;
            $async$goto = $async$next.pop();
            break;
          case 1:
            $async$currentError = $async$result;
            $async$goto = $async$handler;
        }
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                index = 0;
                out = null;
                outLength = null;
                header = new DataView(new ArrayBuffer(6));
                headerIndex = 0;
                currentType = null;
                t1 = new P._StreamIterator(H.checkNotNullable(stream, "stream", type$.Object), type$._StreamIterator_Uint8List);
                $async$handler = 3;
              case 6:
                // for condition
                $async$temp1 = H;
                $async$goto = 8;
                return P._asyncStarHelper(t1.moveNext$0(), $async$bind$1, $async$controller);
              case 8:
                // returning from await.
                if (!$async$temp1.boolConversionCheck($async$result)) {
                  // goto after for
                  $async$goto = 7;
                  break;
                }
                bytes = t1.get$current();
                bytesIndex = 0;
                bytesLeft = J.get$length$asx(bytes);
              case 9:
                // while condition
                t2 = bytesLeft;
                if (typeof t2 !== "number") {
                  t2.$gt();
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                if (!(t2 > 0)) {
                  // goto after while
                  $async$goto = 10;
                  break;
                }
                if (!J.$eq$(headerIndex, 6)) {
                  t2 = headerIndex;
                  if (typeof t2 !== "number") {
                    H.iae(t2);
                    $async$next = [1];
                    // goto finally
                    $async$goto = 4;
                    break;
                  }
                  needed = 6 - t2;
                  t2 = bytesLeft;
                  t3 = needed;
                  if (typeof t2 !== "number") {
                    t2.$gt();
                    $async$next = [1];
                    // goto finally
                    $async$goto = 4;
                    break;
                  }
                  if (typeof t3 !== "number") {
                    H.iae(t3);
                    $async$next = [1];
                    // goto finally
                    $async$goto = 4;
                    break;
                  }
                  add = t2 > t3 ? needed : bytesLeft;
                  i = 0;
                  while (true) {
                    t2 = i;
                    t3 = add;
                    if (typeof t2 !== "number") {
                      t2.$lt();
                      $async$next = [1];
                      // goto finally
                      $async$goto = 4;
                      break $async$outer;
                    }
                    if (typeof t3 !== "number") {
                      H.iae(t3);
                      $async$next = [1];
                      // goto finally
                      $async$goto = 4;
                      break $async$outer;
                    }
                    if (!(t2 < t3))
                      break;
                    t2 = headerIndex;
                    t3 = i;
                    t4 = bytesIndex;
                    if (typeof t3 !== "number") {
                      t3.$add();
                      $async$next = [1];
                      // goto finally
                      $async$goto = 4;
                      break $async$outer;
                    }
                    if (typeof t4 !== "number") {
                      H.iae(t4);
                      $async$next = [1];
                      // goto finally
                      $async$goto = 4;
                      break $async$outer;
                    }
                    J.setUint8$2$x(header, t2, J.$index$asx(bytes, t3 + t4));
                    t4 = headerIndex;
                    if (typeof t4 !== "number") {
                      t4.$add();
                      $async$next = [1];
                      // goto finally
                      $async$goto = 4;
                      break $async$outer;
                    }
                    headerIndex = t4 + 1;
                    t2 = i;
                    if (typeof t2 !== "number") {
                      t2.$add();
                      $async$next = [1];
                      // goto finally
                      $async$goto = 4;
                      break $async$outer;
                    }
                    i = t2 + 1;
                  }
                  t2 = bytesIndex;
                  t3 = add;
                  if (typeof t2 !== "number") {
                    t2.$add();
                    $async$next = [1];
                    // goto finally
                    $async$goto = 4;
                    break;
                  }
                  if (typeof t3 !== "number") {
                    H.iae(t3);
                    $async$next = [1];
                    // goto finally
                    $async$goto = 4;
                    break;
                  }
                  bytesIndex = t2 + t3;
                  t3 = bytesLeft;
                  t2 = add;
                  if (typeof t3 !== "number") {
                    t3.$sub();
                    $async$next = [1];
                    // goto finally
                    $async$goto = 4;
                    break;
                  }
                  if (typeof t2 !== "number") {
                    H.iae(t2);
                    $async$next = [1];
                    // goto finally
                    $async$goto = 4;
                    break;
                  }
                  bytesLeft = t3 - t2;
                  if (J.$eq$(headerIndex, 6)) {
                    currentType = J._getUint16$2$x(header, 0, false);
                    outLength = J._getUint32$2$x(header, 2, false);
                  }
                }
                t2 = bytesLeft;
                if (typeof t2 !== "number") {
                  t2.$gt();
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                $async$goto = t2 > 0 && outLength != null ? 11 : 12;
                break;
              case 11:
                // then
                t2 = outLength;
                t3 = bytesLeft;
                if (typeof t2 !== "number") {
                  t2.$le();
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                if (typeof t3 !== "number") {
                  H.iae(t3);
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                $async$goto = t2 <= t3 && out == null ? 13 : 15;
                break;
              case 13:
                // then
                t2 = bytes.buffer;
                t3 = bytesIndex;
                t4 = bytes.byteOffset;
                if (typeof t3 !== "number") {
                  t3.$add();
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                t4 = t3 + t4;
                t3 = outLength;
                data = t3 == null ? new Uint8Array(t2, t4) : new Uint8Array(t2, t4, t3);
                t2 = currentType;
                t2.toString;
                $async$goto = 16;
                $async$nextWhenCanceled = [1, 4];
                return P._asyncStarHelper(P._IterationMarker_yieldSingle(new D.ProtobufPacket(t2, data)), $async$bind$1, $async$controller);
              case 16:
                // after yield
                t2 = bytesIndex;
                t3 = outLength;
                if (typeof t2 !== "number") {
                  t2.$add();
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                if (typeof t3 !== "number") {
                  H.iae(t3);
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                bytesIndex = t2 + t3;
                t3 = bytesLeft;
                t2 = outLength;
                if (typeof t3 !== "number") {
                  t3.$sub();
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                if (typeof t2 !== "number") {
                  H.iae(t2);
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                bytesLeft = t3 - t2;
                outLength = null;
                headerIndex = 0;
                // goto join
                $async$goto = 14;
                break;
              case 15:
                // else
                if (out == null) {
                  t2 = outLength;
                  out = new Uint8Array(t2);
                  index = 0;
                }
                t2 = outLength;
                t3 = index;
                if (typeof t2 !== "number") {
                  t2.$sub();
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                if (typeof t3 !== "number") {
                  H.iae(t3);
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                needed0 = t2 - t3;
                t2 = bytesLeft;
                t3 = needed0;
                if (typeof t2 !== "number") {
                  t2.$gt();
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                if (typeof t3 !== "number") {
                  H.iae(t3);
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                add0 = t2 > t3 ? needed0 : bytesLeft;
                t4 = out;
                t5 = index;
                t6 = index;
                t7 = add0;
                if (typeof t6 !== "number") {
                  t6.$add();
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                if (typeof t7 !== "number") {
                  H.iae(t7);
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                J.setRange$4$ax(t4, t5, t6 + t7, bytes, bytesIndex);
                t7 = bytesIndex;
                t6 = add0;
                if (typeof t7 !== "number") {
                  t7.$add();
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                if (typeof t6 !== "number") {
                  H.iae(t6);
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                bytesIndex = t7 + t6;
                t6 = bytesLeft;
                t7 = add0;
                if (typeof t6 !== "number") {
                  t6.$sub();
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                if (typeof t7 !== "number") {
                  H.iae(t7);
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                bytesLeft = t6 - t7;
                t7 = index;
                t6 = add0;
                if (typeof t7 !== "number") {
                  t7.$add();
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                if (typeof t6 !== "number") {
                  H.iae(t6);
                  $async$next = [1];
                  // goto finally
                  $async$goto = 4;
                  break;
                }
                index = t7 + t6;
                $async$goto = J.$eq$(outLength, index) ? 17 : 18;
                break;
              case 17:
                // then
                t2 = currentType;
                t2.toString;
                $async$goto = 19;
                $async$nextWhenCanceled = [1, 4];
                return P._asyncStarHelper(P._IterationMarker_yieldSingle(new D.ProtobufPacket(t2, out)), $async$bind$1, $async$controller);
              case 19:
                // after yield
                out = null;
                outLength = null;
                headerIndex = 0;
              case 18:
                // join
              case 14:
                // join
              case 12:
                // join
                // goto while condition
                $async$goto = 9;
                break;
              case 10:
                // after while
                // goto for condition
                $async$goto = 6;
                break;
              case 7:
                // after for
                $async$next.push(5);
                // goto finally
                $async$goto = 4;
                break;
              case 3:
                // uncaught
                $async$next = [2];
              case 4:
                // finally
                $async$handler = 2;
                $async$goto = 20;
                return P._asyncStarHelper(t1.cancel$0(), $async$bind$1, $async$controller);
              case 20:
                // returning from await.
                // goto the next finally handler
                $async$goto = $async$next.pop();
                break;
              case 5:
                // after finally
                if (!J.$eq$(headerIndex, 0))
                  throw H.wrapException(new X.DataLeftException());
              case 1:
                // return
                return P._asyncStarHelper(null, 0, $async$controller);
              case 2:
                // rethrow
                return P._asyncStarHelper($async$currentError, 1, $async$controller);
            }
      });
      var $async$goto = 0,
        $async$controller = P._makeAsyncStarStreamController($async$bind$1, type$.ProtobufPacket),
        $async$nextWhenCanceled, $async$handler = 2, $async$currentError, $async$next = [], bytes, bytesIndex, bytesLeft, needed, add, i, data, needed0, add0, t2, t3, t4, t5, t6, t7, index, out, outLength, header, headerIndex, currentType, t1, $async$temp1;
      return P._streamOfController($async$controller);
    }
  };
  X.DataLeftException.prototype = {
    toString$0: function(_) {
      return "The stream bound to this transformer was closed or contains no more elements, but there is an unfinished message still in construction.";
    }
  };
  V.ExtendedCompleter.prototype = {
    complete$1: function(value) {
      var t1;
      this.$ti._eval$1("1/?")._as(value);
      t1 = this._base;
      if (t1.future._state === 0)
        this._completedWithoutError = true;
      t1.complete$1(value);
    },
    complete$0: function() {
      return this.complete$1(null);
    },
    completeError$2: function(error, stackTrace) {
      this._base.completeError$2(error, stackTrace);
    },
    $isCompleter: 1
  };
  B.JsonString.prototype = {
    toString$0: function(_) {
      return P._JsonStringStringifier_stringify(this.jsonMap$0(), null, "\t");
    }
  };
  B.FilterNullList_filterNull_closure.prototype = {
    call$1: function($event) {
      return this.T._eval$1("0?")._as($event) != null;
    },
    $signature: function() {
      return this.T._eval$1("bool(0?)");
    }
  };
  Z.VarIntResult.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof Z.VarIntResult && other.value === this.value && other.lengthInBytes === this.lengthInBytes;
    },
    get$hashCode: function(_) {
      return this.value + this.lengthInBytes;
    },
    toString$0: function(_) {
      return "VarIntResult(value: " + this.value + ", lengthInBytes: " + this.lengthInBytes + ")";
    },
    get$value: function() {
      return this.value;
    }
  };
  V.Int64.prototype = {
    $and: function(_, other) {
      var o = V.Int64__promote(other);
      return new V.Int64(this._l & o._l & 4194303, this._m & o._m & 4194303, this._h & o._h & 1048575);
    },
    $shl: function(_, n) {
      var t1, res0, t2, t3, res1, res2, _this = this;
      if (n >= 64)
        return C.Int64_0_0_0;
      if (n < 22) {
        t1 = _this._l;
        res0 = C.JSInt_methods._shlPositive$1(t1, n);
        t2 = _this._m;
        t3 = 22 - n;
        res1 = C.JSInt_methods._shlPositive$1(t2, n) | C.JSInt_methods._shrReceiverPositive$1(t1, t3);
        res2 = C.JSInt_methods._shlPositive$1(_this._h, n) | C.JSInt_methods._shrReceiverPositive$1(t2, t3);
      } else {
        t1 = _this._l;
        if (n < 44) {
          t2 = n - 22;
          res1 = C.JSInt_methods.$shl(t1, t2);
          res2 = C.JSInt_methods.$shl(_this._m, t2) | C.JSInt_methods._shrReceiverPositive$1(t1, 44 - n);
        } else {
          res2 = C.JSInt_methods.$shl(t1, n - 44);
          res1 = 0;
        }
        res0 = 0;
      }
      return new V.Int64(res0 & 4194303, res1 & 4194303, res2 & 1048575);
    },
    $shr: function(_, n) {
      var a2, negative, res2, t1, t2, res1, res0, _this = this, _1048575 = 1048575, _4194303 = 4194303;
      if (n >= 64)
        return (_this._h & 524288) !== 0 ? C.Int64_4194303_4194303_1048575 : C.Int64_0_0_0;
      a2 = _this._h;
      negative = (a2 & 524288) !== 0;
      if (negative && true)
        a2 += 3145728;
      if (n < 22) {
        res2 = V.Int64__shiftRight(a2, n);
        if (negative)
          res2 |= ~C.JSInt_methods._shrBothPositive$1(_1048575, n) & 1048575;
        t1 = _this._m;
        t2 = 22 - n;
        res1 = V.Int64__shiftRight(t1, n) | C.JSInt_methods.$shl(a2, t2);
        res0 = V.Int64__shiftRight(_this._l, n) | C.JSInt_methods.$shl(t1, t2);
      } else if (n < 44) {
        res2 = negative ? _1048575 : 0;
        t1 = n - 22;
        res1 = V.Int64__shiftRight(a2, t1);
        if (negative)
          res1 |= ~C.JSInt_methods._shrReceiverPositive$1(_4194303, t1) & 4194303;
        res0 = V.Int64__shiftRight(_this._m, t1) | C.JSInt_methods.$shl(a2, 44 - n);
      } else {
        res2 = negative ? _1048575 : 0;
        res1 = negative ? _4194303 : 0;
        t1 = n - 44;
        res0 = V.Int64__shiftRight(a2, t1);
        if (negative)
          res0 |= ~C.JSInt_methods._shrReceiverPositive$1(_4194303, t1) & 4194303;
      }
      return new V.Int64(res0 & 4194303, res1 & 4194303, res2 & 1048575);
    },
    $eq: function(_, other) {
      var o, _this = this;
      if (other == null)
        return false;
      if (other instanceof V.Int64)
        o = other;
      else if (H._isInt(other)) {
        if (_this._h === 0 && _this._m === 0)
          return _this._l === other;
        if ((other & 4194303) === other)
          return false;
        o = V.Int64_Int64(other);
      } else
        o = null;
      if (o != null)
        return _this._l === o._l && _this._m === o._m && _this._h === o._h;
      return false;
    },
    compareTo$1: function(_, other) {
      return this._compareTo$1(other);
    },
    _compareTo$1: function(other) {
      var o = V.Int64__promote(other),
        t1 = this._h,
        signa = t1 >>> 19,
        t2 = o._h;
      if (signa !== t2 >>> 19)
        return signa === 0 ? 1 : -1;
      if (t1 > t2)
        return 1;
      else if (t1 < t2)
        return -1;
      t1 = this._m;
      t2 = o._m;
      if (t1 > t2)
        return 1;
      else if (t1 < t2)
        return -1;
      t1 = this._l;
      t2 = o._l;
      if (t1 > t2)
        return 1;
      else if (t1 < t2)
        return -1;
      return 0;
    },
    get$hashCode: function(_) {
      var t1 = this._m;
      return (((t1 & 1023) << 22 | this._l) ^ (this._h << 12 | t1 >>> 10 & 4095)) >>> 0;
    },
    toUnsigned$1: function(_, width) {
      var t1, _this = this;
      if (width > 64)
        throw H.wrapException(P.RangeError$range(width, 0, 64, null, null));
      if (width > 44)
        return new V.Int64(_this._l & 4194303, _this._m & 4194303, _this._h & C.JSInt_methods.$shl(1, width - 44) - 1 & 1048575);
      else {
        t1 = _this._l;
        if (width > 22)
          return new V.Int64(t1 & 4194303, _this._m & C.JSInt_methods.$shl(1, width - 22) - 1 & 4194303, 0);
        else
          return new V.Int64(t1 & C.JSInt_methods._shlPositive$1(1, width) - 1 & 4194303, 0, 0);
      }
    },
    toInt$0: function(_) {
      var l = this._l,
        m = this._m,
        h = this._h;
      if ((h & 524288) !== 0)
        return -(1 + (~l & 4194303) + 4194304 * (~m & 4194303) + 17592186044416 * (~h & 1048575));
      else
        return l + 4194304 * m + 17592186044416 * h;
    },
    toString$0: function(_) {
      var d00, d10, sign,
        d0 = this._l,
        d1 = this._m,
        d2 = this._h;
      if ((d2 & 524288) !== 0) {
        d0 = 0 - d0;
        d00 = d0 & 4194303;
        d1 = 0 - d1 - (C.JSInt_methods._shrOtherPositive$1(d0, 22) & 1);
        d10 = d1 & 4194303;
        d2 = 0 - d2 - (C.JSInt_methods._shrOtherPositive$1(d1, 22) & 1) & 1048575;
        d1 = d10;
        d0 = d00;
        sign = "-";
      } else
        sign = "";
      return V.Int64__toRadixStringUnsigned(10, d0, d1, d2, sign);
    },
    $isComparable: 1
  };
  M.BuilderInfo.prototype = {
    add$1$8$protoName: function(_, tagNumber, $name, fieldType, defaultOrMaker, subBuilder, $valueOf, enumValues, protoName, $T) {
      var index, fieldInfo, t1, _null = null;
      type$.nullable_GeneratedMessage_Function._as(subBuilder);
      type$.nullable_nullable_ProtobufEnum_Function_int._as($valueOf);
      type$.nullable_List_ProtobufEnum._as(enumValues);
      index = this.byIndex.length;
      if (tagNumber === 0)
        fieldInfo = new M.FieldInfo("<removed field>", 0, index, 0, _null, _null, _null, _null, type$.FieldInfo_dynamic);
      else {
        t1 = M.FieldInfo_findMakeDefault(fieldType, defaultOrMaker);
        if (protoName == null)
          M._unCamelCase($name);
        fieldInfo = new M.FieldInfo($name, tagNumber, index, fieldType, t1, subBuilder, $valueOf, _null, $T._eval$1("FieldInfo<0>"));
      }
      this._addField$1(fieldInfo);
    },
    addRepeated$1$8$protoName: function(tagNumber, $name, fieldType, check, subBuilder, $valueOf, enumValues, protoName, $T) {
      $T._eval$1("~(0?)")._as(check);
      type$.nullable_GeneratedMessage_Function._as(subBuilder);
      type$.nullable_nullable_ProtobufEnum_Function_int._as($valueOf);
      type$.nullable_List_ProtobufEnum._as(enumValues);
      this._addField$1(M.FieldInfo$repeated($name, tagNumber, this.byIndex.length, fieldType, check, subBuilder, enumValues, protoName, $valueOf, $T));
    },
    _addField$1: function(fi) {
      var t1, _this = this;
      C.JSArray_methods.add$1(_this.byIndex, fi);
      t1 = fi.tagNumber;
      if (t1 !== 0) {
        _this.fieldInfo.$indexSet(0, t1, fi);
        _this.byTagAsString.$indexSet(0, "" + t1, fi);
        _this.byName.$indexSet(0, fi.name, fi);
      }
    },
    a$1$5$defaultOrMaker$protoName: function(tagNumber, $name, fieldType, defaultOrMaker, protoName, $T) {
      this.add$1$8$protoName(0, tagNumber, $name, fieldType, defaultOrMaker, null, null, null, protoName, $T);
    },
    a$1$3: function(tagNumber, $name, fieldType, $T) {
      return this.a$1$5$defaultOrMaker$protoName(tagNumber, $name, fieldType, null, null, $T);
    },
    a$1$4$defaultOrMaker: function(tagNumber, $name, fieldType, defaultOrMaker, $T) {
      return this.a$1$5$defaultOrMaker$protoName(tagNumber, $name, fieldType, defaultOrMaker, null, $T);
    },
    a$1$4$protoName: function(tagNumber, $name, fieldType, protoName, $T) {
      return this.a$1$5$defaultOrMaker$protoName(tagNumber, $name, fieldType, null, protoName, $T);
    },
    aOS$3$protoName: function(tagNumber, $name, protoName) {
      var _null = null;
      this.add$1$8$protoName(0, tagNumber, $name, 64, _null, _null, _null, _null, protoName, type$.String);
    },
    aOS$2: function(tagNumber, $name) {
      return this.aOS$3$protoName(tagNumber, $name, null);
    },
    pPS$2: function(tagNumber, $name) {
      var _null = null;
      this.addRepeated$1$8$protoName(tagNumber, $name, 66, M.getCheckFunction(66), _null, _null, _null, _null, type$.String);
    },
    aQS$2: function(tagNumber, $name) {
      var _null = null;
      this.add$1$8$protoName(0, tagNumber, $name, 65, _null, _null, _null, _null, _null, type$.String);
    },
    aOB$2: function(tagNumber, $name) {
      var _null = null;
      this.add$1$8$protoName(0, tagNumber, $name, 16, _null, _null, _null, _null, _null, type$.bool);
    },
    e$1$6$defaultOrMaker$enumValues$valueOf: function(tagNumber, $name, fieldType, defaultOrMaker, enumValues, $valueOf, $T) {
      this.add$1$8$protoName(0, tagNumber, $name, fieldType, defaultOrMaker, null, type$.nullable_nullable_ProtobufEnum_Function_int._as($valueOf), type$.nullable_List_ProtobufEnum._as(enumValues), null, $T);
    },
    p$1$4$protoName: function(tagNumber, $name, fieldType, protoName, $T) {
      this.addRepeated$1$8$protoName(tagNumber, $name, fieldType, M.getCheckFunction(fieldType), null, null, null, protoName, $T);
    },
    p$1$3: function(tagNumber, $name, fieldType, $T) {
      return this.p$1$4$protoName(tagNumber, $name, fieldType, null, $T);
    },
    pc$1$4$subBuilder: function(tagNumber, $name, fieldType, subBuilder, $T) {
      this.addRepeated$1$8$protoName(tagNumber, $name, fieldType, M.protobuf___checkNotNull$closure(), type$.nullable_GeneratedMessage_Function._as(subBuilder), null, null, null, $T);
    },
    aOM$1$3$subBuilder: function(tagNumber, $name, subBuilder, $T) {
      var t1;
      H.checkTypeBound($T, type$.GeneratedMessage, "T", "aOM");
      $T._eval$1("0()?")._as(subBuilder);
      t1 = $.GeneratedMessage__defaultMakers.$index(0, subBuilder);
      if (t1 == null) {
        t1 = M.GeneratedMessage__createDefaultMakerFor(subBuilder, $T);
        $.GeneratedMessage__defaultMakers.$indexSet(0, subBuilder, t1);
      }
      this.add$1$8$protoName(0, tagNumber, $name, 2097152, $T._eval$1("0()")._as(t1), subBuilder, null, null, null, $T);
    },
    get$sortedByTag: function() {
      var t1 = this._sortedByTag;
      if (t1 == null) {
        t1 = this._computeSortedByTag$0();
        this.set$_sortedByTag(t1);
      }
      return t1;
    },
    _computeSortedByTag$0: function() {
      var t1 = P.List_List$from(this.fieldInfo.get$values(), false, type$.FieldInfo_dynamic);
      C.JSArray_methods.sort$1(t1, new M.BuilderInfo__computeSortedByTag_closure());
      return t1;
    },
    _decodeEnum$3: function(tagNumber, registry, rawValue) {
      var i = this.fieldInfo.$index(0, tagNumber),
        f = i != null ? i.valueOf : null;
      return (f == null && true ? null.get$valueOf() : f).call$1(rawValue);
    },
    set$_sortedByTag: function(_sortedByTag) {
      this._sortedByTag = type$.nullable_List_FieldInfo_dynamic._as(_sortedByTag);
    }
  };
  M.BuilderInfo__computeSortedByTag_closure.prototype = {
    call$2: function(a, b) {
      var t1 = type$.FieldInfo_dynamic;
      return C.JSInt_methods.compareTo$1(t1._as(a).tagNumber, t1._as(b).tagNumber);
    },
    $signature: 75
  };
  M._readPackable_readToList.prototype = {
    call$1: function(list) {
      return J.add$1$ax(list, this.readFunc.call$0());
    },
    $signature: 24
  };
  M._readPackableToListEnum_readToList.prototype = {
    call$1: function(list) {
      var unknown, t2, _this = this,
        rawValue = _this.input._readRawVarint32$1(true),
        t1 = _this.tagNumber,
        value = _this.meta._decodeEnum$3(t1, _this.registry, rawValue);
      if (value == null) {
        unknown = _this.fs._ensureUnknownFields$0();
        t2 = V.Int64_Int64(rawValue);
        if (unknown._isReadOnly)
          M.defaultFrozenMessageModificationHandler("UnknownFieldSet", "mergeVarintField");
        C.JSArray_methods.add$1(unknown._getField$1(t1)._varints, t2);
      } else
        J.add$1$ax(list, value);
    },
    $signature: 24
  };
  M._readPackableToList_closure.prototype = {
    call$0: function() {
      var t1, t2, t3;
      for (t1 = this.input, t2 = this.readToList, t3 = this.list; t1._bufferPos < t1._currentLimit;)
        t2.call$1(t3);
    },
    $signature: 4
  };
  M.CodedBufferReader.prototype = {
    _checkLimit$1: function(increment) {
      var t1 = this._bufferPos += increment;
      if (t1 > this._currentLimit)
        throw H.wrapException(M.InvalidProtocolBufferException$truncatedMessage());
    },
    readGroup$3: function(fieldNumber, message, extensionRegistry) {
      var _this = this,
        t1 = _this._recursionDepth;
      if (t1 >= 64)
        throw H.wrapException(M.InvalidProtocolBufferException$recursionLimitExceeded());
      _this._recursionDepth = t1 + 1;
      message.mergeFromCodedBufferReader$2(_this, extensionRegistry);
      if (_this._lastTag !== (fieldNumber << 3 | 4) >>> 0)
        H.throwExpression(M.InvalidProtocolBufferException$invalidEndTag());
      --_this._recursionDepth;
    },
    readMessage$2: function(message, extensionRegistry) {
      var oldLimit, t2, _this = this,
        $length = _this._readRawVarint32$1(true),
        t1 = _this._recursionDepth;
      if (t1 >= 64)
        throw H.wrapException(M.InvalidProtocolBufferException$recursionLimitExceeded());
      if ($length < 0)
        throw H.wrapException(P.ArgumentError$(string$.CodedB));
      oldLimit = _this._currentLimit;
      t2 = _this._bufferPos + $length;
      _this._currentLimit = t2;
      if (t2 > oldLimit)
        throw H.wrapException(M.InvalidProtocolBufferException$truncatedMessage());
      _this._recursionDepth = t1 + 1;
      message.mergeFromCodedBufferReader$2(_this, extensionRegistry);
      if (_this._lastTag !== 0)
        H.throwExpression(M.InvalidProtocolBufferException$invalidEndTag());
      --_this._recursionDepth;
      _this._currentLimit = oldLimit;
    },
    readInt32$0: function() {
      return this._readRawVarint32$1(true);
    },
    readInt64$0: function() {
      return this._readRawVarint64$0();
    },
    readUint32$0: function() {
      return this._readRawVarint32$1(false);
    },
    readUint64$0: function() {
      return this._readRawVarint64$0();
    },
    readSint32$0: function() {
      return M.CodedBufferReader__decodeZigZag32(this._readRawVarint32$1(false));
    },
    readSint64$0: function() {
      var value = this._readRawVarint64$0();
      return (value.$and(0, 1).$eq(0, 1) ? V.Int64__sub(0, 0, 0, value._l, value._m, value._h) : value).$shr(0, 1);
    },
    readFixed32$0: function() {
      return C.NativeByteData_methods._getUint32$2(this._readByteData$1(4), 0, true);
    },
    readFixed64$0: function() {
      return this.readSfixed64$0();
    },
    readSfixed32$0: function() {
      return C.NativeByteData_methods._getInt32$2(this._readByteData$1(4), 0, true);
    },
    readSfixed64$0: function() {
      var data = this._readByteData$1(8),
        view = H.NativeUint8List_NativeUint8List$view(data.buffer, data.byteOffset, 8);
      if (7 >= view.length)
        return H.ioore(view, 7);
      return V.Int64_Int64$fromInts(((((view[7] & 255) << 8 | view[6] & 255) << 8 | view[5] & 255) << 8 | view[4] & 255) >>> 0, ((((view[3] & 255) << 8 | view[2] & 255) << 8 | view[1] & 255) << 8 | view[0] & 255) >>> 0);
    },
    readBool$0: function() {
      return this._readRawVarint32$1(true) !== 0;
    },
    readBytes$0: function() {
      var t1, _this = this,
        $length = _this._readRawVarint32$1(true);
      _this._checkLimit$1($length);
      t1 = _this._protobuf$_buffer;
      return H.NativeUint8List_NativeUint8List$view(t1.buffer, t1.byteOffset + _this._bufferPos - $length, $length);
    },
    readFloat$0: function() {
      return C.NativeByteData_methods._getFloat32$2(this._readByteData$1(4), 0, true);
    },
    readDouble$0: function() {
      return C.NativeByteData_methods._getFloat64$2(this._readByteData$1(8), 0, true);
    },
    readTag$0: function() {
      var t1, _this = this;
      if (_this._bufferPos >= _this._currentLimit)
        return _this._lastTag = 0;
      t1 = _this._lastTag = _this._readRawVarint32$1(false);
      if (C.JSInt_methods._shrOtherPositive$1(t1, 3) === 0)
        throw H.wrapException(new M.InvalidProtocolBufferException("Protocol message contained an invalid tag (zero)."));
      return t1;
    },
    _readRawVarintByte$0: function() {
      var t1, t2;
      this._checkLimit$1(1);
      t1 = this._protobuf$_buffer;
      t2 = this._bufferPos - 1;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    _readRawVarint32$1: function(signed) {
      var t1, t2, result, i, bufferPos0, byte, _this = this,
        bufferPos = _this._bufferPos,
        bytes = _this._currentLimit - bufferPos;
      if (bytes > 10)
        bytes = 10;
      for (t1 = _this._protobuf$_buffer, t2 = t1.length, result = 0, i = 0; i < bytes; ++i, bufferPos = bufferPos0) {
        bufferPos0 = bufferPos + 1;
        if (bufferPos < 0 || bufferPos >= t2)
          return H.ioore(t1, bufferPos);
        byte = t1[bufferPos];
        result = (result | C.JSInt_methods._shlPositive$1(byte & 127, i * 7)) >>> 0;
        if ((byte & 128) === 0) {
          _this._bufferPos = bufferPos0;
          return signed ? result - 2 * ((result & 2147483648) >>> 0) : result;
        }
      }
      _this._bufferPos = bufferPos;
      throw H.wrapException(M.InvalidProtocolBufferException$malformedVarint());
    },
    _readRawVarint64$0: function() {
      var t1, t2, lo, i, t3, byte, hi, _this = this;
      for (t1 = _this._protobuf$_buffer, t2 = t1.length, lo = 0, i = 0; i < 4; ++i) {
        t3 = ++_this._bufferPos;
        if (t3 > _this._currentLimit)
          H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
        --t3;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        byte = t1[t3];
        lo = (lo | C.JSInt_methods._shlPositive$1(byte & 127, i * 7)) >>> 0;
        if ((byte & 128) === 0)
          return V.Int64_Int64$fromInts(0, lo);
      }
      byte = _this._readRawVarintByte$0();
      lo = (lo | (byte & 15) << 28) >>> 0;
      hi = byte >>> 4 & 7;
      if ((byte & 128) === 0)
        return V.Int64_Int64$fromInts(hi, lo);
      for (i = 0; i < 5; ++i) {
        t3 = ++_this._bufferPos;
        if (t3 > _this._currentLimit)
          H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
        --t3;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        byte = t1[t3];
        hi = (hi | C.JSInt_methods._shlPositive$1(byte & 127, i * 7 + 3)) >>> 0;
        if ((byte & 128) === 0)
          return V.Int64_Int64$fromInts(hi, lo);
      }
      throw H.wrapException(M.InvalidProtocolBufferException$malformedVarint());
    },
    _readByteData$1: function(sizeInBytes) {
      var t1;
      this._checkLimit$1(sizeInBytes);
      t1 = this._protobuf$_buffer;
      return H.NativeByteData_NativeByteData$view(t1.buffer, t1.byteOffset + this._bufferPos - sizeInBytes, sizeInBytes);
    }
  };
  M.CodedBufferWriter.prototype = {
    writeField$3: function(fieldNumber, fieldType, fieldValue) {
      var t1, mark, wireFormat, t2, t3, t4, i, t5, _this = this,
        valueType = fieldType & 4294967288;
      if ((fieldType & 4) !== 0) {
        t1 = J.getInterceptor$asx(fieldValue);
        if (!H._asBool(t1.get$isEmpty(fieldValue))) {
          _this._writeVarint32$1((fieldNumber << 3 | 2) >>> 0);
          mark = _this._startLengthDelimited$0();
          for (t1 = t1.get$iterator(type$.Iterable_dynamic._as(fieldValue)); t1.moveNext$0();)
            _this._writeValueAs$2(valueType, t1.get$current());
          _this._endLengthDelimited$1(mark);
        }
        return;
      }
      t1 = $.$get$CodedBufferWriter__wireTypes();
      wireFormat = t1[125613361 * valueType >>> 27 & 31];
      if ((fieldType & 4194304) !== 0) {
        J.forEach$1$ax(fieldValue, new M.CodedBufferWriter_writeField_closure(_this, fieldNumber, fieldValue, t1[C.JSNumber_methods._shrOtherPositive$1(C.JSInt_methods.$mul(125613361, fieldValue.get$keyFieldType()), 27) & 31], t1[C.JSNumber_methods._shrOtherPositive$1(C.JSInt_methods.$mul(125613361, fieldValue.get$valueFieldType()), 27) & 31]));
        return;
      }
      if ((fieldType & 2) !== 0) {
        for (t1 = J.getInterceptor$asx(fieldValue), t2 = valueType === 1024, t3 = fieldNumber << 3, t4 = (t3 | wireFormat) >>> 0, t3 = (t3 | 4) >>> 0, i = 0; i < H._asNum(t1.get$length(fieldValue)); ++i) {
          t5 = t1.$index(fieldValue, i);
          _this._writeVarint32$1(t4);
          _this._writeValueAs$2(valueType, t5);
          if (t2)
            _this._writeVarint32$1(t3);
        }
        return;
      }
      _this._writeValue$4(fieldNumber, valueType, fieldValue, wireFormat);
    },
    writeTo$1: function(buffer) {
      var t2, t3, t4, t5, outPos, chunkIndex, chunkPos, i, action, v, outPos0, t6, bytesToCopy, chunk, t7, bytesInChunk, leftInChunk, bytesToCopyFromChunk, endPos, chunkPos0, t8, _this = this,
        t1 = buffer.length;
      if (t1 - 0 < _this._bytesTotal)
        return false;
      _this._commitChunk$1(false);
      _this._commitSplice$0();
      for (t2 = _this._splices, t3 = type$.TypedData, t4 = _this._outputChunks, t5 = type$.Uint8List, outPos = 0, chunkIndex = 0, chunkPos = 0, i = 0; i < t2.length; ++i) {
        action = t2[i];
        if (H._isInt(action))
          if (action <= 0) {
            v = 0 - action;
            for (; v >= 128; outPos = outPos0) {
              outPos0 = outPos + 1;
              if (outPos < 0 || outPos >= t1)
                return H.ioore(buffer, outPos);
              buffer[outPos] = v & 127 | 128;
              v = C.JSInt_methods._shrOtherPositive$1(v, 7);
            }
            outPos0 = outPos + 1;
            if (outPos < 0 || outPos >= t1)
              return H.ioore(buffer, outPos);
            buffer[outPos] = v;
            outPos = outPos0;
          } else
            for (t6 = t4.length, bytesToCopy = action; bytesToCopy > 0;) {
              if (chunkIndex < 0 || chunkIndex >= t6)
                return H.ioore(t4, chunkIndex);
              chunk = t5._as(t4[chunkIndex]);
              t7 = chunkIndex + 1;
              if (t7 >= t6)
                return H.ioore(t4, t7);
              bytesInChunk = H._asInt(t4[t7]);
              leftInChunk = bytesInChunk - chunkPos;
              bytesToCopyFromChunk = leftInChunk > bytesToCopy ? bytesToCopy : leftInChunk;
              endPos = chunkPos + bytesToCopyFromChunk;
              for (t7 = chunk.length; chunkPos < endPos; chunkPos = chunkPos0, outPos = outPos0) {
                outPos0 = outPos + 1;
                chunkPos0 = chunkPos + 1;
                if (chunkPos < 0 || chunkPos >= t7)
                  return H.ioore(chunk, chunkPos);
                t8 = chunk[chunkPos];
                if (outPos < 0 || outPos >= t1)
                  return H.ioore(buffer, outPos);
                buffer[outPos] = t8;
              }
              bytesToCopy -= bytesToCopyFromChunk;
              if (chunkPos === bytesInChunk) {
                chunkIndex += 2;
                chunkPos = 0;
              }
            }
        else
          outPos = _this._copyInto$3(buffer, outPos, t3._as(action));
      }
      return true;
    },
    _commitChunk$1: function(allocateNew) {
      var t1, _this = this;
      if (_this._bytesInChunk !== 0) {
        t1 = _this._outputChunks;
        C.JSArray_methods.add$1(t1, _this._outputChunk);
        C.JSArray_methods.add$1(t1, _this._bytesInChunk);
        _this._outputChunksBytes = _this._outputChunksBytes + _this._bytesInChunk;
      }
      if (allocateNew) {
        t1 = new Uint8Array(512);
        _this._outputChunk = t1;
        _this._bytesInChunk = 0;
        _this._outputChunkAsByteData = H.NativeByteData_NativeByteData$view(t1.buffer, 0, null);
      } else {
        _this._outputChunk = _this._outputChunkAsByteData = null;
        _this._bytesInChunk = 0;
      }
    },
    _ensureBytes$1: function(count) {
      if (this._bytesInChunk + count > 512)
        this._commitChunk$1(true);
    },
    _commitSplice$0: function() {
      var _this = this,
        pos = _this._bytesInChunk + _this._outputChunksBytes,
        bytes = pos - _this._lastSplicePos;
      if (bytes > 0)
        C.JSArray_methods.add$1(_this._splices, bytes);
      _this._lastSplicePos = pos;
    },
    _startLengthDelimited$0: function() {
      var t1, index;
      this._commitSplice$0();
      t1 = this._splices;
      index = t1.length;
      C.JSArray_methods.add$1(t1, this._bytesTotal);
      return index;
    },
    _endLengthDelimited$1: function(index) {
      var writtenSizeInBytes, _this = this,
        t1 = _this._bytesTotal,
        t2 = _this._splices;
      if (index >= t2.length)
        return H.ioore(t2, index);
      writtenSizeInBytes = t1 - H._asNum(t2[index]);
      C.JSArray_methods.$indexSet(t2, index, 0 - writtenSizeInBytes);
      _this._bytesTotal = _this._bytesTotal + _this._varint32LengthInBytes$1(writtenSizeInBytes);
    },
    _varint32LengthInBytes$1: function(value) {
      value = value >>> 0;
      if (value < 128)
        return 1;
      if (value < 16384)
        return 2;
      if (value < 2097152)
        return 3;
      if (value < 268435456)
        return 4;
      return 5;
    },
    _writeVarint32$1: function(value) {
      var i, t1, i0, i1, _this = this;
      _this._ensureBytes$1(5);
      i = _this._bytesInChunk;
      for (t1 = _this._outputChunk, i0 = i; value >= 128; i0 = i1) {
        t1.toString;
        i1 = i0 + 1;
        if (i0 >= 512)
          return H.ioore(t1, i0);
        t1[i0] = value & 127 | 128;
        value = C.JSInt_methods._shrOtherPositive$1(value, 7);
      }
      t1.toString;
      i1 = i0 + 1;
      if (i0 >= 512)
        return H.ioore(t1, i0);
      t1[i0] = value;
      _this._bytesTotal = _this._bytesTotal + (i1 - i);
      _this._bytesInChunk = i1;
    },
    _writeVarint64$1: function(value) {
      var i, lo, hi, t1, i0, _this = this;
      _this._ensureBytes$1(10);
      i = _this._bytesInChunk;
      lo = value.toUnsigned$1(0, 32).toInt$0(0);
      hi = value.$shr(0, 32).toUnsigned$1(0, 32).toInt$0(0);
      t1 = _this._outputChunk;
      while (true) {
        if (!(hi > 0 || lo >= 128))
          break;
        t1.toString;
        i0 = i + 1;
        if (i >= 512)
          return H.ioore(t1, i);
        t1[i] = lo & 127 | 128;
        lo = (C.JSInt_methods._shrOtherPositive$1(lo, 7) | (hi & 127) << 25) >>> 0;
        hi = C.JSInt_methods._shrOtherPositive$1(hi, 7);
        i = i0;
      }
      t1.toString;
      i0 = i + 1;
      if (i >= 512)
        return H.ioore(t1, i);
      t1[i] = lo;
      _this._bytesTotal = _this._bytesTotal + (i0 - _this._bytesInChunk);
      _this._bytesInChunk = i0;
    },
    _writeDouble$1: function(value) {
      var t1, _this = this;
      if (isNaN(value)) {
        _this._writeInt32$1(0);
        _this._writeInt32$1(2146959360);
        return;
      }
      _this._ensureBytes$1(8);
      t1 = _this._outputChunkAsByteData;
      t1.toString;
      C.NativeByteData_methods._setFloat64$3(t1, _this._bytesInChunk, value, true);
      _this._bytesInChunk += 8;
      _this._bytesTotal += 8;
    },
    _writeInt32$1: function(value) {
      var t1, _this = this;
      _this._ensureBytes$1(4);
      t1 = _this._outputChunkAsByteData;
      t1.toString;
      C.NativeByteData_methods._setInt32$3(t1, _this._bytesInChunk, value >>> 0, true);
      _this._bytesInChunk += 4;
      _this._bytesTotal += 4;
    },
    _writeInt64$1: function(value) {
      this._writeInt32$1(value.toUnsigned$1(0, 32).toInt$0(0));
      this._writeInt32$1(value.$shr(0, 32).toUnsigned$1(0, 32).toInt$0(0));
    },
    _writeValueAs$2: function(valueType, value) {
      var t1, o, mark, _this = this;
      switch (valueType) {
        case 16:
          _this._writeVarint32$1(H._asBool(value) ? 1 : 0);
          break;
        case 32:
          _this._writeBytesNoTag$1(type$.TypedData._is(value) ? value : new Uint8Array(H._ensureNativeList(type$.List_int._as(value))));
          break;
        case 64:
          value = type$.Utf8Codec._eval$1("Codec.S")._as(H._asString(value));
          _this._writeBytesNoTag$1(C.Utf8Codec_true.get$encoder().convert$1(value));
          break;
        case 128:
          _this._writeDouble$1(H._asDouble(value));
          break;
        case 256:
          H._asDouble(value);
          if (isNaN(value))
            _this._writeInt32$1(2143289344);
          else {
            t1 = Math.abs(value);
            if (t1 < 1401298464324817e-60)
              _this._writeInt32$1(C.JSNumber_methods.get$isNegative(value) ? 2147483648 : 0);
            else if (value == 1 / 0 || value == -1 / 0 || t1 > 34028234663852886e22)
              _this._writeInt32$1(C.JSNumber_methods.get$isNegative(value) ? 4286578688 : 2139095040);
            else {
              _this._ensureBytes$1(4);
              t1 = _this._outputChunkAsByteData;
              t1.toString;
              C.NativeByteData_methods._setFloat32$3(t1, _this._bytesInChunk, value, true);
              _this._bytesInChunk += 4;
              _this._bytesTotal += 4;
            }
          }
          break;
        case 512:
          _this._writeVarint32$1(H._asInt(J.$and$bn(value.get$value(), 4294967295)));
          break;
        case 1024:
          value.writeToCodedBufferWriter$1(_this);
          break;
        case 2048:
          _this._writeVarint64$1(V.Int64_Int64(H._asInt(value)));
          break;
        case 4096:
          _this._writeVarint64$1(type$.Int64._as(value));
          break;
        case 8192:
          H._asInt(value);
          _this._writeVarint32$1((value << 1 ^ C.JSInt_methods._shrOtherPositive$1(value, 31)) >>> 0);
          break;
        case 16384:
          type$.Int64._as(value);
          t1 = value.$shl(0, 1);
          o = V.Int64__promote(value.$shr(0, 63));
          _this._writeVarint64$1(new V.Int64((t1._l ^ o._l) & 4194303, (t1._m ^ o._m) & 4194303, (t1._h ^ o._h) & 1048575));
          break;
        case 32768:
          _this._writeVarint32$1(H._asInt(value));
          break;
        case 65536:
          _this._writeVarint64$1(type$.Int64._as(value));
          break;
        case 131072:
          _this._writeInt32$1(H._asInt(value));
          break;
        case 262144:
          _this._writeInt64$1(type$.Int64._as(value));
          break;
        case 524288:
          _this._writeInt32$1(H._asInt(value));
          break;
        case 1048576:
          _this._writeInt64$1(type$.Int64._as(value));
          break;
        case 2097152:
          mark = _this._startLengthDelimited$0();
          value.writeToCodedBufferWriter$1(_this);
          _this._endLengthDelimited$1(mark);
          break;
      }
    },
    _writeBytesNoTag$1: function(value) {
      var _this = this;
      _this._writeVarint32$1(J.get$length$asx(value));
      _this._commitSplice$0();
      C.JSArray_methods.add$1(_this._splices, value);
      _this._bytesTotal = _this._bytesTotal + value.byteLength;
    },
    _writeValue$4: function(fieldNumber, valueType, value, wireFormat) {
      var t1 = fieldNumber << 3;
      this._writeVarint32$1((t1 | wireFormat) >>> 0);
      this._writeValueAs$2(valueType, value);
      if (valueType === 1024)
        this._writeVarint32$1((t1 | 4) >>> 0);
    },
    _copyInto$3: function(buffer, pos, value) {
      var len, t1, j, pos0, t2, u8, t3;
      if (type$.Uint8List._is(value)) {
        len = value.length;
        for (t1 = buffer.length, j = 0; j < len; ++j, pos = pos0) {
          pos0 = pos + 1;
          t2 = value[j];
          if (pos >= t1)
            return H.ioore(buffer, pos);
          buffer[pos] = t2;
        }
        return pos;
      } else {
        len = value.byteLength;
        u8 = H.NativeUint8List_NativeUint8List$view(value.buffer, value.byteOffset, len);
        for (t1 = u8.length, t2 = buffer.length, j = 0; j < len; ++j, pos = pos0) {
          pos0 = pos + 1;
          if (j >= t1)
            return H.ioore(u8, j);
          t3 = u8[j];
          if (pos >= t2)
            return H.ioore(buffer, pos);
          buffer[pos] = t3;
        }
        return pos;
      }
    }
  };
  M.CodedBufferWriter_writeField_closure.prototype = {
    call$2: function(key, value) {
      var mark, t2, _this = this,
        t1 = _this.$this;
      t1._writeVarint32$1((_this.fieldNumber << 3 | 2) >>> 0);
      mark = t1._startLengthDelimited$0();
      t2 = _this.fieldValue;
      t1._writeValue$4(1, t2.get$keyFieldType(), key, _this.keyWireFormat);
      t1._writeValue$4(2, t2.get$valueFieldType(), value, _this.valueWireFormat);
      t1._endLengthDelimited$1(mark);
    },
    $signature: 81
  };
  M.InvalidProtocolBufferException.prototype = {
    toString$0: function(_) {
      return "InvalidProtocolBufferException: " + this.message;
    }
  };
  M._ExtensionFieldSet.prototype = {
    _validateInfo$1: function(fi) {
      var t1;
      fi.get$extendee();
      t1 = this._protobuf$_parent;
      t1._protobuf$_message.get$info_();
      t1 = P.ArgumentError$("Extension " + H.S(fi) + " not legal for message " + t1.get$_messageName());
      throw H.wrapException(t1);
    },
    _setFieldUnchecked$2: function(fi, value) {
      type$.Extension_dynamic._as(fi);
      this._values.$indexSet(0, fi.get$tagNumber(), value);
    },
    _markReadOnly$0: function() {
      var t1, t2, t3, t4, t5, entries, t6, entry, _this = this;
      if (_this._isReadOnly)
        return;
      _this._isReadOnly = true;
      for (t1 = _this._info.get$values(), t1 = t1.get$iterator(t1), t2 = _this._values, t3 = type$.GeneratedMessage, t4 = type$.List_GeneratedMessage; t1.moveNext$0();) {
        t5 = t1.get$current();
        if (t5.get$isRepeated()) {
          entries = t2.$index(0, t5.get$tagNumber());
          if (entries == null)
            continue;
          if (t5.get$isGroupOrMessage())
            for (t6 = J.get$iterator$ax(t4._as(entries)); t6.moveNext$0();)
              t6.get$current().__fieldSet._markReadOnly$0();
          t2.$indexSet(0, t5.get$tagNumber(), entries.toFrozenPbList$0());
        } else if (t5.get$isGroupOrMessage()) {
          entry = t2.$index(0, t5.get$tagNumber());
          if (entry != null)
            t3._as(entry).__fieldSet._markReadOnly$0();
        }
      }
    }
  };
  M._EmptyExtensionRegistry.prototype = {$isExtensionRegistry: 1};
  M.FieldInfo.prototype = {
    get$readonlyDefault: function() {
      var t1, _this = this;
      if ((_this.type & 2) !== 0) {
        t1 = _this._emptyList;
        if (t1 == null) {
          t1 = _this.$ti;
          t1 = new M.FrozenPbList(H.setRuntimeTypeInfo([], t1._eval$1("JSArray<1>")), M.protobuf___checkNotNull$closure(), t1._eval$1("FrozenPbList<1>"));
          _this.set$_emptyList(t1);
        }
        return t1;
      }
      return _this.makeDefault.call$0();
    },
    toString$0: function(_) {
      return this.name;
    },
    set$_emptyList: function(_emptyList) {
      this._emptyList = this.$ti._eval$1("FrozenPbList<1>?")._as(_emptyList);
    }
  };
  M.FieldInfo$repeated_closure.prototype = {
    call$0: function() {
      return M.PbList$(this.check, this.T);
    },
    $signature: function() {
      return this.T._eval$1("PbList<0>()");
    }
  };
  M.FieldInfo_findMakeDefault_closure.prototype = {
    call$0: function() {
      return this.defaultOrMaker;
    },
    $signature: 14
  };
  M._unCamelCase_closure.prototype = {
    call$1: function(match) {
      return "_" + match.group$1(0).toLowerCase();
    },
    $signature: 82
  };
  M._FieldSet.prototype = {
    get$_messageName: function() {
      return this._protobuf$_message.get$info_().qualifiedMessageName;
    },
    _ensureExtensions$0: function() {
      var t1 = this._extensions;
      if (t1 == null) {
        t1 = type$.int;
        t1 = this._extensions = new M._ExtensionFieldSet(this, P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Extension_dynamic), P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.dynamic));
      }
      return t1;
    },
    _ensureUnknownFields$0: function() {
      var t1 = this._unknownFields;
      if (t1 == null) {
        t1 = this._frozenState;
        if (!H._isBool(t1) || t1)
          return $.$get$UnknownFieldSet_emptyUnknownFieldSet();
        t1 = this._unknownFields = new M.UnknownFieldSet(P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.UnknownFieldSetField));
      }
      return t1;
    },
    _markReadOnly$0: function() {
      var t2, t3, t4, t5, t6, _i, field, t7, t8, entries, entry, _this = this,
        t1 = _this._frozenState;
      if (!H._isBool(t1) || t1)
        return;
      _this._frozenState = true;
      for (t1 = _this._protobuf$_message.get$info_().get$sortedByTag(), t2 = t1.length, t3 = _this._values, t4 = type$.GeneratedMessage, t5 = type$.nullable_PbMap_dynamic_dynamic, t6 = type$.List_GeneratedMessage, _i = 0; _i < t2; ++_i) {
        field = t1[_i];
        t7 = field.type;
        if ((t7 & 2) !== 0) {
          t8 = field.index;
          if (t8 >= t3.length)
            return H.ioore(t3, t8);
          entries = t3[t8];
          if (entries == null)
            continue;
          if ((t7 & 2098176) !== 0)
            for (t7 = J.get$iterator$ax(t6._as(entries)); t7.moveNext$0();)
              t7.get$current().__fieldSet._markReadOnly$0();
          C.JSArray_methods.$indexSet(t3, t8, entries.toFrozenPbList$0());
        } else if ((t7 & 4194304) !== 0) {
          t7 = field.index;
          if (t7 >= t3.length)
            return H.ioore(t3, t7);
          t5._as(t3[t7]);
          continue;
        } else if ((t7 & 2098176) !== 0) {
          t7 = field.index;
          if (t7 >= t3.length)
            return H.ioore(t3, t7);
          entry = t3[t7];
          if (entry != null)
            t4._as(entry).__fieldSet._markReadOnly$0();
        }
      }
      if (_this._extensions != null)
        _this._ensureExtensions$0()._markReadOnly$0();
      if (_this._unknownFields != null)
        _this._ensureUnknownFields$0()._markReadOnly$0();
    },
    _getDefault$1: function(fi) {
      var t1, value;
      if ((fi.type & 2) === 0)
        return fi.makeDefault.call$0();
      t1 = this._frozenState;
      if (!H._isBool(t1) || t1)
        return fi.get$readonlyDefault();
      t1 = this._protobuf$_message;
      value = t1.createRepeatedField$1$2(fi.tagNumber, fi, fi.$ti._precomputed1);
      this._setNonExtensionFieldUnchecked$3(t1.get$info_(), fi, value);
      return value;
    },
    _getDefaultList$1$1: function(fi, $T) {
      var t1, value;
      $T._eval$1("FieldInfo<0>")._as(fi);
      t1 = this._frozenState;
      if (!H._isBool(t1) || t1)
        return P.List_List$unmodifiable(C.List_empty1, $T);
      t1 = this._protobuf$_message;
      H.checkTypeBound($T, fi.$ti._precomputed1, "S", "_createRepeatedFieldWithType");
      value = t1.createRepeatedField$1$2(fi.tagNumber, $T._eval$1("FieldInfo<0>")._as(fi), $T);
      this._setNonExtensionFieldUnchecked$3(t1.get$info_(), fi, value);
      return value;
    },
    _getFieldOrNull$1: function(fi) {
      var t1 = this._values,
        t2 = fi.index,
        t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    _setFieldUnchecked$3: function(meta, fi, value) {
      this._setNonExtensionFieldUnchecked$3(meta, fi, value);
    },
    _ensureRepeatedField$1$2: function(meta, fi, $T) {
      var value, newValue;
      $T._eval$1("FieldInfo<0>")._as(fi);
      value = this._getFieldOrNull$1(fi);
      if (value != null)
        return $T._eval$1("List<0>")._as(value);
      newValue = this._protobuf$_message.createRepeatedField$1$2(fi.tagNumber, fi, fi.$ti._precomputed1);
      this._setNonExtensionFieldUnchecked$3(meta, fi, newValue);
      return newValue;
    },
    _ensureMapField$2$2: function(meta, fi, $K, $V) {
      var value, newValue,
        t1 = $K._eval$1("@<0>")._bind$1($V);
      t1._eval$1("MapFieldInfo<1,2>")._as(fi);
      value = this._getFieldOrNull$1(fi);
      if (value != null)
        return t1._eval$1("PbMap<1,2>")._as(t1._eval$1("Map<1,2>")._as(value));
      newValue = fi._createMapField$1(this._protobuf$_message);
      this._setNonExtensionFieldUnchecked$3(meta, fi, newValue);
      return t1._eval$1("PbMap<1,2>")._as(newValue);
    },
    _setNonExtensionFieldUnchecked$3: function(meta, fi, value) {
      type$.BuilderInfo._as(meta).oneofs.$index(0, fi.tagNumber);
      C.JSArray_methods.$indexSet(this._values, fi.index, value);
    },
    _$getND$1: function(index) {
      var value,
        t1 = this._values;
      if (index >= t1.length)
        return H.ioore(t1, index);
      value = t1[index];
      if (value != null)
        return value;
      t1 = this._protobuf$_message.get$info_().byIndex;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return this._getDefault$1(t1[index]);
    },
    _$getList$1$1: function(index, $T) {
      var value,
        t1 = this._values;
      if (index >= t1.length)
        return H.ioore(t1, index);
      value = t1[index];
      if (value != null)
        return $T._eval$1("List<0>")._as(value);
      t1 = this._protobuf$_message.get$info_().byIndex;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return this._getDefaultList$1$1($T._eval$1("FieldInfo<0>")._as(t1[index]), $T);
    },
    _$getB$2: function(index, defaultValue) {
      var value,
        t1 = this._values;
      if (index >= t1.length)
        return H.ioore(t1, index);
      value = t1[index];
      if (value == null)
        return true;
      return H._asBool(value);
    },
    _$getBF$1: function(index) {
      var value,
        t1 = this._values;
      if (index >= t1.length)
        return H.ioore(t1, index);
      value = t1[index];
      if (value == null)
        return false;
      return H._asBool(value);
    },
    _$getIZ$1: function(index) {
      var value,
        t1 = this._values;
      if (index >= t1.length)
        return H.ioore(t1, index);
      value = t1[index];
      if (value == null)
        return 0;
      return H._asInt(value);
    },
    _$getSZ$1: function(index) {
      var value,
        t1 = this._values;
      if (index >= t1.length)
        return H.ioore(t1, index);
      value = t1[index];
      if (value == null)
        return "";
      return H._asString(value);
    },
    _$has$1: function(index) {
      var value,
        t1 = this._values;
      if (index >= t1.length)
        return H.ioore(t1, index);
      value = t1[index];
      if (value == null)
        return false;
      if (type$.List_dynamic._is(value))
        return J.get$isNotEmpty$asx(value);
      return true;
    },
    _$set$2: function(index, value) {
      var t2, _this = this,
        t1 = _this._frozenState;
      if (!H._isBool(t1) || t1)
        M.protobuf__defaultFrozenMessageModificationHandler$closure().call$1(_this._protobuf$_message.get$info_().qualifiedMessageName);
      t1 = _this._protobuf$_message.get$info_();
      t2 = t1.byIndex;
      if (index >= t2.length)
        return H.ioore(t2, index);
      t2 = t2[index];
      t1.oneofs.$index(0, t2.tagNumber);
      C.JSArray_methods.$indexSet(_this._values, index, value);
    },
    _equals$1: function(o) {
      var t1, t2, i, t3, _this = this;
      if (_this._protobuf$_message.get$info_() !== o._protobuf$_message.get$info_())
        return false;
      for (t1 = _this._values, t2 = o._values, i = 0; i < t1.length; ++i) {
        t3 = t1[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        if (!_this._equalFieldValues$2(t3, t2[i]))
          return false;
      }
      t1 = _this._extensions;
      if (t1 != null) {
        t1 = t1._values;
        t1 = !t1.get$isNotEmpty(t1);
      } else
        t1 = true;
      if (t1) {
        t1 = o._extensions;
        if (t1 != null) {
          t1 = t1._values;
          t1 = t1.get$isNotEmpty(t1);
        } else
          t1 = false;
        if (t1)
          return false;
      } else {
        t1 = _this._extensions;
        t1.toString;
        t2 = o._extensions;
        if (!(t2 != null && M._areMapsEqual(t1._values, t2._values)))
          return false;
      }
      t1 = _this._unknownFields;
      if (t1 != null) {
        t1 = t1._fields;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = true;
      if (t1) {
        t1 = o._unknownFields;
        if (t1 != null) {
          t1 = t1._fields;
          t1 = t1.get$isNotEmpty(t1);
        } else
          t1 = false;
        if (t1)
          return false;
      } else if (!J.$eq$(_this._unknownFields, o._unknownFields))
        return false;
      return true;
    },
    _equalFieldValues$2: function(left, right) {
      var val,
        t1 = left == null;
      if (!t1 && right != null)
        return M._deepEquals(left, right);
      val = t1 ? right : left;
      if (val == null)
        return true;
      if (type$.List_dynamic._is(val) && J.get$isEmpty$asx(val))
        return true;
      return false;
    },
    get$_hashCode: function() {
      var hash, _this = this,
        t1 = _this._frozenState;
      t1 = (H._isInt(t1) ? t1 : null) != null;
      if (t1) {
        t1 = _this._frozenState;
        t1 = H._isInt(t1) ? t1 : null;
        t1.toString;
        return t1;
      }
      hash = new M._FieldSet__hashCode_hashEachField(_this, new M._FieldSet__hashCode_hashField()).call$1(M._HashUtils__combine(0, H.Primitives_objectHashCode(_this._protobuf$_message.get$info_())));
      t1 = _this._unknownFields;
      if (t1 != null)
        hash = M._HashUtils__combine(hash, t1.get$hashCode(t1));
      t1 = _this._frozenState;
      if ((!H._isBool(t1) || t1) && true)
        _this._frozenState = hash;
      return hash;
    },
    writeString$2: function(out, indent) {
      var t2, _this = this,
        t1 = new M._FieldSet_writeString_writeFieldValue(new M._FieldSet_writeString_renderValue(out, indent));
      C.JSArray_methods.forEach$1(_this._protobuf$_message.get$info_().get$sortedByTag(), new M._FieldSet_writeString_closure(_this, t1));
      t2 = _this._extensions;
      if (t2 != null) {
        t2 = t2._info.get$keys();
        t2 = P.List_List$of(t2, true, H._instanceType(t2)._eval$1("Iterable.E"));
        C.JSArray_methods.sort$0(t2);
        C.JSArray_methods.forEach$1(t2, new M._FieldSet_writeString_closure0(_this, t1));
      }
      t1 = _this._unknownFields;
      if (t1 != null)
        out._contents += t1.toString$0(0);
      else
        out._contents += new M.UnknownFieldSet(P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.UnknownFieldSetField))._toString$1("");
    },
    _mergeFromMessage$1: function(other) {
      var t1, t2, t3, _i, fi, t4, value, extension;
      for (t1 = other._protobuf$_message.get$info_().get$sortedByTag(), t2 = t1.length, t3 = other._values, _i = 0; _i < t2; ++_i) {
        fi = t1[_i];
        t4 = fi.index;
        if (t4 >= t3.length)
          return H.ioore(t3, t4);
        value = t3[t4];
        if (value != null)
          this._mergeField$3$isExtension(fi, value, false);
      }
      t1 = other._extensions;
      if (t1 != null)
        for (t2 = t1._values, t3 = t2.get$keys(), t3 = t3.get$iterator(t3), t1 = t1._info; t3.moveNext$0();) {
          extension = t1.$index(0, t3.get$current());
          this._mergeField$3$isExtension(extension, t2.$index(0, extension.get$tagNumber()), true);
        }
      if (other._unknownFields != null) {
        t1 = this._ensureUnknownFields$0();
        t2 = other._unknownFields;
        t2.toString;
        t1.mergeFromUnknownFieldSet$1(t2);
      }
    },
    _mergeField$3$isExtension: function(otherFi, fieldValue, isExtension) {
      var mustClone, t2, map, t3, entry, t4, t5, repeatedFields, i, currentFi, _this = this,
        t1 = _this._protobuf$_message.get$info_(),
        fi = t1.fieldInfo.$index(0, otherFi.tagNumber);
      if (fi == null && isExtension)
        fi = otherFi;
      mustClone = (otherFi.type & 2098176) !== 0;
      t2 = fi.type;
      if ((t2 & 4194304) !== 0) {
        type$.MapFieldInfo_dynamic_dynamic._as(fi);
        fi.get$valueFieldType().$and(0, 2098176);
        map = fi._ensureMapField$2(t1, _this);
        for (t1 = fieldValue.get$entries(), t1 = t1.get$iterator(t1), t2 = type$.MapEntry_dynamic_dynamic, t3 = type$.GeneratedMessage; t1.moveNext$0();) {
          entry = t2._as(t1.get$current());
          t4 = t3._as(entry.value);
          t5 = t3._as(t4.get$info_().createEmptyInstance.call$0());
          t5.mergeFromMessage$1(t4);
          map.$indexSet(0, entry.key, t5);
        }
        return;
      }
      if ((t2 & 2) !== 0) {
        t2 = H._instanceType(fi)._precomputed1;
        if (mustClone) {
          type$.PbListBase_GeneratedMessage._as(fieldValue);
          repeatedFields = _this._ensureRepeatedField$1$2(t1, fi, t2);
          for (t1 = fieldValue._wrappedList, t2 = type$.GeneratedMessage, t3 = J.getInterceptor$ax(repeatedFields), i = 0; i < t1.length; ++i) {
            t4 = t1[i];
            t5 = t2._as(t4.get$info_().createEmptyInstance.call$0());
            t5.mergeFromMessage$1(t4);
            t3.add$1(repeatedFields, t5);
          }
        } else {
          type$.PbListBase_dynamic._as(fieldValue);
          J.addAll$1$ax(_this._ensureRepeatedField$1$2(t1, fi, t2), fieldValue);
        }
        return;
      }
      if (mustClone) {
        if (isExtension)
          currentFi = _this._ensureExtensions$0()._values.$index(0, type$.Extension_dynamic._as(fi).get$tagNumber());
        else {
          t2 = _this._values;
          t3 = fi.index;
          if (t3 >= t2.length)
            return H.ioore(t2, t3);
          currentFi = t2[t3];
        }
        if (currentFi == null) {
          t2 = type$.GeneratedMessage;
          fieldValue = M.GeneratedMessageGenericExtensions_deepCopy(t2._as(fieldValue), t2);
        } else {
          currentFi.mergeFromMessage$1(fieldValue);
          fieldValue = currentFi;
        }
      }
      if (isExtension) {
        t1 = _this._ensureExtensions$0();
        type$.Extension_dynamic._as(fi);
        if (t1._isReadOnly)
          M.protobuf__defaultFrozenMessageModificationHandler$closure().call$1(t1._protobuf$_parent._protobuf$_message.get$info_().qualifiedMessageName);
        if (fi.get$isRepeated())
          H.throwExpression(P.ArgumentError$(t1._protobuf$_parent._setFieldFailedMessage$3(fi, fieldValue, "repeating field (use get + .add())")));
        if (t1._isReadOnly)
          M.protobuf__defaultFrozenMessageModificationHandler$closure().call$1(t1._protobuf$_parent._protobuf$_message.get$info_().qualifiedMessageName);
        t1._validateInfo$1(fi);
        t1._protobuf$_parent._validateField$2(fi, fieldValue);
        t1._info.$indexSet(0, fi.get$tagNumber(), fi);
        t1._setFieldUnchecked$2(fi, fieldValue);
      } else {
        _this._validateField$2(fi, fieldValue);
        _this._setNonExtensionFieldUnchecked$3(t1, fi, fieldValue);
      }
    },
    _validateField$2: function(fi, newValue) {
      var message,
        t1 = this._frozenState;
      if (!H._isBool(t1) || t1)
        M.protobuf__defaultFrozenMessageModificationHandler$closure().call$1(this._protobuf$_message.get$info_().qualifiedMessageName);
      message = M._getFieldError(fi.type, newValue);
      if (message != null)
        throw H.wrapException(P.ArgumentError$(this._setFieldFailedMessage$3(fi, newValue, message)));
    },
    _setFieldFailedMessage$3: function(fi, value, detail) {
      return "Illegal to set field " + fi.name + " (" + fi.tagNumber + ") of " + this._protobuf$_message.get$info_().qualifiedMessageName + " to value (" + H.S(value) + "): " + detail;
    }
  };
  M._FieldSet__hashCode_hashField.prototype = {
    call$3: function(hash, fi, value) {
      var t1, t2;
      if (type$.List_dynamic._is(value) && J.get$isEmpty$asx(value))
        return hash;
      hash = M._HashUtils__combine(hash, fi.tagNumber);
      t1 = fi.type;
      t2 = t1 & 4290772984;
      if (t2 === 32)
        hash = M._HashUtils__combine(hash, M._HashUtils__hashObjects(type$.Iterable_dynamic._as(value)));
      else if (t2 !== 512)
        hash = M._HashUtils__combine(hash, J.get$hashCode$(value));
      else
        hash = (t1 & 2) !== 0 ? M._HashUtils__hashObjects(type$.Iterable_dynamic._as(J.map$1$ax(value, new M._FieldSet__hashCode_hashField_closure()))) : M._HashUtils__combine(hash, type$.ProtobufEnum._as(value).value);
      return hash;
    },
    $signature: 83
  };
  M._FieldSet__hashCode_hashField_closure.prototype = {
    call$1: function(enm) {
      return enm.get$value();
    },
    $signature: 10
  };
  M._FieldSet__hashCode_hashEachField.prototype = {
    call$1: function(hash) {
      var t1 = this.$this,
        t2 = t1._protobuf$_message.get$info_().get$sortedByTag(),
        t3 = H._arrayInstanceType(t2),
        t4 = this.hashField,
        t5 = type$.int;
      hash = new H.WhereIterable(t2, t3._eval$1("bool(1)")._as(new M._FieldSet__hashCode_hashEachField_closure(t1)), t3._eval$1("WhereIterable<1>")).fold$1$2(0, hash, new M._FieldSet__hashCode_hashEachField_closure0(t1, t4), t5);
      t2 = t1._extensions;
      if (t2 == null)
        return hash;
      return C.JSArray_methods.fold$1$2(M._sorted(t2._values.get$keys(), t5), hash, new M._FieldSet__hashCode_hashEachField_closure1(t1, t4), t5);
    },
    $signature: 84
  };
  M._FieldSet__hashCode_hashEachField_closure.prototype = {
    call$1: function(fi) {
      var t1 = this.$this._values,
        t2 = type$.FieldInfo_dynamic._as(fi).index;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2] != null;
    },
    $signature: 85
  };
  M._FieldSet__hashCode_hashEachField_closure0.prototype = {
    call$2: function(h, fi) {
      var t1, t2;
      H._asInt(h);
      type$.FieldInfo_dynamic._as(fi);
      t1 = this.$this._values;
      t2 = fi.index;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return this.hashField.call$3(h, fi, t1[t2]);
    },
    $signature: 86
  };
  M._FieldSet__hashCode_hashEachField_closure1.prototype = {
    call$2: function(h, tagNumber) {
      var t1, t2;
      H._asInt(h);
      H._asInt(tagNumber);
      t1 = this.$this;
      t2 = t1._extensions._info.$index(0, tagNumber);
      t2.toString;
      return this.hashField.call$3(h, t2, t1._extensions._values.$index(0, t2.get$tagNumber()));
    },
    $signature: 87
  };
  M._FieldSet_writeString_renderValue.prototype = {
    call$2: function(key, value) {
      var t1, t2, _this = this;
      if (value instanceof M.GeneratedMessage) {
        t1 = _this.out;
        t2 = _this.indent;
        t1._contents += t2 + key + ": {\n";
        value.__fieldSet.writeString$2(t1, t2 + "  ");
        t1._contents += t2 + "}\n";
      } else {
        t1 = _this.out;
        t2 = _this.indent;
        if (value instanceof P.MapEntry)
          t1._contents += t2 + key + ": {" + H.S(value.key) + " : " + H.S(value.value) + "} \n";
        else
          t1._contents += t2 + key + ": " + H.S(value) + "\n";
      }
    },
    $signature: 12
  };
  M._FieldSet_writeString_writeFieldValue.prototype = {
    call$2: function(fieldValue, $name) {
      var t1, t2, t3;
      if (fieldValue == null)
        return;
      if (type$.ByteData._is(fieldValue))
        C.NativeByteData_methods.getUint64$2(fieldValue, 0, C.C_Endian);
      else if (fieldValue instanceof M.PbListBase)
        for (t1 = fieldValue._wrappedList, t2 = H._arrayInstanceType(t1), t1 = new J.ArrayIterator(t1, t1.length, t2._eval$1("ArrayIterator<1>")), t2 = t2._precomputed1, t3 = this.renderValue; t1.moveNext$0();)
          t3.call$2($name, t2._as(t1._current));
      else
        this.renderValue.call$2($name, fieldValue);
    },
    $signature: 88
  };
  M._FieldSet_writeString_closure.prototype = {
    call$1: function(fi) {
      var t1, t2;
      type$.FieldInfo_dynamic._as(fi);
      t1 = this.$this._values;
      t2 = fi.index;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return this.writeFieldValue.call$2(t1[t2], fi.name);
    },
    $signature: 89
  };
  M._FieldSet_writeString_closure0.prototype = {
    call$1: function(tagNumber) {
      var t1, t2;
      H._asInt(tagNumber);
      t1 = this.$this;
      t2 = t1._extensions._values.$index(0, tagNumber);
      t1 = t1._extensions._info.$index(0, tagNumber);
      return this.writeFieldValue.call$2(t2, "[" + H.S(t1.get$name(t1)) + "]");
    },
    $signature: 90
  };
  M.GeneratedMessage.prototype = {
    GeneratedMessage$0: function() {
      var t1 = this.get$info_(),
        t2 = M._FieldSet__makeValueList(t1.byIndex.length);
      t1 = t1.oneofs;
      if (t1.get$isEmpty(t1))
        t1 = null;
      else {
        t1 = type$.int;
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      }
      this.__fieldSet = new M._FieldSet(this, null, t2, t1);
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof M.GeneratedMessage) {
        t1 = this.__fieldSet;
        t1.toString;
        t2 = other.__fieldSet;
        t2.toString;
        t2 = t1._equals$1(t2);
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return this.__fieldSet.get$_hashCode();
    },
    toString$0: function(_) {
      var t1,
        out = new P.StringBuffer("");
      this.__fieldSet.writeString$2(out, "");
      t1 = out._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    writeToCodedBufferWriter$1: function(output) {
      var t1 = this.__fieldSet;
      t1.toString;
      return M._writeToCodedBufferWriter(t1, output);
    },
    mergeFromCodedBufferReader$2: function(input, extensionRegistry) {
      var t1 = this.__fieldSet._protobuf$_message.get$info_(),
        t2 = this.__fieldSet;
      t2.toString;
      M._mergeFromCodedBufferReader(t1, t2, input, extensionRegistry);
    },
    mergeFromBuffer$2: function(input, extensionRegistry) {
      var t1, codedInput, t2;
      type$.List_int._as(input);
      t1 = Math.min(67108864, input.length);
      codedInput = new M.CodedBufferReader(input, t1);
      codedInput._currentLimit = t1;
      t1 = this.__fieldSet._protobuf$_message.get$info_();
      t2 = this.__fieldSet;
      t2.toString;
      M._mergeFromCodedBufferReader(t1, t2, codedInput, extensionRegistry);
      if (codedInput._lastTag !== 0)
        H.throwExpression(M.InvalidProtocolBufferException$invalidEndTag());
    },
    createRepeatedField$1$2: function(tagNumber, fi, $T) {
      var t1 = $T._eval$1("~(0?)?")._as($T._eval$1("FieldInfo<0>")._as(fi).check);
      t1.toString;
      return M.PbList$(t1, $T);
    },
    mergeFromMessage$1: function(other) {
      var t1, t2;
      type$.GeneratedMessage._as(other);
      t1 = this.__fieldSet;
      t1.toString;
      t2 = other.__fieldSet;
      t2.toString;
      return t1._mergeFromMessage$1(t2);
    },
    $$_setUnsignedInt32$2: function(index, value) {
      var t1, t2;
      if (!(0 <= value && value <= 4294967295)) {
        t1 = this.__fieldSet;
        t2 = t1._protobuf$_message.get$info_().byIndex;
        if (index >= t2.length)
          return H.ioore(t2, index);
        t1._validateField$2(t2[index], value);
      }
      this.__fieldSet._$set$2(index, value);
    }
  };
  M.GeneratedMessage__createDefaultMakerFor_defaultMaker.prototype = {
    call$0: function() {
      var defaultValue,
        t1 = this._box_0,
        t2 = t1.defaultValue;
      if (t2 == null) {
        defaultValue = this.createFn.call$0();
        defaultValue.__fieldSet._markReadOnly$0();
        t1.defaultValue = defaultValue;
        t1 = defaultValue;
      } else
        t1 = t2;
      return t1;
    },
    $signature: function() {
      return this.T._eval$1("0()");
    }
  };
  M.PackageName.prototype = {};
  M.FrozenPbList.prototype = {
    _unsupported$1: function(method) {
      return new P.UnsupportedError("Cannot call " + method + " on an unmodifiable list");
    },
    $indexSet: function(_, index, value) {
      H._asInt(index);
      this.$ti._precomputed1._as(value);
      return H.throwExpression(this._unsupported$1("set"));
    },
    set$length: function(_, newLength) {
      H.throwExpression(this._unsupported$1("set length"));
    },
    add$1: function(_, value) {
      this.$ti._eval$1("1?")._as(value);
      return H.throwExpression(this._unsupported$1("add"));
    },
    addAll$1: function(_, iterable) {
      this.$ti._eval$1("Iterable<1>")._as(iterable);
      return H.throwExpression(this._unsupported$1("addAll"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      this.$ti._eval$1("Iterable<1>")._as(iterable);
      return H.throwExpression(this._unsupported$1("setRange"));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    }
  };
  M.PbList.prototype = {
    toFrozenPbList$0: function() {
      return new M.FrozenPbList(this._wrappedList, M.protobuf___checkNotNull$closure(), this.$ti._eval$1("FrozenPbList<1>"));
    },
    add$1: function(_, value) {
      this.$ti._precomputed1._as(value);
      this.check.call$1(value);
      C.JSArray_methods.add$1(this._wrappedList, value);
    },
    addAll$1: function(_, collection) {
      this.$ti._eval$1("Iterable<1>")._as(collection);
      J.forEach$1$ax(collection, this.check);
      C.JSArray_methods.addAll$1(this._wrappedList, collection);
    },
    setRange$4: function(_, start, end, from, skipCount) {
      this.$ti._eval$1("Iterable<1>")._as(from);
      J.skip$1$ax(from, skipCount).take$1(0, end - start).forEach$1(0, this.check);
      C.JSArray_methods.setRange$4(this._wrappedList, start, end, from, skipCount);
    },
    setRange$3: function($receiver, start, end, from) {
      return this.setRange$4($receiver, start, end, from, 0);
    }
  };
  M.PbListBase.prototype = {
    PbListBase$_noList$1$check: function(check, $E) {
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof M.PbListBase && M._areListsEqual(other, this);
    },
    get$hashCode: function(_) {
      return M._HashUtils__hashObjects(this._wrappedList);
    },
    get$iterator: function(_) {
      var t1 = this._wrappedList;
      return new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    map$1$1: function(_, f, $T) {
      var t1 = this._wrappedList,
        t2 = H._arrayInstanceType(t1);
      return new H.MappedListIterable(t1, t2._bind$1($T)._eval$1("1(2)")._as(H._instanceType(this)._bind$1($T)._eval$1("1(2)")._as(f)), t2._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    forEach$1: function(_, f) {
      C.JSArray_methods.forEach$1(this._wrappedList, H._instanceType(this)._eval$1("~(1)")._as(f));
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      return C.JSArray_methods.fold$1$2(this._wrappedList, $T._as(initialValue), H._instanceType(this)._bind$1($T)._eval$1("1(1,2)")._as(combine), $T);
    },
    get$isEmpty: function(_) {
      return this._wrappedList.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._wrappedList.length !== 0;
    },
    take$1: function(_, count) {
      var t1 = this._wrappedList;
      return H.SubListIterable$(t1, 0, H.checkNotNullable(count, "count", type$.int), H._arrayInstanceType(t1)._precomputed1);
    },
    skip$1: function(_, count) {
      var t1 = this._wrappedList;
      return H.SubListIterable$(t1, count, null, H._arrayInstanceType(t1)._precomputed1);
    },
    elementAt$1: function(_, index) {
      var t1 = this._wrappedList;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this._wrappedList, "[", "]");
    },
    $index: function(_, index) {
      var t1 = this._wrappedList;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$length: function(_) {
      return this._wrappedList.length;
    },
    $indexSet: function(_, index, value) {
      H._asInt(index);
      H._instanceType(this)._precomputed1._as(value);
      this.check.call$1(value);
      C.JSArray_methods.$indexSet(this._wrappedList, index, value);
    },
    set$length: function(_, newLength) {
      var t1 = this._wrappedList;
      if (newLength > t1.length)
        throw H.wrapException(P.UnsupportedError$("Extending protobuf lists is not supported"));
      C.JSArray_methods.set$length(t1, newLength);
    }
  };
  M.ProtobufEnum.prototype = {
    get$hashCode: function(_) {
      return this.value;
    },
    toString$0: function(_) {
      return this.name;
    },
    get$value: function() {
      return this.value;
    }
  };
  M.UnknownFieldSet.prototype = {
    get$isEmpty: function(_) {
      var t1 = this._fields;
      return t1.get$isEmpty(t1);
    },
    mergeFieldFromBuffer$2: function(tag, input) {
      var number, t1, unknownFieldSet, _this = this,
        _s15_ = "UnknownFieldSet";
      if (_this._isReadOnly)
        M.defaultFrozenMessageModificationHandler(_s15_, "mergeFieldFromBuffer");
      number = C.JSInt_methods._shrOtherPositive$1(tag, 3);
      switch (tag & 7) {
        case 0:
          t1 = input._readRawVarint64$0();
          if (_this._isReadOnly)
            M.defaultFrozenMessageModificationHandler(_s15_, "mergeVarintField");
          C.JSArray_methods.add$1(_this._getField$1(number)._varints, t1);
          return true;
        case 1:
          t1 = input.readSfixed64$0();
          if (_this._isReadOnly)
            M.defaultFrozenMessageModificationHandler(_s15_, "mergeFixed64Field");
          C.JSArray_methods.add$1(_this._getField$1(number)._fixed64s, t1);
          return true;
        case 2:
          t1 = type$.List_int._as(input.readBytes$0());
          if (_this._isReadOnly)
            M.defaultFrozenMessageModificationHandler(_s15_, "mergeLengthDelimitedField");
          C.JSArray_methods.add$1(_this._getField$1(number)._lengthDelimited, t1);
          return true;
        case 3:
          t1 = input._recursionDepth;
          if (t1 >= 64)
            H.throwExpression(M.InvalidProtocolBufferException$recursionLimitExceeded());
          input._recursionDepth = t1 + 1;
          unknownFieldSet = new M.UnknownFieldSet(P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.UnknownFieldSetField));
          unknownFieldSet.mergeFromCodedBufferReader$1(input);
          if (input._lastTag !== (number << 3 | 4) >>> 0)
            H.throwExpression(M.InvalidProtocolBufferException$invalidEndTag());
          --input._recursionDepth;
          if (_this._isReadOnly)
            M.defaultFrozenMessageModificationHandler(_s15_, "mergeGroupField");
          C.JSArray_methods.add$1(_this._getField$1(number)._groups, unknownFieldSet);
          return true;
        case 4:
          return false;
        case 5:
          t1 = C.NativeByteData_methods._getUint32$2(input._readByteData$1(4), 0, true);
          if (_this._isReadOnly)
            M.defaultFrozenMessageModificationHandler(_s15_, "mergeFixed32Field");
          C.JSArray_methods.add$1(_this._getField$1(number)._fixed32s, t1);
          return true;
        default:
          throw H.wrapException(new M.InvalidProtocolBufferException("Protocol message tag had invalid wire type."));
      }
    },
    mergeFromCodedBufferReader$1: function(input) {
      var tag;
      if (this._isReadOnly)
        M.defaultFrozenMessageModificationHandler("UnknownFieldSet", "mergeFromCodedBufferReader");
      for (; true;) {
        tag = input.readTag$0();
        if (tag === 0 || !this.mergeFieldFromBuffer$2(tag, input))
          break;
      }
    },
    mergeFromUnknownFieldSet$1: function(other) {
      var t1, t2, t3, t4, t5,
        _s15_ = "UnknownFieldSet";
      if (this._isReadOnly)
        M.defaultFrozenMessageModificationHandler(_s15_, "mergeFromUnknownFieldSet");
      for (t1 = other._fields, t2 = t1.get$keys(), t2 = t2.get$iterator(t2), t3 = type$.UnknownFieldSetField; t2.moveNext$0();) {
        t4 = t2.get$current();
        t5 = t1.$index(0, t4);
        t5.toString;
        t3._as(t5);
        if (this._isReadOnly)
          M.defaultFrozenMessageModificationHandler(_s15_, "mergeField");
        t4 = this._getField$1(t4);
        C.JSArray_methods.addAll$1(t4._varints, t5._varints);
        C.JSArray_methods.addAll$1(t4._fixed32s, t5._fixed32s);
        C.JSArray_methods.addAll$1(t4._fixed64s, t5._fixed64s);
        C.JSArray_methods.addAll$1(t4._lengthDelimited, t5._lengthDelimited);
        C.JSArray_methods.addAll$1(t4._groups, t5._groups);
      }
    },
    _getField$1: function(number) {
      if (number === 0)
        H.throwExpression(P.ArgumentError$("Zero is not a valid field number."));
      return this._fields.putIfAbsent$2(number, new M.UnknownFieldSet__getField_closure());
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof M.UnknownFieldSet))
        return false;
      return M._areMapsEqual(other._fields, this._fields);
    },
    get$hashCode: function(_) {
      var t1 = {};
      t1.hash = 0;
      this._fields.forEach$1(0, new M.UnknownFieldSet_hashCode_closure(t1));
      return t1.hash;
    },
    toString$0: function(_) {
      return this._toString$1("");
    },
    _toString$1: function(indent) {
      var t1, t2, t3, t4, _i, tag, t5, t6, _i0, value, t7,
        stringBuffer = new P.StringBuffer("");
      for (t1 = this._fields, t2 = M._sorted(t1.get$keys(), type$.int), t3 = t2.length, t4 = type$.ByteData, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        tag = t2[_i];
        t5 = t1.$index(0, tag);
        t5.toString;
        for (t5 = t5.get$values(), t6 = t5.length, _i0 = 0; _i0 < t5.length; t5.length === t6 || (0, H.throwConcurrentModificationError)(t5), ++_i0) {
          value = t5[_i0];
          if (value instanceof M.UnknownFieldSet) {
            t7 = stringBuffer._contents += indent + H.S(tag) + ": {\n";
            t7 += value._toString$1(indent + "  ");
            stringBuffer._contents = t7;
            stringBuffer._contents = t7 + (indent + "}\n");
          } else {
            if (t4._is(value))
              value = C.NativeByteData_methods.getUint64$2(value, 0, C.C_Endian);
            stringBuffer._contents += indent + H.S(tag) + ": " + H.S(value) + "\n";
          }
        }
      }
      t1 = stringBuffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    writeToCodedBufferWriter$1: function(output) {
      var t1, t2, t3;
      for (t1 = this._fields, t2 = t1.get$keys(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.get$current();
        t1.$index(0, t3).writeTo$2(t3, output);
      }
    },
    _markReadOnly$0: function() {
      if (this._isReadOnly)
        return;
      this._fields.get$values().forEach$1(0, new M.UnknownFieldSet__markReadOnly_closure());
      this._isReadOnly = true;
    }
  };
  M.UnknownFieldSet__getField_closure.prototype = {
    call$0: function() {
      var t1 = type$.JSArray_Int64;
      return new M.UnknownFieldSetField(H.setRuntimeTypeInfo([], type$.JSArray_List_int), H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], type$.JSArray_int), H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], type$.JSArray_UnknownFieldSet));
    },
    $signature: 91
  };
  M.UnknownFieldSet_hashCode_closure.prototype = {
    call$2: function(number, value) {
      var t1, hash;
      H._asInt(number);
      type$.Object._as(value);
      t1 = this._box_0;
      hash = 37 * t1.hash + number & 536870911;
      t1.hash = hash;
      t1.hash = 53 * hash + J.get$hashCode$(value) & 536870911;
    },
    $signature: 92
  };
  M.UnknownFieldSet__markReadOnly_closure.prototype = {
    call$1: function(f) {
      return type$.UnknownFieldSetField._as(f)._markReadOnly$0();
    },
    $signature: 140
  };
  M.UnknownFieldSetField.prototype = {
    _markReadOnly$0: function() {
      var t1, _this = this;
      if (_this._isReadOnly)
        return;
      _this._isReadOnly = true;
      _this.set$_lengthDelimited(P.List_List$unmodifiable(_this._lengthDelimited, type$.List_int));
      t1 = type$.Int64;
      _this.set$_varints(P.List_List$unmodifiable(_this._varints, t1));
      _this.set$_fixed32s(P.List_List$unmodifiable(_this._fixed32s, type$.int));
      _this.set$_fixed64s(P.List_List$unmodifiable(_this._fixed64s, t1));
      _this.set$_groups(P.List_List$unmodifiable(_this._groups, type$.UnknownFieldSet));
    },
    $eq: function(_, other) {
      var i, t1, t2, _this = this;
      if (other == null)
        return false;
      if (!(other instanceof M.UnknownFieldSetField))
        return false;
      if (_this._lengthDelimited.length !== other._lengthDelimited.length)
        return false;
      for (i = 0; t1 = _this._lengthDelimited, i < t1.length; ++i) {
        t2 = other._lengthDelimited;
        if (i >= t2.length)
          return H.ioore(t2, i);
        if (!M._areListsEqual(t2[i], t1[i]))
          return false;
      }
      if (!M._areListsEqual(other._varints, _this._varints))
        return false;
      if (!M._areListsEqual(other._fixed32s, _this._fixed32s))
        return false;
      if (!M._areListsEqual(other._fixed64s, _this._fixed64s))
        return false;
      if (!M._areListsEqual(other._groups, _this._groups))
        return false;
      return true;
    },
    get$hashCode: function(_) {
      var t1, t2, hash, _i, value, t3, i, t4, _this = this;
      for (t1 = _this._lengthDelimited, t2 = t1.length, hash = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        value = t1[_i];
        for (t3 = J.getInterceptor$asx(value), i = 0; i < t3.get$length(value); ++i) {
          t4 = t3.$index(value, i);
          if (typeof t4 !== "number")
            return H.iae(t4);
          hash = hash + t4 & 536870911;
          hash = hash + ((hash & 524287) << 10) & 536870911;
          hash ^= hash >>> 6;
        }
        hash = hash + ((hash & 67108863) << 3) & 536870911;
        hash ^= hash >>> 11;
        hash = hash + ((hash & 16383) << 15) & 536870911;
      }
      for (t1 = _this._varints, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        hash = hash + 7 * J.get$hashCode$(t1[_i]) & 536870911;
      for (t1 = _this._fixed32s, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        hash = hash + 37 * J.get$hashCode$(t1[_i]) & 536870911;
      for (t1 = _this._fixed64s, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        hash = hash + 53 * J.get$hashCode$(t1[_i]) & 536870911;
      for (t1 = _this._groups, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        hash = hash + J.get$hashCode$(t1[_i]) & 536870911;
      return hash;
    },
    get$values: function() {
      var _this = this, t1 = [];
      C.JSArray_methods.addAll$1(t1, _this._lengthDelimited);
      C.JSArray_methods.addAll$1(t1, _this._varints);
      C.JSArray_methods.addAll$1(t1, _this._fixed32s);
      C.JSArray_methods.addAll$1(t1, _this._fixed64s);
      C.JSArray_methods.addAll$1(t1, _this._groups);
      return t1;
    },
    writeTo$2: function(fieldNumber, output) {
      var _this = this,
        t1 = new M.UnknownFieldSetField_writeTo_write(output, fieldNumber);
      t1.call$2(65538, _this._varints);
      t1.call$2(131074, _this._fixed32s);
      t1.call$2(262146, _this._fixed64s);
      t1.call$2(34, _this._lengthDelimited);
      t1.call$2(1026, _this._groups);
    },
    get$length: function(_) {
      return this.get$values().length;
    },
    set$_lengthDelimited: function(_lengthDelimited) {
      this._lengthDelimited = type$.List_List_int._as(_lengthDelimited);
    },
    set$_varints: function(_varints) {
      this._varints = type$.List_Int64._as(_varints);
    },
    set$_fixed32s: function(_fixed32s) {
      this._fixed32s = type$.List_int._as(_fixed32s);
    },
    set$_fixed64s: function(_fixed64s) {
      this._fixed64s = type$.List_Int64._as(_fixed64s);
    },
    set$_groups: function(_groups) {
      this._groups = type$.List_UnknownFieldSet._as(_groups);
    }
  };
  M.UnknownFieldSetField_writeTo_write.prototype = {
    call$2: function(type, value) {
      this.output.writeField$3(this.fieldNumber, type, value);
    },
    $signature: 12
  };
  M._areMapsEqual_closure.prototype = {
    call$1: function(key) {
      return M._deepEquals(this.lhs.$index(0, key), this.rhs.$index(0, key));
    },
    $signature: 94
  };
  M._areByteDataEqual_asBytes.prototype = {
    call$1: function(d) {
      return H.NativeUint8List_NativeUint8List$view(d.buffer, d.byteOffset, d.byteLength);
    },
    $signature: 95
  };
  M._HashUtils__hashObjects_closure.prototype = {
    call$2: function(h, i) {
      return M._HashUtils__combine(H._asInt(h), J.get$hashCode$(i));
    },
    $signature: 96
  };
  V.main_closure.prototype = {
    call$1: function(element) {
      type$.User._as(element);
      C.JSArray_methods.add$1(element.Notifier__listeners, H._instanceType(element)._eval$1("Notifier.T")._as(this.callback));
      return null;
    },
    $signature: 97
  };
  V.MumbleExampleCallback.prototype = {};
  V._MumbleExampleCallback_Object_MumbleClientListener.prototype = {};
  V._MumbleExampleCallback_Object_MumbleClientListener_UserListener.prototype = {};
  (function aliases() {
    var _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P._BroadcastStreamController.prototype;
    _.super$_BroadcastStreamController$_addEventError = _._addEventError$0;
    _ = P._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = Q.TextMessage0.prototype;
    _.super$TextMessage$jsonMap = _.jsonMap$0;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_1_u = hunkHelpers._instance_1u,
      _static = hunkHelpers.installStaticTearOff;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 98);
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 9);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 9);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 9);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static_1(P, "async___nullDataHandler$closure", "_nullDataHandler", 7);
    _static_2(P, "async___nullErrorHandler$closure", "_nullErrorHandler", 3);
    _static_0(P, "async___nullDoneHandler$closure", "_nullDoneHandler", 0);
    var _;
    _instance_0_u(_ = P._BroadcastSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_2_u(P._Future.prototype, "get$_completeError", "_completeError$2", 3);
    _instance_1_i(_ = P._StreamController.prototype, "get$add", "add$1", 2);
    _instance(_, "get$addError", 0, 1, null, ["call$2", "call$1"], ["addError$2", "addError$1"], 77, 0);
    _instance_1_u(_, "get$_add", "_add$1", 2);
    _instance_2_u(_, "get$_addError", "_addError$2", 3);
    _instance_0_u(_, "get$_close", "_close$0", 0);
    _instance_0_u(_ = P._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(_ = P._BufferingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(P._DoneStreamSubscription.prototype, "get$_sendDone", "_sendDone$0", 0);
    _instance_1_u(_ = P._StreamIterator.prototype, "get$_onData", "_onData$1", 2);
    _instance_2_u(_, "get$_onError", "_onError$2", 3);
    _instance_0_u(_, "get$_async$_onDone", "_async$_onDone$0", 0);
    _instance_0_u(_ = P._ForwardingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 2);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 19);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 0);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 10);
    _static_1(S, "client_base___channelToId$closure", "_channelToId", 8);
    _static_1(S, "client_base___userToId$closure", "_userToId", 100);
    _static_0(G, "Mumble_pb_Version_create$closure", "Version_create", 101);
    _static_0(G, "Mumble_pb_UDPTunnel_create$closure", "UDPTunnel_create", 102);
    _static_0(G, "Mumble_pb_Authenticate_create$closure", "Authenticate_create", 103);
    _static_0(G, "Mumble_pb_Ping_create$closure", "Ping_create", 104);
    _static_0(G, "Mumble_pb_Reject_create$closure", "Reject_create", 105);
    _static_0(G, "Mumble_pb_ServerSync_create$closure", "ServerSync_create", 106);
    _static_0(G, "Mumble_pb_ChannelRemove_create$closure", "ChannelRemove_create", 107);
    _static_0(G, "Mumble_pb_ChannelState_create$closure", "ChannelState_create", 108);
    _static_0(G, "Mumble_pb_UserRemove_create$closure", "UserRemove_create", 109);
    _static_0(G, "Mumble_pb_UserState_create$closure", "UserState_create", 110);
    _static_0(G, "Mumble_pb_BanList_BanEntry_create$closure", "BanList_BanEntry_create", 111);
    _static_0(G, "Mumble_pb_BanList_create$closure", "BanList_create", 112);
    _static_0(G, "Mumble_pb_TextMessage_create$closure", "TextMessage_create", 113);
    _static_0(G, "Mumble_pb_PermissionDenied_create$closure", "PermissionDenied_create", 114);
    _static_0(G, "Mumble_pb_ACL_ChanGroup_create$closure", "ACL_ChanGroup_create", 115);
    _static_0(G, "Mumble_pb_ACL_ChanACL_create$closure", "ACL_ChanACL_create", 116);
    _static_0(G, "Mumble_pb_ACL_create$closure", "ACL_create", 117);
    _static_0(G, "Mumble_pb_QueryUsers_create$closure", "QueryUsers_create", 118);
    _static_0(G, "Mumble_pb_CryptSetup_create$closure", "CryptSetup_create", 119);
    _static_0(G, "Mumble_pb_ContextActionModify_create$closure", "ContextActionModify_create", 120);
    _static_0(G, "Mumble_pb_ContextAction_create$closure", "ContextAction_create", 121);
    _static_0(G, "Mumble_pb_UserList_User_create$closure", "UserList_User_create", 122);
    _static_0(G, "Mumble_pb_UserList_create$closure", "UserList_create", 123);
    _static_0(G, "Mumble_pb_VoiceTarget_Target_create$closure", "VoiceTarget_Target_create", 124);
    _static_0(G, "Mumble_pb_VoiceTarget_create$closure", "VoiceTarget_create", 125);
    _static_0(G, "Mumble_pb_PermissionQuery_create$closure", "PermissionQuery_create", 126);
    _static_0(G, "Mumble_pb_CodecVersion_create$closure", "CodecVersion_create", 127);
    _static_0(G, "Mumble_pb_UserStats_Stats_create$closure", "UserStats_Stats_create", 128);
    _static_0(G, "Mumble_pb_UserStats_create$closure", "UserStats_create", 129);
    _static_0(G, "Mumble_pb_RequestBlob_create$closure", "RequestBlob_create", 130);
    _static_0(G, "Mumble_pb_ServerConfig_create$closure", "ServerConfig_create", 131);
    _static_0(G, "Mumble_pb_SuggestConfig_create$closure", "SuggestConfig_create", 132);
    _static_0(G, "Mumble_pb_PluginDataTransmission_create$closure", "PluginDataTransmission_create", 133);
    _static_1(S, "Mumble_pbenum_Reject_RejectType_valueOf$closure", "Reject_RejectType_valueOf", 134);
    _static_1(S, "Mumble_pbenum_PermissionDenied_DenyType_valueOf$closure", "PermissionDenied_DenyType_valueOf", 135);
    _static_1(S, "Mumble_pbenum_ContextActionModify_Operation_valueOf$closure", "ContextActionModify_Operation_valueOf", 136);
    _static_1(T, "ban__banEntryFromProto$closure", "banEntryFromProto", 137);
    _static_1(M, "protobuf___checkNotNull$closure", "_checkNotNull", 2);
    _static_1(M, "protobuf___checkFloat$closure", "_checkFloat", 2);
    _static_1(M, "protobuf___checkSigned32$closure", "_checkSigned32", 2);
    _static_1(M, "protobuf___checkUnsigned32$closure", "_checkUnsigned32", 2);
    _static(M, "protobuf__defaultFrozenMessageModificationHandler$closure", 1, null, ["call$2", "call$1"], ["defaultFrozenMessageModificationHandler", function(messageName) {
      return M.defaultFrozenMessageModificationHandler(messageName, null);
    }], 138, 0);
    _static_0(M, "protobuf_PbFieldType__STRING_EMPTY$closure", "PbFieldType__STRING_EMPTY", 139);
    _static_0(M, "protobuf_PbFieldType__BYTES_EMPTY$closure", "PbFieldType__BYTES_EMPTY", 93);
    _static_0(M, "protobuf_PbFieldType__BOOL_FALSE$closure", "PbFieldType__BOOL_FALSE", 25);
    _static_0(M, "protobuf_PbFieldType__INT_ZERO$closure", "PbFieldType__INT_ZERO", 5);
    _static_0(M, "protobuf_PbFieldType__DOUBLE_ZERO$closure", "PbFieldType__DOUBLE_ZERO", 17);
    _instance_0_u(_ = M.CodedBufferReader.prototype, "get$readInt32", "readInt32$0", 5);
    _instance_0_u(_, "get$readInt64", "readInt64$0", 6);
    _instance_0_u(_, "get$readUint32", "readUint32$0", 5);
    _instance_0_u(_, "get$readUint64", "readUint64$0", 6);
    _instance_0_u(_, "get$readSint32", "readSint32$0", 5);
    _instance_0_u(_, "get$readSint64", "readSint64$0", 6);
    _instance_0_u(_, "get$readFixed32", "readFixed32$0", 5);
    _instance_0_u(_, "get$readFixed64", "readFixed64$0", 6);
    _instance_0_u(_, "get$readSfixed32", "readSfixed32$0", 5);
    _instance_0_u(_, "get$readSfixed64", "readSfixed64$0", 6);
    _instance_0_u(_, "get$readBool", "readBool$0", 25);
    _instance_0_u(_, "get$readFloat", "readFloat$0", 17);
    _instance_0_u(_, "get$readDouble", "readDouble$0", 17);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Iterable, H.CastIterator, P.Error, P._ListBase_Object_ListMixin, H.Closure, H.ListIterator, P.Iterator, H.EmptyIterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, P.MapView, H.ConstantMap, H.TypeErrorDecoder, H.NullThrownFromJavaScriptException, H.ExceptionAndStackTrace, H._StackTrace, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H._MatchImplementation, H._AllMatchesIterator, H.Rti, H._FunctionParameters, H._Type, P._TimerImpl, P._AsyncAwaitCompleter, P._AsyncStarStreamController, P._IterationMarker, P._SyncStarIterator, P.AsyncError, P.Stream, P._BufferingStreamSubscription, P._BroadcastStreamController, P.TimeoutException, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.StreamSubscription, P.StreamSink, P.StreamTransformerBase, P._ControllerEventSinkWrapper, P._StreamController, P._SyncStreamControllerDispatch, P._AsyncStreamControllerDispatch, P._AddStreamState, P._DelayedEvent, P._DelayedDone, P._PendingEvents, P._DoneStreamSubscription, P._StreamIterator, P._Zone, P.ListMixin, P._UnmodifiableMapMixin, P.Codec, P._JsonStringifier, P._JsonPrettyPrintMixin, P._Utf8Encoder, P._Utf8Decoder, P.DateTime, P.Duration, P.OutOfMemoryError, P.StackOverflowError, P._Exception, P.FormatException, P.MapEntry, P.Null, P._StringStackTrace, P.StringBuffer, W.EventStreamProvider, P._AcceptStructuredClone, P.NullRejectionException, P.Endian, D._AudioFrame_Object_JsonString, D._AudioClient_Object_Notifier, D._UdpErrorReceiver, N._AudioPacket_Object_JsonString, U.MumbleClient, U._ServerInfo_Object_JsonString, N._OpenEvent, Q._ConnectionOptions_Object_JsonString, T.ProtocolException, M.GeneratedMessage, M.ProtobufEnum, M.MumbleClientListener, M.UserListener, M.Notifier, F.UnknownMessageException, R.AudioCodec, R.TalkMode, R.PositionalInformation, T._BanEntry_Object_JsonString, N._ChannelChanges_Object_JsonString, N._Channel_Object_Notifier, M._CryptState_Object_JsonString, N.RejectType, N.RejectException, N.DenyType, N.PermissionDeniedException, X._Permission_Object_JsonString, K._RegisteredUser_Object_JsonString, G._ServerSuggestedClientConfig_Object_JsonString, G._ServerConfig_Object_JsonString, G._ServerConnectionStats_Object_JsonString, G._ServerCodecVersion_Object_JsonString, Y._PacketStats_Object_JsonString, Y._VersionInformation_Object_JsonString, Y._PingStats_Object_JsonString, Q._TextMessage_Object_JsonString, N._UserChanges_Object_JsonString, N._User_Object_Notifier, A._UserStats_Object_JsonString, L._PlatformOptions_Object_JsonString, D.ProtobufPacket, X.DataLeftException, V.ExtendedCompleter, B.JsonString, Z.VarIntResult, V.Int64, M.BuilderInfo, M.CodedBufferReader, M.CodedBufferWriter, M.InvalidProtocolBufferException, M._ExtensionFieldSet, M._EmptyExtensionRegistry, M.FieldInfo, M._FieldSet, M.PackageName, M.UnknownFieldSet, M.UnknownFieldSetField, V._MumbleExampleCallback_Object_MumbleClientListener]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.Event, W.DomException, W.EventTarget]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(P.Iterable, [H._CastIterableBase, H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.TakeIterable, H.SkipIterable, H._ConstantMapKeyIterable, P.IterableBase]);
    _inheritMany(H._CastIterableBase, [H.CastIterable, H.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(H._EfficientLengthCastIterable, H.CastIterable);
    _inherit(H._CastListBase, H.__CastListBase__CastIterableBase_ListMixin);
    _inherit(H.CastList, H._CastListBase);
    _inheritMany(P.Error, [H.LateError, P.TypeError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.RuntimeError, P.AssertionError, H._Error, P.JsonUnsupportedObjectError, P.NullThrownError, P.ArgumentError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError, T.UnhandeledError]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inheritMany(P.ListBase, [H.UnmodifiableListBase, M.PbListBase]);
    _inherit(H.CodeUnits, H.UnmodifiableListBase);
    _inheritMany(H.Closure, [H.nullFuture_closure, H.ConstantMap_map_closure, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.JsLinkedHashMap_addAll_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._awaitOnObject_closure, P._awaitOnObject_closure0, P._wrapJsFunctionForAsync_closure, P._asyncStarHelper_closure, P._asyncStarHelper_closure0, P._AsyncStarStreamController__resumeBody, P._AsyncStarStreamController__resumeBody_closure, P._AsyncStarStreamController_closure0, P._AsyncStarStreamController_closure1, P._AsyncStarStreamController_closure, P._AsyncStarStreamController__closure, P._SyncBroadcastStreamController__sendData_closure, P._SyncBroadcastStreamController__sendError_closure, P._SyncBroadcastStreamController__sendDone_closure, P.Future_Future$delayed_closure, P.Future_wait__error_set, P.Future_wait__stackTrace_set, P.Future_wait__error_get, P.Future_wait__stackTrace_get, P.Future_wait_handleError, P.Future_wait_closure, P.Future_any_onValue, P.Future_any_onError, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncCompleteWithValue_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_forEach_closure, P.Stream_forEach_closure0, P.Stream_forEach__closure, P.Stream_forEach__closure0, P.Stream_length_closure, P.Stream_length_closure0, P.Stream_isEmpty_closure, P.Stream_isEmpty_closure0, P.Stream_timeout_closure, P.Stream_timeout_closure0, P.Stream_timeout__closure, P.Stream_timeout__closure0, P.Stream_timeout__closure1, P.Stream_timeout__closure2, P.Stream_timeout__closure3, P.Stream_timeout__closure4, P._StreamController__subscribe_closure, P._StreamController__recordCancel_complete, P._AddStreamState_cancel_closure, P._BufferingStreamSubscription__sendError_sendError, P._BufferingStreamSubscription__sendDone_sendDone, P._PendingEvents_schedule_closure, P._cancelAndError_closure, P._cancelAndErrorClosure_closure, P._cancelAndValue_closure, P._rootHandleUncaughtError_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.LinkedHashMap_LinkedHashMap$from_closure, P.MapBase_mapToString_closure, P.MapMixin_entries_closure, P.Utf8Decoder__decoder_closure, P.Utf8Decoder__decoderNonfatal_closure, P._JsonStringifier_writeMap_closure, P._JsonPrettyPrintMixin_writeMap_closure, P.DateTime_parse_parseIntOrZero, P.DateTime_parse_parseMilliAndMicroseconds, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits, W._EventStreamSubscription_closure, W._EventStreamSubscription_onData_closure, P._AcceptStructuredClone_walk_closure, P.promiseToFuture_closure, P.promiseToFuture_closure0, D.AudioClientBase_feed_closure, D._AudioFrameStream$__closure, N.IncomingAudioPacket_jsonMap_closure, S.MumbleClientBase_connect_closure, S.MumbleClientBase_connect_closure0, S.MumbleClientBase_connect_closure1, S.MumbleClientBase__onError_closure, S.MumbleClientBase__onDone_closure, S.MumbleClientBase__onMessage_closure, S.MumbleClientBase__onMessage_closure0, S.MumbleClientBase__onMessage_closure1, S.MumbleClientBase__onMessage_closure2, S.MumbleClientBase__onMessage_closure3, S.MumbleClientBase__onMessage_closure4, S.MumbleClientBase__onMessage_closure5, S.MumbleClientBase__handleTextMessage_closure, S.MumbleClientBase__handleTextMessage_closure0, S.MumbleClientBase__handleTextMessage_closure1, S.MumbleClientBase__handleTextMessage_closure2, S.MumbleClientBase__handleChannelState_closure, S.MumbleClientBase__handleUserState_closure, N.ConnectionImp__asBinaryStream__sub_set, N.ConnectionImp__asBinaryStream__sub_get, N.ConnectionImp__asBinaryStream_closure, N.ConnectionImp__asBinaryStream_closure0, N.ConnectionImp__asBinaryStream_closure1, N._AllStream_get_allEvents_closure, N._AllStream_get_allEvents__closure, N._AllStream_get_allEvents_closure0, N._AllStream_get_allEvents_closure1, F._builders_closure, F._builders_closure0, F._builders_closure1, F._builders_closure2, F._builders_closure3, F._builders_closure4, F._builders_closure5, F._builders_closure6, F._builders_closure7, F._builders_closure8, F._builders_closure9, F._builders_closure10, F._builders_closure11, F._builders_closure12, F._builders_closure13, F._builders_closure14, F._builders_closure15, F._builders_closure16, F._builders_closure17, F._builders_closure18, F._builders_closure19, F._builders_closure20, F._builders_closure21, F._builders_closure22, F._builders_closure23, F._builders_closure24, F._builders_closure25, N.Channel_jsonMap_closure, N.Channel__notifyChannelPermissions_closure, N.Channel__notifyChannelUpdate_closure, N.Channel__notifyChannelRemoved_closure, Q.TextMessage_jsonMap_closure, Q.TextMessage_jsonMap_closure0, N.User__notifyUserUpdate_closure, N.User__notifyUserRemoved_closure, N.User__reportUserStats_closure, B.FilterNullList_filterNull_closure, M.BuilderInfo__computeSortedByTag_closure, M._readPackable_readToList, M._readPackableToListEnum_readToList, M._readPackableToList_closure, M.CodedBufferWriter_writeField_closure, M.FieldInfo$repeated_closure, M.FieldInfo_findMakeDefault_closure, M._unCamelCase_closure, M._FieldSet__hashCode_hashField, M._FieldSet__hashCode_hashField_closure, M._FieldSet__hashCode_hashEachField, M._FieldSet__hashCode_hashEachField_closure, M._FieldSet__hashCode_hashEachField_closure0, M._FieldSet__hashCode_hashEachField_closure1, M._FieldSet_writeString_renderValue, M._FieldSet_writeString_writeFieldValue, M._FieldSet_writeString_closure, M._FieldSet_writeString_closure0, M.GeneratedMessage__createDefaultMakerFor_defaultMaker, M.UnknownFieldSet__getField_closure, M.UnknownFieldSet_hashCode_closure, M.UnknownFieldSet__markReadOnly_closure, M.UnknownFieldSetField_writeTo_write, M._areMapsEqual_closure, M._areByteDataEqual_asBytes, M._HashUtils__hashObjects_closure, V.main_closure]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.TakeIterator, H.SkipIterator]);
    _inherit(H.EfficientLengthTakeIterable, H.TakeIterable);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P.MapView);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inheritMany(H.ConstantMap, [H.ConstantStringMap, H.GeneralConstantMap]);
    _inherit(H.ConstantProtoMap, H.ConstantStringMap);
    _inherit(H.NullError, P.TypeError);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inherit(H.JsLinkedHashMap, P.MapBase);
    _inheritMany(H.NativeTypedData, [H.NativeByteData, H.NativeTypedArray]);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inherit(H._TypeError, H._Error);
    _inherit(P._SyncStarIterable, P.IterableBase);
    _inheritMany(P.Stream, [P._StreamImpl, P.StreamView, P._ForwardingStream, W._EventStream]);
    _inherit(P._ControllerStream, P._StreamImpl);
    _inherit(P._BroadcastStream, P._ControllerStream);
    _inheritMany(P._BufferingStreamSubscription, [P._ControllerSubscription, P._ForwardingStreamSubscription]);
    _inherit(P._BroadcastSubscription, P._ControllerSubscription);
    _inheritMany(P._BroadcastStreamController, [P._SyncBroadcastStreamController, P._AsyncBroadcastStreamController]);
    _inheritMany(P._Completer, [P._AsyncCompleter, P._SyncCompleter]);
    _inheritMany(P._StreamController, [P._AsyncStreamController, P._SyncStreamController]);
    _inherit(P._StreamControllerAddStreamState, P._AddStreamState);
    _inheritMany(P._DelayedEvent, [P._DelayedData, P._DelayedError]);
    _inherit(P._StreamImplEvents, P._PendingEvents);
    _inherit(P._MapStream, P._ForwardingStream);
    _inherit(P._RootZone, P._Zone);
    _inheritMany(P.StreamTransformerBase, [P.Converter, X.ProtobufStreamTransformer]);
    _inheritMany(P.Codec, [P.Encoding, N.HexCodec]);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inherit(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonStringStringifier);
    _inherit(P._JsonStringStringifierPretty, P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin);
    _inherit(P.Utf8Codec, P.Encoding);
    _inheritMany(P.Converter, [P.Utf8Encoder, P.Utf8Decoder, A.HexDecoder, R.HexEncoder]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inheritMany(W.Event, [W.CloseEvent, W.MessageEvent]);
    _inherit(W.WebSocket, W.EventTarget);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inherit(D.AudioFrame, D._AudioFrame_Object_JsonString);
    _inherit(D.AudioClient, D._AudioClient_Object_Notifier);
    _inherit(D.AudioClientBase, D.AudioClient);
    _inheritMany(P.StreamView, [D.__AudioFrameStream_StreamView__UdpErrorReceiver, V.Connection]);
    _inherit(D._AudioFrameStream, D.__AudioFrameStream_StreamView__UdpErrorReceiver);
    _inherit(N.AudioPacket, N._AudioPacket_Object_JsonString);
    _inheritMany(N.AudioPacket, [N.PingPacket, N.IncomingAudioPacket]);
    _inherit(U.ServerInfo, U._ServerInfo_Object_JsonString);
    _inherit(S._MumbleClientBase_MumbleClient_Notifier, U.MumbleClient);
    _inherit(S.MumbleClientBase, S._MumbleClientBase_MumbleClient_Notifier);
    _inherit(S.ServerInfoBase, U.ServerInfo);
    _inherit(N.ConnectionImp, V.Connection);
    _inheritMany(P.StreamSink, [N._WebSocketDataSink, M.ProtobufHeaderPrepender]);
    _inherit(Q.ConnectionOptions, Q._ConnectionOptions_Object_JsonString);
    _inheritMany(M.GeneratedMessage, [G.Version, G.UDPTunnel, G.Authenticate, G.Ping, G.Reject, G.ServerSync, G.ChannelRemove, G.ChannelState, G.UserRemove, G.UserState, G.BanList_BanEntry, G.BanList, G.TextMessage, G.PermissionDenied, G.ACL_ChanGroup, G.ACL_ChanACL, G.ACL, G.QueryUsers, G.CryptSetup, G.ContextActionModify, G.ContextAction, G.UserList_User, G.UserList, G.VoiceTarget_Target, G.VoiceTarget, G.PermissionQuery, G.CodecVersion, G.UserStats_Stats, G.UserStats0, G.RequestBlob, G.ServerConfig0, G.SuggestConfig, G.PluginDataTransmission]);
    _inheritMany(M.ProtobufEnum, [S.Reject_RejectType, S.PermissionDenied_DenyType, S.ContextActionModify_Operation]);
    _inherit(T.BanEntry, T._BanEntry_Object_JsonString);
    _inherit(N.ChannelChanges, N._ChannelChanges_Object_JsonString);
    _inherit(N._Channel_Object_Notifier_JsonString, N._Channel_Object_Notifier);
    _inherit(N.Channel, N._Channel_Object_Notifier_JsonString);
    _inherit(M.CryptState, M._CryptState_Object_JsonString);
    _inherit(X.Permission, X._Permission_Object_JsonString);
    _inherit(K.RegisteredUser, K._RegisteredUser_Object_JsonString);
    _inherit(G.ServerSuggestedClientConfig, G._ServerSuggestedClientConfig_Object_JsonString);
    _inherit(G.ServerConfig, G._ServerConfig_Object_JsonString);
    _inherit(G.ServerConnectionStats, G._ServerConnectionStats_Object_JsonString);
    _inherit(G.ServerCodecVersion, G._ServerCodecVersion_Object_JsonString);
    _inherit(Y.PacketStats, Y._PacketStats_Object_JsonString);
    _inherit(Y.VersionInformation, Y._VersionInformation_Object_JsonString);
    _inherit(Y.PingStats, Y._PingStats_Object_JsonString);
    _inherit(Q.TextMessage0, Q._TextMessage_Object_JsonString);
    _inheritMany(Q.TextMessage0, [Q.OutgoingTextMessage, Q.IncomingTextMessage]);
    _inherit(N.UserChanges, N._UserChanges_Object_JsonString);
    _inherit(N._User_Object_Notifier_JsonString, N._User_Object_Notifier);
    _inherit(N.User, N._User_Object_Notifier_JsonString);
    _inherit(N.Self, N.User);
    _inherit(A.UserStats, A._UserStats_Object_JsonString);
    _inherit(L.PlatformOptions, L._PlatformOptions_Object_JsonString);
    _inherit(B.PlatformOptionsWeb, L.PlatformOptions);
    _inheritMany(M.PbListBase, [M.FrozenPbList, M.PbList]);
    _inherit(V._MumbleExampleCallback_Object_MumbleClientListener_UserListener, V._MumbleExampleCallback_Object_MumbleClientListener);
    _inherit(V.MumbleExampleCallback, V._MumbleExampleCallback_Object_MumbleClientListener_UserListener);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H.__CastListBase__CastIterableBase_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._AsyncStreamController, P._AsyncStreamControllerDispatch);
    _mixin(P._SyncStreamController, P._SyncStreamControllerDispatch);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonPrettyPrintMixin);
    _mixin(D._AudioClient_Object_Notifier, M.Notifier);
    _mixin(D._AudioFrame_Object_JsonString, B.JsonString);
    _mixin(D.__AudioFrameStream_StreamView__UdpErrorReceiver, D._UdpErrorReceiver);
    _mixin(N._AudioPacket_Object_JsonString, B.JsonString);
    _mixin(U._ServerInfo_Object_JsonString, B.JsonString);
    _mixin(S._MumbleClientBase_MumbleClient_Notifier, M.Notifier);
    _mixin(Q._ConnectionOptions_Object_JsonString, B.JsonString);
    _mixin(T._BanEntry_Object_JsonString, B.JsonString);
    _mixin(N._Channel_Object_Notifier, M.Notifier);
    _mixin(N._Channel_Object_Notifier_JsonString, B.JsonString);
    _mixin(N._ChannelChanges_Object_JsonString, B.JsonString);
    _mixin(M._CryptState_Object_JsonString, B.JsonString);
    _mixin(X._Permission_Object_JsonString, B.JsonString);
    _mixin(K._RegisteredUser_Object_JsonString, B.JsonString);
    _mixin(G._ServerCodecVersion_Object_JsonString, B.JsonString);
    _mixin(G._ServerConfig_Object_JsonString, B.JsonString);
    _mixin(G._ServerConnectionStats_Object_JsonString, B.JsonString);
    _mixin(G._ServerSuggestedClientConfig_Object_JsonString, B.JsonString);
    _mixin(Y._PacketStats_Object_JsonString, B.JsonString);
    _mixin(Y._PingStats_Object_JsonString, B.JsonString);
    _mixin(Y._VersionInformation_Object_JsonString, B.JsonString);
    _mixin(Q._TextMessage_Object_JsonString, B.JsonString);
    _mixin(N._User_Object_Notifier, M.Notifier);
    _mixin(N._User_Object_Notifier_JsonString, B.JsonString);
    _mixin(N._UserChanges_Object_JsonString, B.JsonString);
    _mixin(A._UserStats_Object_JsonString, B.JsonString);
    _mixin(L._PlatformOptions_Object_JsonString, B.JsonString);
    _mixin(V._MumbleExampleCallback_Object_MumbleClientListener, M.MumbleClientListener);
    _mixin(V._MumbleExampleCallback_Object_MumbleClientListener_UserListener, M.UserListener);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    getTypeFromName: getGlobalFromName,
    metadata: [],
    types: ["~()", "~(MumbleClientListener)", "~(Object?)", "~(Object,StackTrace)", "Null()", "int()", "Int64()", "~(@)", "int(Channel)", "~(~())", "@(@)", "Null(@)", "~(@,@)", "~(Object?,Object?)", "@()", "~(ChannelListener)", "~(UserListener)", "double()", "Null(Object,StackTrace)", "~(@,StackTrace)", "int(String?)", "String(int)", "~(Event)", "Channel?(int)", "~(List<@>)", "bool()", "Authenticate(List<int>)", "@(StackTrace)", "Object()", "StackTrace()", "@(@,@)", "~(EventSink<AudioFrame>)", "int(int,Uint8List)", "~(ProtobufPacket)", "@(String)", "RegisteredUser(UserList_User)", "User?(int)", "@(@,String)", "@(StreamSubscription<@>)", "StreamSubscription<@>()", "~(Object)", "Null(Object,StackTrace?)", "Future<List<~>>()", "Future<~>(StreamSubscription<@>)", "_OpenEvent(Event)", "Version(List<int>)", "UDPTunnel(List<int>)", "Future<Null>()", "Ping(List<int>)", "Reject(List<int>)", "ServerSync(List<int>)", "ChannelRemove(List<int>)", "ChannelState(List<int>)", "UserRemove(List<int>)", "UserState(List<int>)", "BanList(List<int>)", "TextMessage(List<int>)", "PermissionDenied(List<int>)", "ACL(List<int>)", "QueryUsers(List<int>)", "CryptSetup(List<int>)", "ContextActionModify(List<int>)", "ContextAction(List<int>)", "UserList(List<int>)", "VoiceTarget(List<int>)", "PermissionQuery(List<int>)", "CodecVersion(List<int>)", "UserStats0(List<int>)", "RequestBlob(List<int>)", "ServerConfig0(List<int>)", "SuggestConfig(List<int>)", "PluginDataTransmission(List<int>)", "_Future<@>(@)", "Null(~)", "Future<~>()", "int(FieldInfo<@>,FieldInfo<@>)", "Null(~())", "~(Object[StackTrace?])", "Null(@,StackTrace)", "~(int,@)", "_Future<@>?()", "Null(@,@)", "String(Match)", "int(int,FieldInfo<@>,@)", "int(int)", "bool(FieldInfo<@>)", "int(int,FieldInfo<@>)", "int(int,int)", "~(@,String)", "~(FieldInfo<@>)", "~(int)", "UnknownFieldSetField()", "~(int,Object)", "List<int>()", "bool(@)", "Uint8List(@)", "int(int,@)", "~(User)", "int(@,@)", "@(Object)", "int(User)", "Version()", "UDPTunnel()", "Authenticate()", "Ping()", "Reject()", "ServerSync()", "ChannelRemove()", "ChannelState()", "UserRemove()", "UserState()", "BanList_BanEntry()", "BanList()", "TextMessage()", "PermissionDenied()", "ACL_ChanGroup()", "ACL_ChanACL()", "ACL()", "QueryUsers()", "CryptSetup()", "ContextActionModify()", "ContextAction()", "UserList_User()", "UserList()", "VoiceTarget_Target()", "VoiceTarget()", "PermissionQuery()", "CodecVersion()", "UserStats_Stats()", "UserStats0()", "RequestBlob()", "ServerConfig0()", "SuggestConfig()", "PluginDataTransmission()", "Reject_RejectType?(int)", "PermissionDenied_DenyType?(int)", "ContextActionModify_Operation?(int)", "BanEntry(BanList_BanEntry)", "~(String[String?])", "String()", "~(UnknownFieldSetField)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: typeof Symbol == "function" && typeof Symbol() == "symbol" ? Symbol("$ti") : "$ti"
  };
  H._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","JavaScriptFunction":"JavaScriptObject","AbortPaymentEvent":"Event","ExtendableEvent":"Event","MessagePort":"EventTarget","NativeFloat32List":"NativeTypedArrayOfDouble","JSBool":{"bool":[]},"JSNull":{"Null":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"]},"JSNumNotInt":{"double":[],"num":[],"Comparable":["num"]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[],"JSIndexable":["@"]},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListMixin.E":"2"},"LateError":{"Error":[]},"CodeUnits":{"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListIterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"TakeIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"TakeIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"ConstantProtoMap":{"ConstantStringMap":["1","2"],"ConstantMap":["1","2"],"Map":["1","2"]},"_ConstantMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"NullError":{"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JSSyntaxRegExp":{"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"NativeByteBuffer":{"ByteBuffer":[]},"NativeTypedData":{"TypedData":[]},"NativeByteData":{"ByteData":[],"TypedData":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"TypedData":[],"JSIndexable":["1"]},"NativeTypedArrayOfDouble":{"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double","FixedLengthListMixin.E":"double"},"NativeTypedArrayOfInt":{"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeInt16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"_Type":{"Type":[]},"_Error":{"Error":[]},"_TypeError":{"Error":[]},"_Future":{"Future":["1"]},"StreamView":{"Stream":["1"]},"StreamSink":{"EventSink":["1"]},"_ControllerEventSinkWrapper":{"EventSink":["1"]},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"AsyncError":{"Error":[]},"_BroadcastStream":{"_ControllerStream":["1"],"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_BroadcastSubscription":{"_ControllerSubscription":["1"],"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_BroadcastStreamController":{"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_SyncCompleter":{"_Completer":["1"],"Completer":["1"]},"StreamTransformerBase":{"StreamTransformer":["1","2"]},"_StreamController":{"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamController":{"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamControllerAddStreamState":{"_AddStreamState":["1"]},"_StreamImpl":{"Stream":["1"]},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedError":{"_DelayedEvent":["@"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_StreamImplEvents":{"_PendingEvents":["1"]},"_DoneStreamSubscription":{"StreamSubscription":["1"]},"_ForwardingStream":{"Stream":["2"]},"_ForwardingStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_MapStream":{"_ForwardingStream":["1","2"],"Stream":["2"],"Stream.T":"2"},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"ListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"IterableBase":{"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"Converter":{"StreamTransformer":["1","2"]},"Encoding":{"Codec":["String","List<int>"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"Utf8Codec":{"Codec":["String","List<int>"],"Codec.S":"String","Codec.T":"List<int>"},"Utf8Encoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"Utf8Decoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExpMatch":{"Match":[]},"String":{"Comparable":["String"],"Pattern":[]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_StringStackTrace":{"StackTrace":[]},"StringBuffer":{"StringSink":[]},"CloseEvent":{"Event":[]},"MessageEvent":{"Event":[]},"WebSocket":{"EventTarget":[]},"_EventStream":{"Stream":["1"],"Stream.T":"1"},"_EventStreamSubscription":{"StreamSubscription":["1"]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"HexCodec":{"Codec":["List<int>","String"],"Codec.S":"List<int>","Codec.T":"String"},"HexDecoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"HexEncoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"AudioClient":{"Notifier":["AudioListener"]},"AudioClientBase":{"Notifier":["AudioListener"],"Notifier.T":"AudioListener"},"AudioFrameSink":{"StreamSink":["AudioFrame"],"EventSink":["AudioFrame"]},"_AudioFrameStream":{"StreamView":["AudioFrame"],"Stream":["AudioFrame"],"_UdpErrorReceiver":[],"StreamView.T":"AudioFrame","Stream.T":"AudioFrame"},"MumbleClientBase":{"MumbleClient":[],"Notifier":["MumbleClientListener"],"Notifier.T":"MumbleClientListener"},"Connection":{"StreamView":["ProtobufPacket"],"Stream":["ProtobufPacket"]},"ConnectionImp":{"Connection":[],"StreamView":["ProtobufPacket"],"Stream":["ProtobufPacket"],"StreamView.T":"ProtobufPacket","Stream.T":"ProtobufPacket"},"_WebSocketDataSink":{"StreamSink":["List<int>"],"EventSink":["List<int>"]},"UnhandeledError":{"Error":[]},"Version":{"GeneratedMessage":[]},"UDPTunnel":{"GeneratedMessage":[]},"Authenticate":{"GeneratedMessage":[]},"Ping":{"GeneratedMessage":[]},"Reject":{"GeneratedMessage":[]},"ServerSync":{"GeneratedMessage":[]},"ChannelRemove":{"GeneratedMessage":[]},"ChannelState":{"GeneratedMessage":[]},"UserRemove":{"GeneratedMessage":[]},"UserState":{"GeneratedMessage":[]},"BanList_BanEntry":{"GeneratedMessage":[]},"BanList":{"GeneratedMessage":[]},"TextMessage":{"GeneratedMessage":[]},"PermissionDenied":{"GeneratedMessage":[]},"ACL_ChanGroup":{"GeneratedMessage":[]},"ACL_ChanACL":{"GeneratedMessage":[]},"ACL":{"GeneratedMessage":[]},"QueryUsers":{"GeneratedMessage":[]},"CryptSetup":{"GeneratedMessage":[]},"ContextActionModify":{"GeneratedMessage":[]},"ContextAction":{"GeneratedMessage":[]},"UserList_User":{"GeneratedMessage":[]},"UserList":{"GeneratedMessage":[]},"VoiceTarget_Target":{"GeneratedMessage":[]},"VoiceTarget":{"GeneratedMessage":[]},"PermissionQuery":{"GeneratedMessage":[]},"CodecVersion":{"GeneratedMessage":[]},"UserStats_Stats":{"GeneratedMessage":[]},"UserStats0":{"GeneratedMessage":[]},"RequestBlob":{"GeneratedMessage":[]},"ServerConfig0":{"GeneratedMessage":[]},"SuggestConfig":{"GeneratedMessage":[]},"PluginDataTransmission":{"GeneratedMessage":[]},"Reject_RejectType":{"ProtobufEnum":[]},"PermissionDenied_DenyType":{"ProtobufEnum":[]},"ContextActionModify_Operation":{"ProtobufEnum":[]},"Channel":{"Notifier":["ChannelListener"],"Notifier.T":"ChannelListener"},"User":{"Notifier":["UserListener"],"Notifier.T":"UserListener"},"Self":{"User":[],"Notifier":["UserListener"],"Notifier.T":"UserListener"},"ProtobufHeaderPrepender":{"StreamSink":["ProtobufPacket"],"EventSink":["ProtobufPacket"]},"ProtobufStreamTransformer":{"StreamTransformer":["Uint8List","ProtobufPacket"]},"ExtendedCompleter":{"Completer":["1"]},"Int64":{"Comparable":["Object"]},"Extension":{"FieldInfo":["1"]},"PbList":{"PbListBase":["1"],"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1"},"PbListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_EmptyExtensionRegistry":{"ExtensionRegistry":[]},"FrozenPbList":{"PbListBase":["1"],"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1"},"MumbleExampleCallback":{"MumbleClientListener":[],"UserListener":[]}}'));
  H._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"NativeTypedArray":1,"StreamTransformerBase":2,"ListBase":1,"_ListBase_Object_ListMixin":1,"IterableBase":1,"MapBase":2}'));
  var string$ = {
    Broadc: "Broadcast stream controllers do not support pause callbacks",
    Cannot: "Cannot fire new event. Controller is already firing an event",
    CodedB: "CodedBufferReader encountered an embedded string or message which claimed to have negative size."
  };
  var type$ = (function rtii() {
    var findType = H.findType;
    return {
      $env_1_1_void: findType("@<~>"),
      AsyncError: findType("AsyncError"),
      AudioClientBase: findType("AudioClientBase"),
      Authenticate: findType("Authenticate"),
      BanEntry: findType("BanEntry"),
      BanList: findType("BanList"),
      BanList_BanEntry: findType("BanList_BanEntry"),
      BuilderInfo: findType("BuilderInfo"),
      ByteBuffer: findType("ByteBuffer"),
      ByteData: findType("ByteData"),
      Channel: findType("Channel"),
      ChannelListener: findType("ChannelListener"),
      ChannelRemove: findType("ChannelRemove"),
      ChannelState: findType("ChannelState"),
      CloseEvent: findType("CloseEvent"),
      CodecVersion: findType("CodecVersion"),
      Comparable_dynamic: findType("Comparable<@>"),
      Connection: findType("Connection"),
      CryptSetup: findType("CryptSetup"),
      DateTime: findType("DateTime"),
      Duration: findType("Duration"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Error: findType("Error"),
      Event: findType("Event"),
      EventSink_AudioFrame: findType("EventSink<AudioFrame>"),
      ExtendedCompleter_void: findType("ExtendedCompleter<~>"),
      Extension_dynamic: findType("Extension<@>"),
      FieldInfo_dynamic: findType("FieldInfo<@>"),
      Function: findType("Function"),
      Future_dynamic: findType("Future<@>"),
      Future_void: findType("Future<~>"),
      GeneratedMessage: findType("GeneratedMessage"),
      HexCodec: findType("HexCodec"),
      Int64: findType("Int64"),
      Iterable_double: findType("Iterable<double>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_AudioFrameSink: findType("JSArray<AudioFrameSink>"),
      JSArray_AudioListener: findType("JSArray<AudioListener>"),
      JSArray_Channel: findType("JSArray<Channel>"),
      JSArray_ChannelListener: findType("JSArray<ChannelListener>"),
      JSArray_FieldInfo_dynamic: findType("JSArray<FieldInfo<@>>"),
      JSArray_Future_dynamic: findType("JSArray<Future<@>>"),
      JSArray_Int64: findType("JSArray<Int64>"),
      JSArray_List_int: findType("JSArray<List<int>>"),
      JSArray_MumbleClientListener: findType("JSArray<MumbleClientListener>"),
      JSArray_StreamSubscription_dynamic: findType("JSArray<StreamSubscription<@>>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_Uint8List: findType("JSArray<Uint8List>"),
      JSArray_UnknownFieldSet: findType("JSArray<UnknownFieldSet>"),
      JSArray_User: findType("JSArray<User>"),
      JSArray_UserListener: findType("JSArray<UserListener>"),
      JSArray__UdpErrorReceiver: findType("JSArray<_UdpErrorReceiver>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JsLinkedHashMap_String_Object: findType("JsLinkedHashMap<String,Object>"),
      JsLinkedHashMap_int_Channel: findType("JsLinkedHashMap<int,Channel>"),
      JsLinkedHashMap_int_User: findType("JsLinkedHashMap<int,User>"),
      JsLinkedHashMap_int__AudioFrameStream: findType("JsLinkedHashMap<int,_AudioFrameStream>"),
      List_BanEntry: findType("List<BanEntry>"),
      List_Channel: findType("List<Channel>"),
      List_GeneratedMessage: findType("List<GeneratedMessage>"),
      List_Int64: findType("List<Int64>"),
      List_List_int: findType("List<List<int>>"),
      List_RegisteredUser: findType("List<RegisteredUser>"),
      List_UnknownFieldSet: findType("List<UnknownFieldSet>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      MapEntry_dynamic_dynamic: findType("MapEntry<@,@>"),
      MapFieldInfo_dynamic_dynamic: findType("MapFieldInfo<@,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_int_String: findType("Map<int,String>"),
      MessageEvent: findType("MessageEvent"),
      MumbleClient: findType("MumbleClient"),
      MumbleClientListener: findType("MumbleClientListener"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      Null: findType("Null"),
      Object: findType("Object"),
      Pattern: findType("Pattern"),
      PbListBase_GeneratedMessage: findType("PbListBase<GeneratedMessage>"),
      PbListBase_dynamic: findType("PbListBase<@>"),
      PermissionDenied: findType("PermissionDenied"),
      PermissionDenied_DenyType: findType("PermissionDenied_DenyType"),
      PermissionQuery: findType("PermissionQuery"),
      Ping: findType("Ping"),
      ProtobufEnum: findType("ProtobufEnum"),
      ProtobufPacket: findType("ProtobufPacket"),
      QueryUsers: findType("QueryUsers"),
      RegExpMatch: findType("RegExpMatch"),
      RegisteredUser: findType("RegisteredUser"),
      Reject: findType("Reject"),
      Reject_RejectType: findType("Reject_RejectType"),
      ServerConfig: findType("ServerConfig0"),
      ServerSync: findType("ServerSync"),
      StackTrace: findType("StackTrace"),
      StreamSink_List_int: findType("StreamSink<List<int>>"),
      StreamSubscription_dynamic: findType("StreamSubscription<@>"),
      Stream_List_int: findType("Stream<List<int>>"),
      Stream_Uint8List: findType("Stream<Uint8List>"),
      Stream_dynamic: findType("Stream<@>"),
      String: findType("String"),
      String_Function_Match: findType("String(Match)"),
      SuggestConfig: findType("SuggestConfig"),
      TextMessage: findType("TextMessage"),
      TypedData: findType("TypedData"),
      Uint8List: findType("Uint8List"),
      UnknownFieldSet: findType("UnknownFieldSet"),
      UnknownFieldSetField: findType("UnknownFieldSetField"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      User: findType("User"),
      UserList: findType("UserList"),
      UserList_User: findType("UserList_User"),
      UserListener: findType("UserListener"),
      UserRemove: findType("UserRemove"),
      UserState: findType("UserState"),
      UserStats: findType("UserStats0"),
      UserStats_Stats: findType("UserStats_Stats"),
      Utf8Codec: findType("Utf8Codec"),
      Version: findType("Version"),
      _AsyncBroadcastStreamController_AudioFrame: findType("_AsyncBroadcastStreamController<AudioFrame>"),
      _AsyncCompleter_void: findType("_AsyncCompleter<~>"),
      _AudioFrameStream: findType("_AudioFrameStream"),
      _EventStream_Event: findType("_EventStream<Event>"),
      _Future_Null: findType("_Future<Null>"),
      _Future_bool: findType("_Future<bool>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_void: findType("_Future<~>"),
      _StreamControllerAddStreamState_nullable_Object: findType("_StreamControllerAddStreamState<Object?>"),
      _StreamIterator_Uint8List: findType("_StreamIterator<Uint8List>"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_dynamic_dynamic: findType("@(@,@)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_AudioClientBase: findType("AudioClientBase?"),
      nullable_Channel: findType("Channel?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_GeneratedMessage_Function: findType("GeneratedMessage()?"),
      nullable_List_FieldInfo_dynamic: findType("List<FieldInfo<@>>?"),
      nullable_List_ProtobufEnum: findType("List<ProtobufEnum>?"),
      nullable_List_String: findType("List<String>?"),
      nullable_Object: findType("Object?"),
      nullable_PbMap_dynamic_dynamic: findType("PbMap<@,@>?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_String_Function_Match: findType("String(Match)?"),
      nullable_String_Function_String: findType("String(String)?"),
      nullable_UdpTransport: findType("UdpTransport?"),
      nullable_User: findType("User?"),
      nullable__DelayedEvent_dynamic: findType("_DelayedEvent<@>?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable_bool_Function_Object: findType("bool(Object)?"),
      nullable_dynamic_Function_Event: findType("@(Event)?"),
      nullable_nullable_ProtobufEnum_Function_int: findType("ProtobufEnum?(int)?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_CloseEvent: findType("~(CloseEvent)?"),
      nullable_void_Function_Event: findType("~(Event)?"),
      nullable_void_Function_MessageEvent: findType("~(MessageEvent)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)"),
      void_Function_int_dynamic: findType("~(int,@)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NativeByteData_methods = H.NativeByteData.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.WebSocket_methods = W.WebSocket.prototype;
    C.AudioCodec_1 = new R.AudioCodec("AudioCodec.ping");
    C.AudioCodec_4 = new R.AudioCodec("AudioCodec.opus");
    C.C_EmptyIterator = new H.EmptyIterator(H.findType("EmptyIterator<0&>"));
    C.C_Endian0 = new P.Endian();
    C.C_Endian = new P.Endian();
    C.C_HexCodec = new N.HexCodec();
    C.C_HexDecoder = new A.HexDecoder();
    C.C_HexEncoder = new R.HexEncoder();
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C_Utf8Encoder = new P.Utf8Encoder();
    C.C__DelayedDone = new P._DelayedDone();
    C.C__EmptyExtensionRegistry = new M._EmptyExtensionRegistry();
    C.C__RootZone = new P._RootZone();
    C.C__StringStackTrace = new P._StringStackTrace();
    C.ChannelChanges_mlz = new N.ChannelChanges(false, true, false, false, false, false, false, false);
    C.ContextActionModify_Operation_0_Add = new S.ContextActionModify_Operation(0, "Add");
    C.DenyType_1 = new N.DenyType("DenyType.permission");
    C.DenyType_8 = new N.DenyType("DenyType.userName");
    C.Duration_0 = new P.Duration(0);
    C.Duration_30000000 = new P.Duration(30000000);
    C.Duration_500000 = new P.Duration(500000);
    C.Duration_5000000 = new P.Duration(5000000);
    C.Int64_0_0_0 = new V.Int64(0, 0, 0);
    C.Int64_4194303_4194303_1048575 = new V.Int64(4194303, 4194303, 1048575);
    C.ContextActionModify_Operation_1_Remove = new S.ContextActionModify_Operation(1, "Remove");
    C.List_89P = H.setRuntimeTypeInfo(makeConstList([C.ContextActionModify_Operation_0_Add, C.ContextActionModify_Operation_1_Remove]), H.findType("JSArray<ContextActionModify_Operation>"));
    C.TalkMode_0 = new R.TalkMode("TalkMode.normal");
    C.TalkMode_1 = new R.TalkMode("TalkMode.whisperToChannel");
    C.TalkMode_2 = new R.TalkMode("TalkMode.whisperToUser");
    C.List_GN8 = H.setRuntimeTypeInfo(makeConstList([C.TalkMode_0, C.TalkMode_1, C.TalkMode_2]), H.findType("JSArray<TalkMode>"));
    C.RejectType_0 = new N.RejectType("RejectType.none");
    C.RejectType_1 = new N.RejectType("RejectType.wrongVersion");
    C.RejectType_2 = new N.RejectType("RejectType.invalidUsername");
    C.RejectType_3 = new N.RejectType("RejectType.wrongUserPassword");
    C.RejectType_4 = new N.RejectType("RejectType.wrongServerPassword");
    C.RejectType_5 = new N.RejectType("RejectType.usernameInUse");
    C.RejectType_6 = new N.RejectType("RejectType.serverFull");
    C.RejectType_7 = new N.RejectType("RejectType.noCertificate");
    C.RejectType_8 = new N.RejectType("RejectType.authenticatorFail");
    C.RejectType_9 = new N.RejectType("RejectType.usernameCertMissmatch");
    C.List_MQk = H.setRuntimeTypeInfo(makeConstList([C.RejectType_0, C.RejectType_1, C.RejectType_2, C.RejectType_3, C.RejectType_4, C.RejectType_5, C.RejectType_6, C.RejectType_7, C.RejectType_8, C.RejectType_9]), H.findType("JSArray<RejectType>"));
    C.List_WrN = H.setRuntimeTypeInfo(makeConstList([0, 0, 1048576, 531441, 1048576, 390625, 279936, 823543, 262144, 531441, 1000000, 161051, 248832, 371293, 537824, 759375, 1048576, 83521, 104976, 130321, 160000, 194481, 234256, 279841, 331776, 390625, 456976, 531441, 614656, 707281, 810000, 923521, 1048576, 35937, 39304, 42875, 46656]), type$.JSArray_int);
    C.Reject_RejectType_0_None = new S.Reject_RejectType(0, "None");
    C.Reject_RejectType_1_WrongVersion = new S.Reject_RejectType(1, "WrongVersion");
    C.Reject_RejectType_2_InvalidUsername = new S.Reject_RejectType(2, "InvalidUsername");
    C.Reject_RejectType_3_WrongUserPW = new S.Reject_RejectType(3, "WrongUserPW");
    C.Reject_RejectType_4_WrongServerPW = new S.Reject_RejectType(4, "WrongServerPW");
    C.Reject_RejectType_5_UsernameInUse = new S.Reject_RejectType(5, "UsernameInUse");
    C.Reject_RejectType_6_ServerFull = new S.Reject_RejectType(6, "ServerFull");
    C.Reject_RejectType_7_NoCertificate = new S.Reject_RejectType(7, "NoCertificate");
    C.Reject_RejectType_8_AuthenticatorFail = new S.Reject_RejectType(8, "AuthenticatorFail");
    C.Reject_RejectType_9_UsernameCertMissmatch = new S.Reject_RejectType(9, "UsernameCertMissmatch");
    C.List_aXh = H.setRuntimeTypeInfo(makeConstList([C.Reject_RejectType_0_None, C.Reject_RejectType_1_WrongVersion, C.Reject_RejectType_2_InvalidUsername, C.Reject_RejectType_3_WrongUserPW, C.Reject_RejectType_4_WrongServerPW, C.Reject_RejectType_5_UsernameInUse, C.Reject_RejectType_6_ServerFull, C.Reject_RejectType_7_NoCertificate, C.Reject_RejectType_8_AuthenticatorFail, C.Reject_RejectType_9_UsernameCertMissmatch]), H.findType("JSArray<Reject_RejectType>"));
    C.PermissionDenied_DenyType_0_Text = new S.PermissionDenied_DenyType(0, "Text");
    C.PermissionDenied_DenyType_1_Permission = new S.PermissionDenied_DenyType(1, "Permission");
    C.PermissionDenied_DenyType_2_SuperUser = new S.PermissionDenied_DenyType(2, "SuperUser");
    C.PermissionDenied_DenyType_3_ChannelName = new S.PermissionDenied_DenyType(3, "ChannelName");
    C.PermissionDenied_DenyType_4_TextTooLong = new S.PermissionDenied_DenyType(4, "TextTooLong");
    C.PermissionDenied_DenyType_5_H9K = new S.PermissionDenied_DenyType(5, "H9K");
    C.PermissionDenied_DenyType_6_TemporaryChannel = new S.PermissionDenied_DenyType(6, "TemporaryChannel");
    C.PermissionDenied_DenyType_7_MissingCertificate = new S.PermissionDenied_DenyType(7, "MissingCertificate");
    C.PermissionDenied_DenyType_8_UserName = new S.PermissionDenied_DenyType(8, "UserName");
    C.PermissionDenied_DenyType_9_ChannelFull = new S.PermissionDenied_DenyType(9, "ChannelFull");
    C.PermissionDenied_DenyType_10_NestingLimit = new S.PermissionDenied_DenyType(10, "NestingLimit");
    C.PermissionDenied_DenyType_11_ChannelCountLimit = new S.PermissionDenied_DenyType(11, "ChannelCountLimit");
    C.PermissionDenied_DenyType_12_ChannelListenerLimit = new S.PermissionDenied_DenyType(12, "ChannelListenerLimit");
    C.PermissionDenied_DenyType_13_UserListenerLimit = new S.PermissionDenied_DenyType(13, "UserListenerLimit");
    C.List_cOY = H.setRuntimeTypeInfo(makeConstList([C.PermissionDenied_DenyType_0_Text, C.PermissionDenied_DenyType_1_Permission, C.PermissionDenied_DenyType_2_SuperUser, C.PermissionDenied_DenyType_3_ChannelName, C.PermissionDenied_DenyType_4_TextTooLong, C.PermissionDenied_DenyType_5_H9K, C.PermissionDenied_DenyType_6_TemporaryChannel, C.PermissionDenied_DenyType_7_MissingCertificate, C.PermissionDenied_DenyType_8_UserName, C.PermissionDenied_DenyType_9_ChannelFull, C.PermissionDenied_DenyType_10_NestingLimit, C.PermissionDenied_DenyType_11_ChannelCountLimit, C.PermissionDenied_DenyType_12_ChannelListenerLimit, C.PermissionDenied_DenyType_13_UserListenerLimit]), H.findType("JSArray<PermissionDenied_DenyType>"));
    C.List_empty0 = H.setRuntimeTypeInfo(makeConstList([]), type$.JSArray_String);
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), type$.JSArray_int);
    C.List_empty1 = H.setRuntimeTypeInfo(makeConstList([]), type$.JSArray_dynamic);
    C.AudioCodec_0 = new R.AudioCodec("AudioCodec.celtAlpha");
    C.AudioCodec_2 = new R.AudioCodec("AudioCodec.speex");
    C.AudioCodec_3 = new R.AudioCodec("AudioCodec.celtBeta");
    C.List_gkc = H.setRuntimeTypeInfo(makeConstList([C.AudioCodec_0, C.AudioCodec_1, C.AudioCodec_2, C.AudioCodec_3, C.AudioCodec_4]), H.findType("JSArray<AudioCodec>"));
    C.DenyType_0 = new N.DenyType("DenyType.text");
    C.DenyType_2 = new N.DenyType("DenyType.superUser");
    C.DenyType_3 = new N.DenyType("DenyType.channelName");
    C.DenyType_4 = new N.DenyType("DenyType.textTooLong");
    C.DenyType_5 = new N.DenyType("DenyType.h9K");
    C.DenyType_6 = new N.DenyType("DenyType.temporaryChannel");
    C.DenyType_7 = new N.DenyType("DenyType.missingCertificate");
    C.DenyType_9 = new N.DenyType("DenyType.channelFull");
    C.DenyType_10 = new N.DenyType("DenyType.nestingLimit");
    C.DenyType_11 = new N.DenyType("DenyType.channelCountLimit");
    C.DenyType_12 = new N.DenyType("DenyType.channelListenerLimit");
    C.DenyType_13 = new N.DenyType("DenyType.userListenerLimit");
    C.List_yvr = H.setRuntimeTypeInfo(makeConstList([C.DenyType_0, C.DenyType_1, C.DenyType_2, C.DenyType_3, C.DenyType_4, C.DenyType_5, C.DenyType_6, C.DenyType_7, C.DenyType_8, C.DenyType_9, C.DenyType_10, C.DenyType_11, C.DenyType_12, C.DenyType_13]), H.findType("JSArray<DenyType>"));
    C.Type_Version_p2F = H.typeLiteral("Version");
    C.Type_UDPTunnel_2Jd = H.typeLiteral("UDPTunnel");
    C.Type_Authenticate_UJB = H.typeLiteral("Authenticate");
    C.Type_Ping_ul8 = H.typeLiteral("Ping");
    C.Type_Reject_haQ = H.typeLiteral("Reject");
    C.Type_ServerSync_qlM = H.typeLiteral("ServerSync");
    C.Type_ChannelRemove_u2w = H.typeLiteral("ChannelRemove");
    C.Type_ChannelState_m9K = H.typeLiteral("ChannelState");
    C.Type_UserRemove_Qcz = H.typeLiteral("UserRemove");
    C.Type_UserState_OzB = H.typeLiteral("UserState");
    C.Type_BanList_wAl = H.typeLiteral("BanList");
    C.Type_TextMessage_yHF = H.typeLiteral("TextMessage");
    C.Type_PermissionDenied_csC = H.typeLiteral("PermissionDenied");
    C.Type_ACL_ciW = H.typeLiteral("ACL");
    C.Type_QueryUsers_ku2 = H.typeLiteral("QueryUsers");
    C.Type_CryptSetup_ybo = H.typeLiteral("CryptSetup");
    C.Type_ContextActionModify_i7B = H.typeLiteral("ContextActionModify");
    C.Type_ContextAction_8Gl = H.typeLiteral("ContextAction");
    C.Type_UserList_GM5 = H.typeLiteral("UserList");
    C.Type_VoiceTarget_oqh = H.typeLiteral("VoiceTarget");
    C.Type_PermissionQuery_HlL = H.typeLiteral("PermissionQuery");
    C.Type_CodecVersion_JQR = H.typeLiteral("CodecVersion");
    C.Type_UserStats_U01 = H.typeLiteral("UserStats0");
    C.Type_RequestBlob_uHQ = H.typeLiteral("RequestBlob");
    C.Type_ServerConfig_A8Z = H.typeLiteral("ServerConfig0");
    C.Type_SuggestConfig_erF = H.typeLiteral("SuggestConfig");
    C.Type_PluginDataTransmission_Ke4 = H.typeLiteral("PluginDataTransmission");
    C.Map_KZ7NE = new H.GeneralConstantMap([C.Type_Version_p2F, 0, C.Type_UDPTunnel_2Jd, 1, C.Type_Authenticate_UJB, 2, C.Type_Ping_ul8, 3, C.Type_Reject_haQ, 4, C.Type_ServerSync_qlM, 5, C.Type_ChannelRemove_u2w, 6, C.Type_ChannelState_m9K, 7, C.Type_UserRemove_Qcz, 8, C.Type_UserState_OzB, 9, C.Type_BanList_wAl, 10, C.Type_TextMessage_yHF, 11, C.Type_PermissionDenied_csC, 12, C.Type_ACL_ciW, 13, C.Type_QueryUsers_ku2, 14, C.Type_CryptSetup_ybo, 15, C.Type_ContextActionModify_i7B, 16, C.Type_ContextAction_8Gl, 17, C.Type_UserList_GM5, 18, C.Type_VoiceTarget_oqh, 19, C.Type_PermissionQuery_HlL, 20, C.Type_CodecVersion_JQR, 21, C.Type_UserStats_U01, 22, C.Type_RequestBlob_uHQ, 23, C.Type_ServerConfig_A8Z, 24, C.Type_SuggestConfig_erF, 25, C.Type_PluginDataTransmission_Ke4, 26], H.findType("GeneralConstantMap<Type,int>"));
    C.PackageName_Mno = new M.PackageName("");
    C.PackageName_MumbleProto = new M.PackageName("MumbleProto");
    C.Utf8Codec_true = new P.Utf8Codec(true);
    C.Utf8Decoder_true = new P.Utf8Decoder(true);
    C._IterationMarker_null_2 = new P._IterationMarker(null, 2);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = H.setRuntimeTypeInfo([], H.findType("JSArray<Object>"));
    $._FieldSet__zeroList = [];
    $.GeneratedMessage__defaultMakers = P.LinkedHashMap_LinkedHashMap$_empty(H.findType("Function?"), type$.Function);
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazyFinal($, "nullFuture", "$get$nullFuture", function() {
      return C.C__RootZone.run$1$1(new H.nullFuture_closure(), H.findType("Future<Null>"));
    });
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", function() {
      return type$._Future_Null._as($.$get$nullFuture());
    });
    _lazyFinal($, "Future__falseFuture", "$get$Future__falseFuture", function() {
      return P._Future$zoneValue(false, C.C__RootZone, type$.bool);
    });
    _lazyFinal($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", function() {
      return new P.Utf8Decoder__decoder_closure().call$0();
    });
    _lazyFinal($, "Utf8Decoder__decoderNonfatal", "$get$Utf8Decoder__decoderNonfatal", function() {
      return new P.Utf8Decoder__decoderNonfatal_closure().call$0();
    });
    _lazyFinal($, "DateTime__parseFormat", "$get$DateTime__parseFormat", function() {
      return P.RegExp_RegExp("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d+))?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$");
    });
    _lazyFinal($, "Platform__version", "$get$Platform__version", function() {
      return P._Platform_version();
    });
    _lazyFinal($, "Version__i", "$get$Version__i", function() {
      var t1 = M.BuilderInfo$("Version", G.Mumble_pb_Version_create$closure(), C.PackageName_MumbleProto);
      t1.a$1$3(1, "version", 32768, type$.int);
      t1.aOS$2(2, "release");
      t1.aOS$2(3, "os");
      t1.aOS$2(4, "osVersion");
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "UDPTunnel__i", "$get$UDPTunnel__i", function() {
      var t1 = M.BuilderInfo$("UDPTunnel", G.Mumble_pb_UDPTunnel_create$closure(), C.PackageName_MumbleProto);
      t1.a$1$3(1, "packet", 33, type$.List_int);
      return t1;
    });
    _lazyFinal($, "Authenticate__i", "$get$Authenticate__i", function() {
      var t1 = M.BuilderInfo$("Authenticate", G.Mumble_pb_Authenticate_create$closure(), C.PackageName_MumbleProto);
      t1.aOS$2(1, "username");
      t1.aOS$2(2, "password");
      t1.pPS$2(3, "tokens");
      t1.p$1$3(4, "celtVersions", 2050, type$.int);
      t1.aOB$2(5, "opus");
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "Ping__i", "$get$Ping__i", function() {
      var t2, _32768 = 32768,
        t1 = M.BuilderInfo$("Ping", G.Mumble_pb_Ping_create$closure(), C.PackageName_MumbleProto);
      t1.a$1$4$defaultOrMaker(1, "timestamp", 65536, C.Int64_0_0_0, type$.Int64);
      t2 = type$.int;
      t1.a$1$3(2, "good", _32768, t2);
      t1.a$1$3(3, "late", _32768, t2);
      t1.a$1$3(4, "lost", _32768, t2);
      t1.a$1$3(5, "resync", _32768, t2);
      t1.a$1$3(6, "udpPackets", _32768, t2);
      t1.a$1$3(7, "tcpPackets", _32768, t2);
      t2 = type$.double;
      t1.a$1$3(8, "udpPingAvg", 256, t2);
      t1.a$1$3(9, "udpPingVar", 256, t2);
      t1.a$1$3(10, "tcpPingAvg", 256, t2);
      t1.a$1$3(11, "tcpPingVar", 256, t2);
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "Reject__i", "$get$Reject__i", function() {
      var t1 = M.BuilderInfo$("Reject", G.Mumble_pb_Reject_create$closure(), C.PackageName_MumbleProto);
      t1.e$1$6$defaultOrMaker$enumValues$valueOf(1, "type", 512, C.Reject_RejectType_0_None, C.List_aXh, S.Mumble_pbenum_Reject_RejectType_valueOf$closure(), type$.Reject_RejectType);
      t1.aOS$2(2, "reason");
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "ServerSync__i", "$get$ServerSync__i", function() {
      var t1 = M.BuilderInfo$("ServerSync", G.Mumble_pb_ServerSync_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "session", 32768, t2);
      t1.a$1$3(2, "maxBandwidth", 32768, t2);
      t1.aOS$2(3, "welcomeText");
      t1.a$1$4$defaultOrMaker(4, "permissions", 65536, C.Int64_0_0_0, type$.Int64);
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "ChannelRemove__i", "$get$ChannelRemove__i", function() {
      var t1 = M.BuilderInfo$("ChannelRemove", G.Mumble_pb_ChannelRemove_create$closure(), C.PackageName_MumbleProto);
      t1.a$1$3(1, "channelId", 32769, type$.int);
      return t1;
    });
    _lazyFinal($, "ChannelState__i", "$get$ChannelState__i", function() {
      var t1 = M.BuilderInfo$("ChannelState", G.Mumble_pb_ChannelState_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "channelId", 32768, t2);
      t1.a$1$3(2, "parent", 32768, t2);
      t1.aOS$2(3, "name");
      t1.p$1$3(4, "links", 32770, t2);
      t1.aOS$2(5, "description");
      t1.p$1$3(6, "linksAdd", 32770, t2);
      t1.p$1$3(7, "linksRemove", 32770, t2);
      t1.aOB$2(8, "temporary");
      t1.a$1$3(9, "position", 2048, t2);
      t1.a$1$3(10, "descriptionHash", 32, type$.List_int);
      t1.a$1$3(11, "maxUsers", 32768, t2);
      t1.aOB$2(12, "isEnterRestricted");
      t1.aOB$2(13, "canEnter");
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "UserRemove__i", "$get$UserRemove__i", function() {
      var t1 = M.BuilderInfo$("UserRemove", G.Mumble_pb_UserRemove_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "session", 32769, t2);
      t1.a$1$3(2, "actor", 32768, t2);
      t1.aOS$2(3, "reason");
      t1.aOB$2(4, "ban");
      return t1;
    });
    _lazyFinal($, "UserState__i", "$get$UserState__i", function() {
      var t3, _32768 = 32768,
        t1 = M.BuilderInfo$("UserState", G.Mumble_pb_UserState_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "session", _32768, t2);
      t1.a$1$3(2, "actor", _32768, t2);
      t1.aOS$2(3, "name");
      t1.a$1$3(4, "userId", _32768, t2);
      t1.a$1$3(5, "channelId", _32768, t2);
      t1.aOB$2(6, "mute");
      t1.aOB$2(7, "deaf");
      t1.aOB$2(8, "suppress");
      t1.aOB$2(9, "selfMute");
      t1.aOB$2(10, "selfDeaf");
      t3 = type$.List_int;
      t1.a$1$3(11, "texture", 32, t3);
      t1.a$1$3(12, "pluginContext", 32, t3);
      t1.aOS$2(13, "pluginIdentity");
      t1.aOS$2(14, "comment");
      t1.aOS$2(15, "hash");
      t1.a$1$3(16, "commentHash", 32, t3);
      t1.a$1$3(17, "textureHash", 32, t3);
      t1.aOB$2(18, "prioritySpeaker");
      t1.aOB$2(19, "recording");
      t1.pPS$2(20, "temporaryAccessTokens");
      t1.p$1$3(21, "listeningChannelAdd", 32770, t2);
      t1.p$1$3(22, "listeningChannelRemove", 32770, t2);
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "BanList_BanEntry__i", "$get$BanList_BanEntry__i", function() {
      var t2,
        t1 = M.BuilderInfo$("BanList.BanEntry", G.Mumble_pb_BanList_BanEntry_create$closure(), C.PackageName_MumbleProto);
      t1.a$1$3(1, "address", 33, type$.List_int);
      t2 = type$.int;
      t1.a$1$3(2, "mask", 32769, t2);
      t1.aOS$2(3, "name");
      t1.aOS$2(4, "hash");
      t1.aOS$2(5, "reason");
      t1.aOS$2(6, "start");
      t1.a$1$3(7, "duration", 32768, t2);
      return t1;
    });
    _lazyFinal($, "BanList__i", "$get$BanList__i", function() {
      var t1 = M.BuilderInfo$("BanList", G.Mumble_pb_BanList_create$closure(), C.PackageName_MumbleProto);
      t1.pc$1$4$subBuilder(1, "bans", 2097154, G.Mumble_pb_BanList_BanEntry_create$closure(), type$.BanList_BanEntry);
      t1.aOB$2(2, "query");
      return t1;
    });
    _lazyFinal($, "TextMessage__i", "$get$TextMessage__i", function() {
      var t1 = M.BuilderInfo$("TextMessage", G.Mumble_pb_TextMessage_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "actor", 32768, t2);
      t1.p$1$3(2, "session", 32770, t2);
      t1.p$1$3(3, "channelId", 32770, t2);
      t1.p$1$3(4, "treeId", 32770, t2);
      t1.aQS$2(5, "message");
      return t1;
    });
    _lazyFinal($, "PermissionDenied__i", "$get$PermissionDenied__i", function() {
      var t1 = M.BuilderInfo$("PermissionDenied", G.Mumble_pb_PermissionDenied_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "permission", 32768, t2);
      t1.a$1$3(2, "channelId", 32768, t2);
      t1.a$1$3(3, "session", 32768, t2);
      t1.aOS$2(4, "reason");
      t1.e$1$6$defaultOrMaker$enumValues$valueOf(5, "type", 512, C.PermissionDenied_DenyType_0_Text, C.List_cOY, S.Mumble_pbenum_PermissionDenied_DenyType_valueOf$closure(), type$.PermissionDenied_DenyType);
      t1.aOS$2(6, "name");
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "ACL_ChanGroup__i", "$get$ACL_ChanGroup__i", function() {
      var t2,
        t1 = M.BuilderInfo$("ACL.ChanGroup", G.Mumble_pb_ACL_ChanGroup_create$closure(), C.PackageName_MumbleProto);
      t1.aQS$2(1, "name");
      t2 = type$.bool;
      t1.a$1$4$defaultOrMaker(2, "inherited", 16, true, t2);
      t1.a$1$4$defaultOrMaker(3, "inherit", 16, true, t2);
      t1.a$1$4$defaultOrMaker(4, "inheritable", 16, true, t2);
      t2 = type$.int;
      t1.p$1$3(5, "add", 32770, t2);
      t1.p$1$3(6, "remove", 32770, t2);
      t1.p$1$3(7, "inheritedMembers", 32770, t2);
      return t1;
    });
    _lazyFinal($, "ACL_ChanACL__i", "$get$ACL_ChanACL__i", function() {
      var t1 = M.BuilderInfo$("ACL.ChanACL", G.Mumble_pb_ACL_ChanACL_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.bool;
      t1.a$1$4$defaultOrMaker(1, "applyHere", 16, true, t2);
      t1.a$1$4$defaultOrMaker(2, "applySubs", 16, true, t2);
      t1.a$1$4$defaultOrMaker(3, "inherited", 16, true, t2);
      t2 = type$.int;
      t1.a$1$3(4, "userId", 32768, t2);
      t1.aOS$2(5, "group");
      t1.a$1$3(6, "grant", 32768, t2);
      t1.a$1$3(7, "deny", 32768, t2);
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "ACL__i", "$get$ACL__i", function() {
      var t1 = M.BuilderInfo$("ACL", G.Mumble_pb_ACL_create$closure(), C.PackageName_MumbleProto);
      t1.a$1$3(1, "channelId", 32769, type$.int);
      t1.a$1$4$defaultOrMaker(2, "inheritAcls", 16, true, type$.bool);
      t1.pc$1$4$subBuilder(3, "groups", 2097154, G.Mumble_pb_ACL_ChanGroup_create$closure(), H.findType("ACL_ChanGroup"));
      t1.pc$1$4$subBuilder(4, "acls", 2097154, G.Mumble_pb_ACL_ChanACL_create$closure(), H.findType("ACL_ChanACL"));
      t1.aOB$2(5, "query");
      return t1;
    });
    _lazyFinal($, "QueryUsers__i", "$get$QueryUsers__i", function() {
      var t1 = M.BuilderInfo$("QueryUsers", G.Mumble_pb_QueryUsers_create$closure(), C.PackageName_MumbleProto);
      t1.p$1$3(1, "ids", 32770, type$.int);
      t1.pPS$2(2, "names");
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "CryptSetup__i", "$get$CryptSetup__i", function() {
      var t1 = M.BuilderInfo$("CryptSetup", G.Mumble_pb_CryptSetup_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.List_int;
      t1.a$1$3(1, "key", 32, t2);
      t1.a$1$3(2, "clientNonce", 32, t2);
      t1.a$1$3(3, "serverNonce", 32, t2);
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "ContextActionModify__i", "$get$ContextActionModify__i", function() {
      var t1 = M.BuilderInfo$("ContextActionModify", G.Mumble_pb_ContextActionModify_create$closure(), C.PackageName_MumbleProto);
      t1.aQS$2(1, "action");
      t1.aOS$2(2, "text");
      t1.a$1$3(3, "context", 32768, type$.int);
      t1.e$1$6$defaultOrMaker$enumValues$valueOf(4, "operation", 512, C.ContextActionModify_Operation_0_Add, C.List_89P, S.Mumble_pbenum_ContextActionModify_Operation_valueOf$closure(), H.findType("ContextActionModify_Operation"));
      return t1;
    });
    _lazyFinal($, "ContextAction__i", "$get$ContextAction__i", function() {
      var t1 = M.BuilderInfo$("ContextAction", G.Mumble_pb_ContextAction_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "session", 32768, t2);
      t1.a$1$3(2, "channelId", 32768, t2);
      t1.aQS$2(3, "action");
      return t1;
    });
    _lazyFinal($, "UserList_User__i", "$get$UserList_User__i", function() {
      var t1 = M.BuilderInfo$("UserList.User", G.Mumble_pb_UserList_User_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "userId", 32769, t2);
      t1.aOS$2(2, "name");
      t1.aOS$2(3, "lastSeen");
      t1.a$1$3(4, "lastChannel", 32768, t2);
      return t1;
    });
    _lazyFinal($, "UserList__i", "$get$UserList__i", function() {
      var t1 = M.BuilderInfo$("UserList", G.Mumble_pb_UserList_create$closure(), C.PackageName_MumbleProto);
      t1.pc$1$4$subBuilder(1, "users", 2097154, G.Mumble_pb_UserList_User_create$closure(), type$.UserList_User);
      return t1;
    });
    _lazyFinal($, "VoiceTarget_Target__i", "$get$VoiceTarget_Target__i", function() {
      var t1 = M.BuilderInfo$("VoiceTarget.Target", G.Mumble_pb_VoiceTarget_Target_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.p$1$3(1, "session", 32770, t2);
      t1.a$1$3(2, "channelId", 32768, t2);
      t1.aOS$2(3, "group");
      t1.aOB$2(4, "links");
      t1.aOB$2(5, "children");
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "VoiceTarget__i", "$get$VoiceTarget__i", function() {
      var t1 = M.BuilderInfo$("VoiceTarget", G.Mumble_pb_VoiceTarget_create$closure(), C.PackageName_MumbleProto);
      t1.a$1$3(1, "id", 32768, type$.int);
      t1.pc$1$4$subBuilder(2, "targets", 2097154, G.Mumble_pb_VoiceTarget_Target_create$closure(), H.findType("VoiceTarget_Target"));
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "PermissionQuery__i", "$get$PermissionQuery__i", function() {
      var t1 = M.BuilderInfo$("PermissionQuery", G.Mumble_pb_PermissionQuery_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "channelId", 32768, t2);
      t1.a$1$3(2, "permissions", 32768, t2);
      t1.aOB$2(3, "flush");
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "CodecVersion__i", "$get$CodecVersion__i", function() {
      var t1 = M.BuilderInfo$("CodecVersion", G.Mumble_pb_CodecVersion_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "alpha", 2049, t2);
      t1.a$1$3(2, "beta", 2049, t2);
      t1.a$1$4$defaultOrMaker(3, "preferAlpha", 17, true, type$.bool);
      t1.aOB$2(4, "opus");
      return t1;
    });
    _lazyFinal($, "UserStats_Stats__i", "$get$UserStats_Stats__i", function() {
      var _32768 = 32768,
        t1 = M.BuilderInfo$("UserStats.Stats", G.Mumble_pb_UserStats_Stats_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "good", _32768, t2);
      t1.a$1$3(2, "late", _32768, t2);
      t1.a$1$3(3, "lost", _32768, t2);
      t1.a$1$3(4, "resync", _32768, t2);
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "UserStats__i", "$get$UserStats__i", function() {
      var t3, t4, _32768 = 32768,
        t1 = M.BuilderInfo$("UserStats", G.Mumble_pb_UserStats_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "session", _32768, t2);
      t1.aOB$2(2, "statsOnly");
      t3 = type$.List_int;
      t1.p$1$3(3, "certificates", 34, t3);
      t4 = type$.UserStats_Stats;
      t1.aOM$1$3$subBuilder(4, "fromClient", G.Mumble_pb_UserStats_Stats_create$closure(), t4);
      t1.aOM$1$3$subBuilder(5, "fromServer", G.Mumble_pb_UserStats_Stats_create$closure(), t4);
      t1.a$1$3(6, "udpPackets", _32768, t2);
      t1.a$1$3(7, "tcpPackets", _32768, t2);
      t4 = type$.double;
      t1.a$1$3(8, "udpPingAvg", 256, t4);
      t1.a$1$3(9, "udpPingVar", 256, t4);
      t1.a$1$3(10, "tcpPingAvg", 256, t4);
      t1.a$1$3(11, "tcpPingVar", 256, t4);
      t1.aOM$1$3$subBuilder(12, "version", G.Mumble_pb_Version_create$closure(), type$.Version);
      t1.p$1$3(13, "celtVersions", 2050, t2);
      t1.a$1$3(14, "address", 32, t3);
      t1.a$1$3(15, "bandwidth", _32768, t2);
      t1.a$1$3(16, "onlinesecs", _32768, t2);
      t1.a$1$3(17, "idlesecs", _32768, t2);
      t1.aOB$2(18, "strongCertificate");
      t1.aOB$2(19, "opus");
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "RequestBlob__i", "$get$RequestBlob__i", function() {
      var t1 = M.BuilderInfo$("RequestBlob", G.Mumble_pb_RequestBlob_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.p$1$3(1, "sessionTexture", 32770, t2);
      t1.p$1$3(2, "sessionComment", 32770, t2);
      t1.p$1$3(3, "channelDescription", 32770, t2);
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "ServerConfig__i", "$get$ServerConfig__i", function() {
      var _32768 = 32768,
        t1 = M.BuilderInfo$("ServerConfig", G.Mumble_pb_ServerConfig_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$3(1, "maxBandwidth", _32768, t2);
      t1.aOS$2(2, "welcomeText");
      t1.aOB$2(3, "allowHtml");
      t1.a$1$3(4, "messageLength", _32768, t2);
      t1.a$1$3(5, "imageMessageLength", _32768, t2);
      t1.a$1$3(6, "maxUsers", _32768, t2);
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "SuggestConfig__i", "$get$SuggestConfig__i", function() {
      var t1 = M.BuilderInfo$("SuggestConfig", G.Mumble_pb_SuggestConfig_create$closure(), C.PackageName_MumbleProto);
      t1.a$1$3(1, "version", 32768, type$.int);
      t1.aOB$2(2, "positional");
      t1.aOB$2(3, "pushToTalk");
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "PluginDataTransmission__i", "$get$PluginDataTransmission__i", function() {
      var _s13_ = "senderSession",
        _s16_ = "receiverSessions",
        t1 = M.BuilderInfo$("PluginDataTransmission", G.Mumble_pb_PluginDataTransmission_create$closure(), C.PackageName_MumbleProto),
        t2 = type$.int;
      t1.a$1$4$protoName(1, _s13_, 32768, _s13_, t2);
      t1.p$1$4$protoName(2, _s16_, 32774, _s16_, t2);
      t1.a$1$3(3, "data", 32, type$.List_int);
      t1.aOS$3$protoName(4, "dataID", "dataID");
      t1.hasRequiredFields = false;
      return t1;
    });
    _lazyFinal($, "Reject_RejectType__byValue", "$get$Reject_RejectType__byValue", function() {
      return M.ProtobufEnum_initByValue(C.List_aXh, type$.Reject_RejectType);
    });
    _lazyFinal($, "PermissionDenied_DenyType__byValue", "$get$PermissionDenied_DenyType__byValue", function() {
      return M.ProtobufEnum_initByValue(C.List_cOY, type$.PermissionDenied_DenyType);
    });
    _lazyFinal($, "ContextActionModify_Operation__byValue", "$get$ContextActionModify_Operation__byValue", function() {
      return M.ProtobufEnum_initByValue(C.List_89P, H.findType("ContextActionModify_Operation"));
    });
    _lazyFinal($, "_builders", "$get$_builders", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal([0, new F._builders_closure(), 1, new F._builders_closure0(), 2, new F._builders_closure1(), 3, new F._builders_closure2(), 4, new F._builders_closure3(), 5, new F._builders_closure4(), 6, new F._builders_closure5(), 7, new F._builders_closure6(), 8, new F._builders_closure7(), 9, new F._builders_closure8(), 10, new F._builders_closure9(), 11, new F._builders_closure10(), 12, new F._builders_closure11(), 13, new F._builders_closure12(), 14, new F._builders_closure13(), 15, new F._builders_closure14(), 16, new F._builders_closure15(), 17, new F._builders_closure16(), 18, new F._builders_closure17(), 19, new F._builders_closure18(), 20, new F._builders_closure19(), 21, new F._builders_closure20(), 22, new F._builders_closure21(), 23, new F._builders_closure22(), 24, new F._builders_closure23(), 25, new F._builders_closure24(), 26, new F._builders_closure25()], type$.int, H.findType("GeneratedMessage(List<int>)"));
    });
    _lazyFinal($, "defaultConnectionOptions", "$get$defaultConnectionOptions", function() {
      return new Q.ConnectionOptions("Dumble2", "Pandela", C.Duration_5000000);
    });
    _lazyFinal($, "defaultPlatformOptions", "$get$defaultPlatformOptions", function() {
      return new B.PlatformOptionsWeb("wss://home.eric-prokop.de:64738/");
    });
    _lazyFinal($, "CodedBufferWriter__wireTypes", "$get$CodedBufferWriter__wireTypes", function() {
      var t1 = H.NativeUint8List_NativeUint8List(32);
      t1[14] = 0;
      t1[29] = 2;
      t1[27] = 2;
      t1[23] = 1;
      t1[15] = 5;
      t1[31] = 0;
      t1[30] = 3;
      t1[28] = 0;
      t1[25] = 0;
      t1[18] = 0;
      t1[5] = 0;
      t1[11] = 0;
      t1[22] = 0;
      t1[13] = 5;
      t1[26] = 1;
      t1[21] = 5;
      t1[10] = 1;
      t1[20] = 2;
      return t1;
    });
    _lazyFinal($, "_upperCase", "$get$_upperCase", function() {
      return P.RegExp_RegExp("[A-Z]");
    });
    _lazyFinal($, "UnknownFieldSet_emptyUnknownFieldSet", "$get$UnknownFieldSet_emptyUnknownFieldSet", function() {
      var t1 = M.UnknownFieldSet$();
      t1._markReadOnly$0();
      return t1;
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({Blob: J.Interceptor, DOMError: J.Interceptor, File: J.Interceptor, MediaError: J.Interceptor, NavigatorUserMediaError: J.Interceptor, OverconstrainedError: J.Interceptor, PositionError: J.Interceptor, SQLError: J.Interceptor, ArrayBuffer: H.NativeByteBuffer, ArrayBufferView: H.NativeTypedData, DataView: H.NativeByteData, Float32Array: H.NativeTypedArrayOfDouble, Float64Array: H.NativeTypedArrayOfDouble, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, CloseEvent: W.CloseEvent, DOMException: W.DomException, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CompositionEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FocusEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, KeyboardEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MouseEvent: W.Event, DragEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PointerEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, ProgressEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TextEvent: W.Event, TouchEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, UIEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, WheelEvent: W.Event, MojoInterfaceRequestEvent: W.Event, ResourceProgressEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, SubmitEvent: W.Event, MessagePort: W.EventTarget, EventTarget: W.EventTarget, MessageEvent: W.MessageEvent, WebSocket: W.WebSocket});
    hunkHelpers.setOrUpdateLeafTags({Blob: true, DOMError: true, File: true, MediaError: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, SQLError: true, ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, CloseEvent: true, DOMException: true, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CompositionEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FocusEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, KeyboardEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MouseEvent: true, DragEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PointerEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TextEvent: true, TouchEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, UIEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, WheelEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, SubmitEvent: false, MessagePort: true, EventTarget: false, MessageEvent: true, WebSocket: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = V.main;
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();

//# sourceMappingURL=out.js.map
